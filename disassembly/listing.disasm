Disassembly Listing for SmartModule
Generated From:
C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/dist/default/debug/SmartModule.X.debug.elf
Feb 14, 2017 10:11:36 PM

---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/sram.c  -----------------------
1:             /* Project:	SmartModule
2:              * File:	sram.c
3:              * Author:	Jonathan Ruisi
4:              * Created:	February 9, 2017, 4:39 AM
5:              */
6:             
7:             #include <xc.h>
8:             #include <stdbool.h>
9:             #include <string.h>
10:            #include "sram.h"
11:            #include "main.h"
12:            #include "utility.h"
13:            
14:            // GLOBAL VARIABLES------------------------------------------------------------
15:            volatile SramFullDuplexBuffer _sramBuffer;
16:            volatile SramStatus _sramStatus;
17:            
18:            // N01S830XX Functions---------------------------------------------------------
19:            
20:            void SramSetMode(SramMode mode)
21A2  6E1A     MOVWF pressAction, ACCESS
21:            {
22:            	_sramStatus.statusBits.isBusyWrite = true;
21A4  0100     MOVLB 0x0
21A6  83A3     BSF _sramStatus, 1, BANKED
23:            	_sramBuffer.transmit.initialization.command = SRAM_COMMAND_WRMR;
21A8  0E01     MOVLW 0x1
21AA  CFE8     MOVFF WREG, _sramBuffer
21AC  F300     NOP
24:            	_sramBuffer.transmit.initialization.mode = mode;
21AE  EE23     LFSR 2, 0x301
21B0  F001     NOP
21B2  C01A     MOVFF pressAction, INDF2
21B4  FFDF     NOP
25:            	TXADDRH = GET_BYTE((unsigned int) &_sramBuffer.transmit, 1);
21B6  0E03     MOVLW 0x3
21B8  6E6A     MOVWF TXADDRH, ACCESS
26:            	TXADDRL = GET_BYTE((unsigned int) &_sramBuffer.transmit, 0);
21BA  0E00     MOVLW 0x0
21BC  6E6B     MOVWF TXADDRL, ACCESS
27:            	RXADDRH = GET_BYTE((unsigned int) &_sramBuffer.receive, 1);
21BE  0E03     MOVLW 0x3
21C0  6E68     MOVWF RXADDRH, ACCESS
28:            	RXADDRL = GET_BYTE((unsigned int) &_sramBuffer.receive, 0);
21C2  0E84     MOVLW 0x84
21C4  6E69     MOVWF RXADDRL, ACCESS
29:            	DMABCH = 0x00;
21C6  6A66     CLRF DMABCH, ACCESS
30:            	DMABCL = 0x01;
21C8  0E01     MOVLW 0x1
21CA  6E67     MOVWF DMABCL, ACCESS
31:            	RAM_CS = 0;
21CC  968A     BCF LATB, 3, ACCESS
32:            	DMACON1bits.DMAEN = true;
21CE  8088     BSF DMACON1, 0, ACCESS
33:            }
21D0  0012     RETURN 0
34:            
35:            void SramRead(uint24_t address, uint24_t length)
36:            {
37:            	if(address >= SRAM_CAPACITY)
38:            		address %= SRAM_CAPACITY;
39:            	if(address + length >= SRAM_CAPACITY)
40:            		length = SRAM_CAPACITY - address;
41:            	_sramStatus.readAddress = address;
42:            	SramReadNext(length);
43:            }
44:            
45:            void SramReadNext(uint24_t length)
46:            {
47:            	_sramStatus.statusBits.isBusyRead = true;
48:            	_sramStatus.dataLength = length;
49:            	_sramBuffer.transmit.initialization.command = SRAM_COMMAND_READ;
50:            	_sramBuffer.transmit.initialization.address = _sramStatus.readAddress;
51:            	TXADDRH = GET_BYTE((unsigned int) &_sramBuffer.transmit, 1);
52:            	TXADDRL = GET_BYTE((unsigned int) &_sramBuffer.transmit, 0);
53:            	RXADDRH = GET_BYTE((unsigned int) &_sramBuffer.receive, 1);
54:            	RXADDRL = GET_BYTE((unsigned int) &_sramBuffer.receive, 0);
55:            	DMABCH = GET_BYTE(_sramStatus.dataLength + 4, 1);
56:            	DMABCL = GET_BYTE(_sramStatus.dataLength + 4, 0);
57:            	RAM_CS = 0;
58:            	DMACON1bits.DMAEN = true;
59:            }
60:            
61:            void SramWrite(uint24_t address, const char* data, uint8_t length)
62:            {
63:            	if(address >= SRAM_CAPACITY)
64:            		address %= SRAM_CAPACITY;
65:            	if(address + length >= SRAM_CAPACITY)
66:            		length = SRAM_CAPACITY - address;
67:            	_sramStatus.writeAddress = address;
68:            	SramWriteNext(data, length);
69:            }
70:            
71:            void SramWriteNext(const char* data, uint8_t length)
72:            {
73:            	_sramStatus.statusBits.isBusyWrite = true;
74:            	_sramStatus.dataLength = length;
75:            	_sramBuffer.transmit.initialization.command = SRAM_COMMAND_WRITE;
76:            	_sramBuffer.transmit.initialization.address = _sramStatus.writeAddress;
77:            	strcpy((char*) _sramBuffer.transmit.txData, data);
78:            	TXADDRH = GET_BYTE((unsigned int) &_sramBuffer.transmit, 1);
79:            	TXADDRL = GET_BYTE((unsigned int) &_sramBuffer.transmit, 0);
80:            	RXADDRH = GET_BYTE((unsigned int) &_sramBuffer.receive, 1);
81:            	RXADDRL = GET_BYTE((unsigned int) &_sramBuffer.receive, 0);
82:            	DMABCH = GET_BYTE(_sramStatus.dataLength + 4, 1);
83:            	DMABCL = GET_BYTE(_sramStatus.dataLength + 4, 0);
84:            	RAM_CS = 0;
85:            	DMACON1bits.DMAEN = true;
86:            }
87:            
88:            void SramFill(uint24_t address, uint24_t length, uint8_t value)
89:            {
90:            	if(address >= SRAM_CAPACITY)
1A76  0E02     MOVLW 0x2
1A78  5C1C     SUBWF divisor, W, ACCESS
1A7A  A0D8     BTFSS STATUS, 0, ACCESS
1A7C  EF42     GOTO 0x1A84
1A7E  F00D     NOP
1A80  EF44     GOTO 0x1A88
1A82  F00D     NOP
1A84  EF4A     GOTO 0x1A94
1A86  F00D     NOP
91:            		address %= SRAM_CAPACITY;
1A88  0EFF     MOVLW 0xFF
1A8A  161A     ANDWF pressAction, F, ACCESS
1A8C  0EFF     MOVLW 0xFF
1A8E  161B     ANDWF 0x1B, F, ACCESS
1A90  0E01     MOVLW 0x1
1A92  161C     ANDWF divisor, F, ACCESS
92:            	if(address + length >= SRAM_CAPACITY)
1A94  501D     MOVF holdAction, W, ACCESS
1A96  241A     ADDWF pressAction, W, ACCESS
1A98  6E21     MOVWF data, ACCESS
1A9A  501E     MOVF counter, W, ACCESS
1A9C  201B     ADDWFC 0x1B, W, ACCESS
1A9E  6E22     MOVWF quotient, ACCESS
1AA0  501F     MOVF sign, W, ACCESS
1AA2  201C     ADDWFC divisor, W, ACCESS
1AA4  6E23     MOVWF activeLogicLevel, ACCESS
1AA6  0E02     MOVLW 0x2
1AA8  5C23     SUBWF activeLogicLevel, W, ACCESS
1AAA  A0D8     BTFSS STATUS, 0, ACCESS
1AAC  EF5A     GOTO 0x1AB4
1AAE  F00D     NOP
1AB0  EF5C     GOTO 0x1AB8
1AB2  F00D     NOP
1AB4  EF6B     GOTO 0x1AD6
1AB6  F00D     NOP
93:            		length = SRAM_CAPACITY - address;
1AB8  0E00     MOVLW 0x0
1ABA  6E21     MOVWF data, ACCESS
1ABC  0E00     MOVLW 0x0
1ABE  6E22     MOVWF quotient, ACCESS
1AC0  0E02     MOVLW 0x2
1AC2  6E23     MOVWF activeLogicLevel, ACCESS
1AC4  501A     MOVF pressAction, W, ACCESS
1AC6  5C21     SUBWF data, W, ACCESS
1AC8  6E1D     MOVWF holdAction, ACCESS
1ACA  501B     MOVF 0x1B, W, ACCESS
1ACC  5822     SUBWFB quotient, W, ACCESS
1ACE  6E1E     MOVWF counter, ACCESS
1AD0  501C     MOVF divisor, W, ACCESS
1AD2  5823     SUBWFB activeLogicLevel, W, ACCESS
1AD4  6E1F     MOVWF sign, ACCESS
94:            	_sramStatus.statusBits.isBusyFill = true;
1AD6  85A3     BSF _sramStatus, 2, BANKED
95:            	_sramStatus.statusBits.isContinuousFill = true;
1AD8  8DA3     BSF _sramStatus, 6, BANKED
96:            	_sramBuffer.transmit.initialization.command = SRAM_COMMAND_WRITE;
1ADA  0E02     MOVLW 0x2
1ADC  CFE8     MOVFF WREG, _sramBuffer
1ADE  F300     NOP
97:            	_sramBuffer.transmit.initialization.address = address;
1AE0  C01A     MOVFF pressAction, 0x301
1AE2  F301     NOP
1AE4  C01B     MOVFF 0x1B, 0x302
1AE6  F302     NOP
1AE8  C01C     MOVFF divisor, 0x303
1AEA  F303     NOP
98:            	_sramBuffer.transmit.txData[0] = value;
1AEC  EE23     LFSR 2, 0x304
1AEE  F004     NOP
1AF0  C020     MOVFF releaseAction, INDF2
1AF2  FFDF     NOP
99:            	_sramStatus.dataLength = length;
1AF4  C01D     MOVFF holdAction, 0xA4
1AF6  F0A4     NOP
1AF8  C01E     MOVFF counter, 0xA5
1AFA  F0A5     NOP
1AFC  C01F     MOVFF sign, 0xA6
1AFE  F0A6     NOP
100:           	TXADDRH = GET_BYTE((unsigned int) &_sramBuffer.transmit, 1);
1B00  0E03     MOVLW 0x3
1B02  6E6A     MOVWF TXADDRH, ACCESS
101:           	TXADDRL = GET_BYTE((unsigned int) &_sramBuffer.transmit, 0);
1B04  0E00     MOVLW 0x0
1B06  6E6B     MOVWF TXADDRL, ACCESS
102:           	RXADDRH = GET_BYTE((unsigned int) &_sramBuffer.receive, 1);
1B08  0E03     MOVLW 0x3
1B0A  6E68     MOVWF RXADDRH, ACCESS
103:           	RXADDRL = GET_BYTE((unsigned int) &_sramBuffer.receive, 0);
1B0C  0E84     MOVLW 0x84
1B0E  6E69     MOVWF RXADDRL, ACCESS
104:           	DMABCH = 0x00;
1B10  6A66     CLRF DMABCH, ACCESS
105:           	DMABCL = 0x03;
1B12  0E03     MOVLW 0x3
1B14  6E67     MOVWF DMABCL, ACCESS
106:           	RAM_CS = 0;
1B16  968A     BCF LATB, 3, ACCESS
107:           	DMACON1bits.DMAEN = true;
1B18  8088     BSF DMACON1, 0, ACCESS
108:           }
1B1A  0012     RETURN 0
109:           
110:           void SramFillNext(void)
111:           {
112:           	_sramStatus.statusBits.isBusyFill = true;
1E02  85A3     BSF _sramStatus, 2, BANKED
113:           	TXADDRH = GET_BYTE((unsigned int) _sramBuffer.transmit.txData, 1);
1E04  0E03     MOVLW 0x3
1E06  6E6A     MOVWF TXADDRH, ACCESS
114:           	TXADDRL = GET_BYTE((unsigned int) _sramBuffer.transmit.txData, 0);
1E08  0E04     MOVLW 0x4
1E0A  6E6B     MOVWF TXADDRL, ACCESS
115:           	DMACON1bits.DUPLEX1 = 0;
1E0C  9688     BCF DMACON1, 3, ACCESS
116:           	DMACON1bits.DUPLEX0 = 1;
1E0E  8488     BSF DMACON1, 2, ACCESS
117:           	DMACON1bits.TXINC = 0;
1E10  9A88     BCF DMACON1, 5, ACCESS
118:           	_sramStatus.dataLength -= _sramStatus.dataLength >= DMA_MAX_TRANSFER ? DMA_MAX_TRANSFER : _sramStatus.dataLength;
1E12  51A6     MOVF 0xA6, W, BANKED
1E14  E107     BNZ 0x1E24
1E16  0E04     MOVLW 0x4
1E18  5DA5     SUBWF 0xA5, W, BANKED
1E1A  B0D8     BTFSC STATUS, 0, ACCESS
1E1C  EF12     GOTO 0x1E24
1E1E  F00F     NOP
1E20  EF14     GOTO 0x1E28
1E22  F00F     NOP
1E24  EF1C     GOTO 0x1E38
1E26  F00F     NOP
1E28  C0A4     MOVFF 0xA4, holdAction
1E2A  F01D     NOP
1E2C  C0A5     MOVFF 0xA5, counter
1E2E  F01E     NOP
1E30  C0A6     MOVFF 0xA6, sign
1E32  F01F     NOP
1E34  EF22     GOTO 0x1E44
1E36  F00F     NOP
1E38  0E00     MOVLW 0x0
1E3A  6E1D     MOVWF holdAction, ACCESS
1E3C  0E04     MOVLW 0x4
1E3E  6E1E     MOVWF counter, ACCESS
1E40  0E00     MOVLW 0x0
1E42  6E1F     MOVWF sign, ACCESS
1E44  501D     MOVF holdAction, W, ACCESS
1E46  5FA4     SUBWF 0xA4, F, BANKED
1E48  501E     MOVF counter, W, ACCESS
1E4A  5BA5     SUBWFB 0xA5, F, BANKED
1E4C  501F     MOVF sign, W, ACCESS
1E4E  5BA6     SUBWFB 0xA6, F, BANKED
119:           	DMABCH = GET_BYTE(_sramStatus.dataLength - 1, 1);
1E50  0EFF     MOVLW 0xFF
1E52  25A4     ADDWF 0xA4, W, BANKED
1E54  6E1A     MOVWF pressAction, ACCESS
1E56  0EFF     MOVLW 0xFF
1E58  21A5     ADDWFC 0xA5, W, BANKED
1E5A  6E1B     MOVWF 0x1B, ACCESS
1E5C  0EFF     MOVLW 0xFF
1E5E  21A6     ADDWFC 0xA6, W, BANKED
1E60  6E1C     MOVWF divisor, ACCESS
1E62  C01B     MOVFF 0x1B, pressAction
1E64  F01A     NOP
1E66  C01C     MOVFF divisor, 0x1B
1E68  F01B     NOP
1E6A  6A1C     CLRF divisor, ACCESS
1E6C  501A     MOVF pressAction, W, ACCESS
1E6E  6E66     MOVWF DMABCH, ACCESS
120:           	DMABCL = GET_BYTE(_sramStatus.dataLength - 1, 0);
1E70  05A4     DECF 0xA4, W, BANKED
1E72  6E67     MOVWF DMABCL, ACCESS
121:           	DMACON1bits.DMAEN = true;
1E74  8088     BSF DMACON1, 0, ACCESS
122:           }
1E76  0012     RETURN 0
---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/serial_comm.c  ----------------
1:             /* Project:	SmartModule
2:              * File:	serial_comm.c
3:              * Author:	Jonathan Ruisi
4:              * Created:	February 14, 2017, 2:22 AM
5:              */
6:             
7:             #include <xc.h>
8:             #include <stdbool.h>
9:             #include <stdint.h>
10:            #include <stdio.h>
11:            #include "serial_comm.h"
12:            
13:            // GLOBAL VARIABLES------------------------------------------------------------
14:            volatile RingBuffer _txBuffer1, _txBuffer2, _rxBuffer1, _rxBuffer2;
15:            volatile CommStatus _commStatus1, _commStatus2;
16:            
17:            // RING BUFFER FUNCTIONS-------------------------------------------------------
18:            
19:            RingBuffer RingBufferCreate(uint16_t bufferSize, char* dataBuffer)
20:            {
21:            	RingBuffer ringBuffer;
22:            	ringBuffer.bufferSize = bufferSize;
21D2  C01A     MOVFF pressAction, releaseAction
21D4  F020     NOP
23:            	ringBuffer.length = 0;
21D6  6A21     CLRF data, ACCESS
24:            	ringBuffer.head = bufferSize - 1;
21D8  041A     DECF pressAction, W, ACCESS
21DA  6E22     MOVWF quotient, ACCESS
25:            	ringBuffer.tail = 0;
21DC  6A23     CLRF activeLogicLevel, ACCESS
26:            	ringBuffer.data = dataBuffer;
21DE  C01C     MOVFF divisor, data
21E0  F024     NOP
21E2  C01D     MOVFF holdAction, data
21E4  F025     NOP
27:            	return ringBuffer;
21E6  EE20     LFSR 2, 0x20
21E8  F020     NOP
21EA  EE00     LFSR 0, 0x1A
21EC  F01A     NOP
21EE  0E05     MOVLW 0x5
21F0  CFDB     MOVFF PLUSW2, PLUSW0
21F2  FFEB     NOP
21F4  06E8     DECF WREG, F, ACCESS
21F6  E2FC     BC 0x21F0
28:            }
21F8  0012     RETURN 0
29:            
30:            void RingBufferEnqueue(volatile RingBuffer* buffer, char data)
31:            {
32:            	buffer->head = (buffer->head + 1) % buffer->bufferSize;
1772  5020     MOVF releaseAction, W, ACCESS
1774  6ED9     MOVWF FSR2, ACCESS
1776  6ADA     CLRF FSR2H, ACCESS
1778  0E02     MOVLW 0x2
177A  26D9     ADDWF FSR2, F, ACCESS
177C  5020     MOVF releaseAction, W, ACCESS
177E  6EE1     MOVWF FSR1, ACCESS
1780  6AE2     CLRF FSR1H, ACCESS
1782  0E02     MOVLW 0x2
1784  26E1     ADDWF FSR1, F, ACCESS
1786  50E7     MOVF INDF1, W, ACCESS
1788  6E22     MOVWF quotient, ACCESS
178A  0E01     MOVLW 0x1
178C  2422     ADDWF quotient, W, ACCESS
178E  6E1A     MOVWF pressAction, ACCESS
1790  6A1B     CLRF 0x1B, ACCESS
1792  0E00     MOVLW 0x0
1794  221B     ADDWFC 0x1B, F, ACCESS
1796  5020     MOVF releaseAction, W, ACCESS
1798  6EE1     MOVWF FSR1, ACCESS
179A  6AE2     CLRF FSR1H, ACCESS
179C  50E7     MOVF INDF1, W, ACCESS
179E  6E1C     MOVWF divisor, ACCESS
17A0  6A1D     CLRF holdAction, ACCESS
17A2  EC8D     CALL 0x191A, 0
17A4  F00C     NOP
17A6  501A     MOVF pressAction, W, ACCESS
17A8  6EDF     MOVWF INDF2, ACCESS
1846  500E     MOVF buffer, W, ACCESS
33:            	buffer->data[buffer->head] = data;
17AA  5020     MOVF releaseAction, W, ACCESS
17AC  6ED9     MOVWF FSR2, ACCESS
17AE  6ADA     CLRF FSR2H, ACCESS
17B0  0E02     MOVLW 0x2
17B2  26D9     ADDWF FSR2, F, ACCESS
17B4  50DF     MOVF INDF2, W, ACCESS
17B6  6E22     MOVWF quotient, ACCESS
17B8  5020     MOVF releaseAction, W, ACCESS
17BA  6ED9     MOVWF FSR2, ACCESS
17BC  6ADA     CLRF FSR2H, ACCESS
17BE  0E04     MOVLW 0x4
17C0  26D9     ADDWF FSR2, F, ACCESS
17C2  CFDE     MOVFF POSTINC2, activeLogicLevel
17C4  F023     NOP
17C6  CFDD     MOVFF POSTDEC2, data
17C8  F024     NOP
17CA  5022     MOVF quotient, W, ACCESS
17CC  2423     ADDWF activeLogicLevel, W, ACCESS
17CE  6ED9     MOVWF FSR2, ACCESS
17D0  0E00     MOVLW 0x0
17D2  2024     ADDWFC data, W, ACCESS
17D4  6EDA     MOVWF FSR2H, ACCESS
17D6  C021     MOVFF data, INDF2
17D8  FFDF     NOP
187E  500E     MOVF buffer, W, ACCESS
1880  6ED9     MOVWF FSR2, ACCESS
1882  6ADA     CLRF FSR2H, ACCESS
1884  0E02     MOVLW 0x2
1886  26D9     ADDWF FSR2, F, ACCESS
1888  50DF     MOVF INDF2, W, ACCESS
188A  6E10     MOVWF 0x10, ACCESS
188C  500E     MOVF buffer, W, ACCESS
188E  6ED9     MOVWF FSR2, ACCESS
1890  6ADA     CLRF FSR2H, ACCESS
1892  0E04     MOVLW 0x4
1894  26D9     ADDWF FSR2, F, ACCESS
1896  CFDE     MOVFF POSTINC2, 0x11
1898  F011     NOP
189A  CFDD     MOVFF POSTDEC2, RingBufferDequeue
189C  F012     NOP
189E  5010     MOVF 0x10, W, ACCESS
18A0  2411     ADDWF 0x11, W, ACCESS
18A2  6ED9     MOVWF FSR2, ACCESS
18A4  0E00     MOVLW 0x0
18A6  2012     ADDWFC RingBufferDequeue, W, ACCESS
18A8  6EDA     MOVWF FSR2H, ACCESS
18AA  C00F     MOVFF data, INDF2
18AC  FFDF     NOP
34:            	if(buffer->length == buffer->bufferSize)
17DA  5020     MOVF releaseAction, W, ACCESS
17DC  6ED9     MOVWF FSR2, ACCESS
17DE  6ADA     CLRF FSR2H, ACCESS
17E0  5020     MOVF releaseAction, W, ACCESS
17E2  6EE1     MOVWF FSR1, ACCESS
17E4  6AE2     CLRF FSR1H, ACCESS
17E6  0E01     MOVLW 0x1
17E8  26E1     ADDWF FSR1, F, ACCESS
17EA  50DE     MOVF POSTINC2, W, ACCESS
17EC  18E6     XORWF POSTINC1, W, ACCESS
17EE  A4D8     BTFSS STATUS, 2, ACCESS
17F0  EFFC     GOTO 0x17F8
17F2  F00B     NOP
17F4  EFFE     GOTO 0x17FC
17F6  F00B     NOP
17F8  EF1C     GOTO 0x1838
17FA  F00C     NOP
18AE  500E     MOVF buffer, W, ACCESS
18B0  6ED9     MOVWF FSR2, ACCESS
18B2  6ADA     CLRF FSR2H, ACCESS
18B4  500E     MOVF buffer, W, ACCESS
18B6  6EE1     MOVWF FSR1, ACCESS
18B8  6AE2     CLRF FSR1H, ACCESS
18BA  0E01     MOVLW 0x1
18BC  26E1     ADDWF FSR1, F, ACCESS
18BE  50DE     MOVF POSTINC2, W, ACCESS
18C0  18E6     XORWF POSTINC1, W, ACCESS
18C2  A4D8     BTFSS STATUS, 2, ACCESS
18C4  EF66     GOTO 0x18CC
18C6  F00C     NOP
18C8  EF68     GOTO 0x18D0
18CA  F00C     NOP
18CC  EF86     GOTO 0x190C
18CE  F00C     NOP
35:            		buffer->tail = (buffer->tail + 1) % buffer->bufferSize;
17FC  5020     MOVF releaseAction, W, ACCESS
17FE  6ED9     MOVWF FSR2, ACCESS
1800  6ADA     CLRF FSR2H, ACCESS
1802  0E03     MOVLW 0x3
1804  26D9     ADDWF FSR2, F, ACCESS
1806  5020     MOVF releaseAction, W, ACCESS
1808  6EE1     MOVWF FSR1, ACCESS
180A  6AE2     CLRF FSR1H, ACCESS
180C  0E03     MOVLW 0x3
180E  26E1     ADDWF FSR1, F, ACCESS
1810  50E7     MOVF INDF1, W, ACCESS
1812  6E22     MOVWF quotient, ACCESS
1814  0E01     MOVLW 0x1
1816  2422     ADDWF quotient, W, ACCESS
1818  6E1A     MOVWF pressAction, ACCESS
181A  6A1B     CLRF 0x1B, ACCESS
181C  0E00     MOVLW 0x0
181E  221B     ADDWFC 0x1B, F, ACCESS
1820  5020     MOVF releaseAction, W, ACCESS
1822  6EE1     MOVWF FSR1, ACCESS
1824  6AE2     CLRF FSR1H, ACCESS
1826  50E7     MOVF INDF1, W, ACCESS
1828  6E1C     MOVWF divisor, ACCESS
182A  6A1D     CLRF holdAction, ACCESS
182C  EC8D     CALL 0x191A, 0
182E  F00C     NOP
1830  501A     MOVF pressAction, W, ACCESS
1832  6EDF     MOVWF INDF2, ACCESS
1834  EF22     GOTO 0x1844
1836  F00C     NOP
18D0  500E     MOVF buffer, W, ACCESS
18D2  6ED9     MOVWF FSR2, ACCESS
18D4  6ADA     CLRF FSR2H, ACCESS
18D6  0E03     MOVLW 0x3
18D8  26D9     ADDWF FSR2, F, ACCESS
18DA  500E     MOVF buffer, W, ACCESS
18DC  6EE1     MOVWF FSR1, ACCESS
18DE  6AE2     CLRF FSR1H, ACCESS
18E0  0E03     MOVLW 0x3
18E2  26E1     ADDWF FSR1, F, ACCESS
18E4  50E7     MOVF INDF1, W, ACCESS
18E6  6E10     MOVWF 0x10, ACCESS
18E8  0E01     MOVLW 0x1
18EA  2410     ADDWF 0x10, W, ACCESS
18EC  6E08     MOVWF dividend, ACCESS
18EE  6A09     CLRF 0x9, ACCESS
18F0  0E00     MOVLW 0x0
18F2  2209     ADDWFC 0x9, F, ACCESS
18F4  500E     MOVF buffer, W, ACCESS
18F6  6EE1     MOVWF FSR1, ACCESS
18F8  6AE2     CLRF FSR1H, ACCESS
18FA  50E7     MOVF INDF1, W, ACCESS
18FC  6E0A     MOVWF divisor, ACCESS
18FE  6A0B     CLRF 0xB, ACCESS
1900  ECE4     CALL 0x19C8, 0
1902  F00C     NOP
1904  5008     MOVF dividend, W, ACCESS
1906  6EDF     MOVWF INDF2, ACCESS
1908  EF8C     GOTO 0x1918
190A  F00C     NOP
36:            	else
37:            		buffer->length++;
1838  5020     MOVF releaseAction, W, ACCESS
183A  6ED9     MOVWF FSR2, ACCESS
183C  6ADA     CLRF FSR2H, ACCESS
183E  0E01     MOVLW 0x1
1840  26D9     ADDWF FSR2, F, ACCESS
1842  2ADF     INCF INDF2, F, ACCESS
190C  500E     MOVF buffer, W, ACCESS
190E  6ED9     MOVWF FSR2, ACCESS
1910  6ADA     CLRF FSR2H, ACCESS
1912  0E01     MOVLW 0x1
1914  26D9     ADDWF FSR2, F, ACCESS
1916  2ADF     INCF INDF2, F, ACCESS
38:            }
1844  0012     RETURN 0
1918  0012     RETURN 0
39:            
40:            char RingBufferDequeue(volatile RingBuffer* buffer)
41:            {
42:            	if(buffer->length == 0)
1BB8  5020     MOVF releaseAction, W, ACCESS
1BBA  6ED9     MOVWF FSR2, ACCESS
1BBC  6ADA     CLRF FSR2H, ACCESS
1BBE  0E01     MOVLW 0x1
1BC0  26D9     ADDWF FSR2, F, ACCESS
1BC2  50DF     MOVF INDF2, W, ACCESS
1BC4  A4D8     BTFSS STATUS, 2, ACCESS
1BC6  EFE7     GOTO 0x1BCE
1BC8  F00D     NOP
1BCA  EFE9     GOTO 0x1BD2
1BCC  F00D     NOP
1BCE  EFEC     GOTO 0x1BD8
1BD0  F00D     NOP
1C50  500E     MOVF buffer, W, ACCESS
43:            		return -1;
1BD2  0EFF     MOVLW 0xFF
1BD4  EF27     GOTO 0x1C4E
1BD6  F00E     NOP
1C6A  0EFF     MOVLW 0xFF
1C6C  EF73     GOTO 0x1CE6
1C6E  F00E     NOP
44:            
45:            	char data = buffer->data[buffer->tail];
1BD8  5020     MOVF releaseAction, W, ACCESS
1BDA  6ED9     MOVWF FSR2, ACCESS
1BDC  6ADA     CLRF FSR2H, ACCESS
1BDE  0E03     MOVLW 0x3
1BE0  26D9     ADDWF FSR2, F, ACCESS
1BE2  50DF     MOVF INDF2, W, ACCESS
1BE4  6E21     MOVWF data, ACCESS
1BE6  5020     MOVF releaseAction, W, ACCESS
1BE8  6ED9     MOVWF FSR2, ACCESS
1BEA  6ADA     CLRF FSR2H, ACCESS
1BEC  0E04     MOVLW 0x4
1BEE  26D9     ADDWF FSR2, F, ACCESS
1BF0  CFDE     MOVFF POSTINC2, quotient
1BF2  F022     NOP
1BF4  CFDD     MOVFF POSTDEC2, activeLogicLevel
1BF6  F023     NOP
1BF8  5021     MOVF data, W, ACCESS
1BFA  2422     ADDWF quotient, W, ACCESS
1BFC  6ED9     MOVWF FSR2, ACCESS
1BFE  0E00     MOVLW 0x0
1C00  2023     ADDWFC activeLogicLevel, W, ACCESS
1C02  6EDA     MOVWF FSR2H, ACCESS
1C04  50DF     MOVF INDF2, W, ACCESS
1C06  6E24     MOVWF data, ACCESS
1C70  500E     MOVF buffer, W, ACCESS
1C72  6ED9     MOVWF FSR2, ACCESS
1C74  6ADA     CLRF FSR2H, ACCESS
1C76  0E03     MOVLW 0x3
1C78  26D9     ADDWF FSR2, F, ACCESS
1C7A  50DF     MOVF INDF2, W, ACCESS
1C7C  6E0F     MOVWF data, ACCESS
1C7E  500E     MOVF buffer, W, ACCESS
1C80  6ED9     MOVWF FSR2, ACCESS
1C82  6ADA     CLRF FSR2H, ACCESS
1C84  0E04     MOVLW 0x4
1C86  26D9     ADDWF FSR2, F, ACCESS
1C88  CFDE     MOVFF POSTINC2, 0x10
1C8A  F010     NOP
1C8C  CFDD     MOVFF POSTDEC2, 0x11
1C8E  F011     NOP
1C90  500F     MOVF data, W, ACCESS
1C92  2410     ADDWF 0x10, W, ACCESS
1C94  6ED9     MOVWF FSR2, ACCESS
1C96  0E00     MOVLW 0x0
1C98  2011     ADDWFC 0x11, W, ACCESS
1C9A  6EDA     MOVWF FSR2H, ACCESS
1C9C  50DF     MOVF INDF2, W, ACCESS
1C9E  6E12     MOVWF RingBufferDequeue, ACCESS
46:            	buffer->tail = (buffer->tail + 1) % buffer->bufferSize;
1C08  5020     MOVF releaseAction, W, ACCESS
1C0A  6ED9     MOVWF FSR2, ACCESS
1C0C  6ADA     CLRF FSR2H, ACCESS
1C0E  0E03     MOVLW 0x3
1C10  26D9     ADDWF FSR2, F, ACCESS
1C12  5020     MOVF releaseAction, W, ACCESS
1C14  6EE1     MOVWF FSR1, ACCESS
1C16  6AE2     CLRF FSR1H, ACCESS
1C18  0E03     MOVLW 0x3
1C1A  26E1     ADDWF FSR1, F, ACCESS
1C1C  50E7     MOVF INDF1, W, ACCESS
1C1E  6E21     MOVWF data, ACCESS
1C20  0E01     MOVLW 0x1
1C22  2421     ADDWF data, W, ACCESS
1C24  6E1A     MOVWF pressAction, ACCESS
1C26  6A1B     CLRF 0x1B, ACCESS
1C28  0E00     MOVLW 0x0
1C2A  221B     ADDWFC 0x1B, F, ACCESS
1C2C  5020     MOVF releaseAction, W, ACCESS
1C2E  6EE1     MOVWF FSR1, ACCESS
1C30  6AE2     CLRF FSR1H, ACCESS
1C32  50E7     MOVF INDF1, W, ACCESS
1C34  6E1C     MOVWF divisor, ACCESS
1C36  6A1D     CLRF holdAction, ACCESS
1C38  EC8D     CALL 0x191A, 0
1C3A  F00C     NOP
1C3C  501A     MOVF pressAction, W, ACCESS
1C3E  6EDF     MOVWF INDF2, ACCESS
1CA0  500E     MOVF buffer, W, ACCESS
1CA2  6ED9     MOVWF FSR2, ACCESS
1CA4  6ADA     CLRF FSR2H, ACCESS
1CA6  0E03     MOVLW 0x3
1CA8  26D9     ADDWF FSR2, F, ACCESS
1CAA  500E     MOVF buffer, W, ACCESS
1CAC  6EE1     MOVWF FSR1, ACCESS
1CAE  6AE2     CLRF FSR1H, ACCESS
1CB0  0E03     MOVLW 0x3
1CB2  26E1     ADDWF FSR1, F, ACCESS
1CB4  50E7     MOVF INDF1, W, ACCESS
1CB6  6E0F     MOVWF data, ACCESS
1CB8  0E01     MOVLW 0x1
1CBA  240F     ADDWF data, W, ACCESS
1CBC  6E08     MOVWF dividend, ACCESS
1CBE  6A09     CLRF 0x9, ACCESS
1CC0  0E00     MOVLW 0x0
1CC2  2209     ADDWFC 0x9, F, ACCESS
1CC4  500E     MOVF buffer, W, ACCESS
1CC6  6EE1     MOVWF FSR1, ACCESS
1CC8  6AE2     CLRF FSR1H, ACCESS
1CCA  50E7     MOVF INDF1, W, ACCESS
1CCC  6E0A     MOVWF divisor, ACCESS
1CCE  6A0B     CLRF 0xB, ACCESS
1CD0  ECE4     CALL 0x19C8, 0
1CD2  F00C     NOP
1CD4  5008     MOVF dividend, W, ACCESS
1CD6  6EDF     MOVWF INDF2, ACCESS
47:            	buffer->length--;
1C40  5020     MOVF releaseAction, W, ACCESS
1C42  6ED9     MOVWF FSR2, ACCESS
1C44  6ADA     CLRF FSR2H, ACCESS
1C46  0E01     MOVLW 0x1
1C48  26D9     ADDWF FSR2, F, ACCESS
1C4A  06DF     DECF INDF2, F, ACCESS
1CD8  500E     MOVF buffer, W, ACCESS
1CDA  6ED9     MOVWF FSR2, ACCESS
1CDC  6ADA     CLRF FSR2H, ACCESS
1CDE  0E01     MOVLW 0x1
1CE0  26D9     ADDWF FSR2, F, ACCESS
1CE2  06DF     DECF INDF2, F, ACCESS
48:            	return data;
1C4C  5024     MOVF data, W, ACCESS
1CE4  5012     MOVF RingBufferDequeue, W, ACCESS
49:            }
1C4E  0012     RETURN 0
1CE6  0012     RETURN 0
50:            
51:            // STDIO FUNCTIONS-------------------------------------------------------------
52:            
53:            char getch(void)
54:            {
55:            	if(_commStatus1.statusBits.isRxTarget)
56:            		return getch1();
57:            	if(_commStatus2.statusBits.isRxTarget)
58:            		return getch2();
59:            	return -1;
60:            }
61:            
62:            void putch(char data)
2172  6E27     MOVWF data, ACCESS
63:            {
64:            	if(_commStatus1.statusBits.isTxTarget)
2174  0100     MOVLB 0x0
2176  A3B3     BTFSS _commStatus1, 1, BANKED
2178  EFC0     GOTO 0x2180
217A  F010     NOP
217C  EFC2     GOTO 0x2184
217E  F010     NOP
2180  EFC5     GOTO 0x218A
2182  F010     NOP
65:            		putch1(data);
2184  5027     MOVF data, W, ACCESS
2186  EC0C     CALL 0x2018, 0
2188  F010     NOP
66:            	if(_commStatus2.statusBits.isTxTarget)
218A  0100     MOVLB 0x0
218C  A3B2     BTFSS _commStatus2, 1, BANKED
218E  EFCB     GOTO 0x2196
2190  F010     NOP
2192  EFCD     GOTO 0x219A
2194  F010     NOP
2196  EFD0     GOTO 0x21A0
2198  F010     NOP
67:            		putch2(data);
219A  5027     MOVF data, W, ACCESS
219C  ECE1     CALL 0x1FC2, 0
219E  F00F     NOP
68:            }
21A0  0012     RETURN 0
69:            
70:            char getch1(void)
71:            {
72:            	return RingBufferDequeue(&_rxBuffer1);
2284  0EC9     MOVLW 0xC9
2286  6E20     MOVWF releaseAction, ACCESS
2288  ECDC     CALL 0x1BB8, 0
228A  F00D     NOP
73:            }
228C  0012     RETURN 0
74:            
75:            char getch2(void)
76:            {
77:            	return RingBufferDequeue(&_rxBuffer2);
227A  0EC3     MOVLW 0xC3
227C  6E20     MOVWF releaseAction, ACCESS
227E  ECDC     CALL 0x1BB8, 0
2280  F00D     NOP
78:            }
2282  0012     RETURN 0
79:            
80:            void putch1(char data)
2018  6E25     MOVWF data, ACCESS
81:            {
82:            	RingBufferEnqueue(&_txBuffer1, data);	// Add character to TX buffer
201A  0E4C     MOVLW 0x4C
201C  6E20     MOVWF releaseAction, ACCESS
201E  C025     MOVFF data, data
2020  F021     NOP
2022  ECB9     CALL 0x1772, 0
2024  F00B     NOP
83:            	if(_txBuffer1.length == TX_BUFFER_SIZE)	// If buffer is full, switch to polling mode and flush buffer
2026  0E20     MOVLW 0x20
2028  184D     XORWF 0x4D, W, ACCESS
202A  A4D8     BTFSS STATUS, 2, ACCESS
202C  EF1A     GOTO 0x2034
202E  F010     NOP
2030  EF1C     GOTO 0x2038
2032  F010     NOP
2034  EF35     GOTO 0x206A
2036  F010     NOP
84:            	{
85:            		PIE1bits.TX1IE	= false;
2038  989D     BCF PIE1, 4, ACCESS
86:            		while(_txBuffer1.length > 0)
203A  EF2D     GOTO 0x205A
203C  F010     NOP
205A  504D     MOVF 0x4D, W, ACCESS
205C  A4D8     BTFSS STATUS, 2, ACCESS
205E  EF33     GOTO 0x2066
2060  F010     NOP
2062  EF35     GOTO 0x206A
2064  F010     NOP
2066  EF1F     GOTO 0x203E
2068  F010     NOP
87:            		{
88:            			while(!PIR1bits.TX1IF)
89:            			{
90:            				continue;
91:            			}
203E  A89E     BTFSS PIR1, 4, ACCESS
2040  EF24     GOTO 0x2048
2042  F010     NOP
2044  EF26     GOTO 0x204C
2046  F010     NOP
2048  EF1F     GOTO 0x203E
204A  F010     NOP
92:            			char character = RingBufferDequeue(&_txBuffer1);
204C  0E4C     MOVLW 0x4C
204E  6E20     MOVWF releaseAction, ACCESS
2050  ECDC     CALL 0x1BB8, 0
2052  F00D     NOP
2054  6E26     MOVWF counter, ACCESS
93:            			TXREG1 = character;
2056  C026     MOVFF counter, TXREG1
2058  FFAE     NOP
94:            		}
95:            	}
96:            	PIE1bits.TX1IE	= true;					// Enable TX interrupt - this will interrupt immediately
206A  889D     BSF PIE1, 4, ACCESS
97:            }
206C  0012     RETURN 0
98:            
99:            void putch2(char data)
1FC2  6E25     MOVWF data, ACCESS
100:           {
101:           	RingBufferEnqueue(&_txBuffer2, data);
1FC4  0E46     MOVLW 0x46
1FC6  6E20     MOVWF releaseAction, ACCESS
1FC8  C025     MOVFF data, data
1FCA  F021     NOP
1FCC  ECB9     CALL 0x1772, 0
1FCE  F00B     NOP
102:           	if(_txBuffer2.length == TX_BUFFER_SIZE)
1FD0  0E20     MOVLW 0x20
1FD2  1847     XORWF 0x47, W, ACCESS
1FD4  A4D8     BTFSS STATUS, 2, ACCESS
1FD6  EFEF     GOTO 0x1FDE
1FD8  F00F     NOP
1FDA  EFF1     GOTO 0x1FE2
1FDC  F00F     NOP
1FDE  EF0A     GOTO 0x2014
1FE0  F010     NOP
103:           	{
104:           		PIE3bits.TX2IE	= false;
1FE2  98A3     BCF PIE3, 4, ACCESS
105:           		while(_txBuffer2.length > 0)
1FE4  EF02     GOTO 0x2004
1FE6  F010     NOP
2004  5047     MOVF 0x47, W, ACCESS
2006  A4D8     BTFSS STATUS, 2, ACCESS
2008  EF08     GOTO 0x2010
200A  F010     NOP
200C  EF0A     GOTO 0x2014
200E  F010     NOP
2010  EFF4     GOTO 0x1FE8
2012  F00F     NOP
106:           		{
107:           			while(!PIR3bits.TX2IF)
108:           			{
109:           				continue;
110:           			}
1FE8  A8A4     BTFSS PIR3, 4, ACCESS
1FEA  EFF9     GOTO 0x1FF2
1FEC  F00F     NOP
1FEE  EFFB     GOTO 0x1FF6
1FF0  F00F     NOP
1FF2  EFF4     GOTO 0x1FE8
1FF4  F00F     NOP
111:           			char character = RingBufferDequeue(&_txBuffer2);
1FF6  0E46     MOVLW 0x46
1FF8  6E20     MOVWF releaseAction, ACCESS
1FFA  ECDC     CALL 0x1BB8, 0
1FFC  F00D     NOP
1FFE  6E26     MOVWF counter, ACCESS
112:           			TXREG2 = character;
2000  C026     MOVFF counter, TXREG2
2002  FFA9     NOP
113:           		}
114:           	}
115:           	PIE3bits.TX2IE	= true;
2014  88A3     BSF PIE3, 4, ACCESS
116:           }
2016  0012     RETURN 0
117:           
118:           // FLOW CONTROL FUNCTIONS------------------------------------------------------
119:           
120:           void CheckFlowControlRx1(void)
121:           {
122:           	if(!_commStatus1.statusBits.isRxPaused && _rxBuffer1.length >= XOFF_THRESHOLD)
1EEA  B5B3     BTFSC _commStatus1, 2, BANKED
1EEC  EF7A     GOTO 0x1EF4
1EEE  F00F     NOP
1EF0  EF7C     GOTO 0x1EF8
1EF2  F00F     NOP
1EF4  EF92     GOTO 0x1F24
1EF6  F00F     NOP
1EF8  0EBF     MOVLW 0xBF
1EFA  65CA     CPFSGT 0xCA, BANKED
1EFC  EF82     GOTO 0x1F04
1EFE  F00F     NOP
1F00  EF84     GOTO 0x1F08
1F02  F00F     NOP
1F04  EF92     GOTO 0x1F24
1F06  F00F     NOP
123:           	{
124:           		PIE1bits.TX1IE	= false;
1F08  989D     BCF PIE1, 4, ACCESS
125:           		while(!PIR1bits.TX1IF)
126:           		{
127:           			continue;
128:           		}
1F0A  A89E     BTFSS PIR1, 4, ACCESS
1F0C  EF8A     GOTO 0x1F14
1F0E  F00F     NOP
1F10  EF8C     GOTO 0x1F18
1F12  F00F     NOP
1F14  EF85     GOTO 0x1F0A
1F16  F00F     NOP
129:           		TXREG1 = XOFF;
1F18  0E13     MOVLW 0x13
1F1A  6EAE     MOVWF TXREG1, ACCESS
130:           		_commStatus1.statusBits.isRxPaused = true;
1F1C  85B3     BSF _commStatus1, 2, BANKED
131:           		PIE1bits.TX1IE	= true;
1F1E  889D     BSF PIE1, 4, ACCESS
132:           	}
1F20  EFAD     GOTO 0x1F5A
1F22  F00F     NOP
133:           	else if(_commStatus1.statusBits.isRxPaused && _rxBuffer1.length <= XON_THRESHOLD)
1F24  A5B3     BTFSS _commStatus1, 2, BANKED
1F26  EF97     GOTO 0x1F2E
1F28  F00F     NOP
1F2A  EF99     GOTO 0x1F32
1F2C  F00F     NOP
1F2E  EFAD     GOTO 0x1F5A
1F30  F00F     NOP
1F32  0E41     MOVLW 0x41
1F34  61CA     CPFSLT 0xCA, BANKED
1F36  EF9F     GOTO 0x1F3E
1F38  F00F     NOP
1F3A  EFA1     GOTO 0x1F42
1F3C  F00F     NOP
1F3E  EFAD     GOTO 0x1F5A
1F40  F00F     NOP
134:           	{
135:           		PIE1bits.TX1IE	= false;
1F42  989D     BCF PIE1, 4, ACCESS
136:           		while(!PIR1bits.TX1IF)
137:           		{
138:           			continue;
139:           		}
1F44  A89E     BTFSS PIR1, 4, ACCESS
1F46  EFA7     GOTO 0x1F4E
1F48  F00F     NOP
1F4A  EFA9     GOTO 0x1F52
1F4C  F00F     NOP
1F4E  EFA2     GOTO 0x1F44
1F50  F00F     NOP
140:           		TXREG1 = XON;
1F52  0E11     MOVLW 0x11
1F54  6EAE     MOVWF TXREG1, ACCESS
141:           		_commStatus1.statusBits.isRxPaused = false;
1F56  95B3     BCF _commStatus1, 2, BANKED
142:           		PIE1bits.TX1IE	= true;
1F58  889D     BSF PIE1, 4, ACCESS
143:           	}
144:           }
1F5A  0012     RETURN 0
145:           
146:           void CheckFlowControlRx2(void)
147:           {
148:           	if(!_commStatus2.statusBits.isRxPaused && _rxBuffer2.length >= XOFF_THRESHOLD)
1E78  B5B2     BTFSC _commStatus2, 2, BANKED
1E7A  EF41     GOTO 0x1E82
1E7C  F00F     NOP
1E7E  EF43     GOTO 0x1E86
1E80  F00F     NOP
1E82  EF59     GOTO 0x1EB2
1E84  F00F     NOP
1E86  0EBF     MOVLW 0xBF
1E88  65C4     CPFSGT 0xC4, BANKED
1E8A  EF49     GOTO 0x1E92
1E8C  F00F     NOP
1E8E  EF4B     GOTO 0x1E96
1E90  F00F     NOP
1E92  EF59     GOTO 0x1EB2
1E94  F00F     NOP
149:           	{
150:           		PIE3bits.TX2IE	= false;
1E96  98A3     BCF PIE3, 4, ACCESS
151:           		while(!PIR3bits.TX2IF)
152:           		{
153:           			continue;
154:           		}
1E98  A8A4     BTFSS PIR3, 4, ACCESS
1E9A  EF51     GOTO 0x1EA2
1E9C  F00F     NOP
1E9E  EF53     GOTO 0x1EA6
1EA0  F00F     NOP
1EA2  EF4C     GOTO 0x1E98
1EA4  F00F     NOP
155:           		TXREG2 = XOFF;
1EA6  0E13     MOVLW 0x13
1EA8  6EA9     MOVWF TXREG2, ACCESS
156:           		_commStatus2.statusBits.isRxPaused = true;
1EAA  85B2     BSF _commStatus2, 2, BANKED
157:           		PIE3bits.TX2IE	= true;
1EAC  88A3     BSF PIE3, 4, ACCESS
158:           	}
1EAE  EF74     GOTO 0x1EE8
1EB0  F00F     NOP
159:           	else if(_commStatus2.statusBits.isRxPaused && _rxBuffer2.length <= XON_THRESHOLD)
1EB2  A5B2     BTFSS _commStatus2, 2, BANKED
1EB4  EF5E     GOTO 0x1EBC
1EB6  F00F     NOP
1EB8  EF60     GOTO 0x1EC0
1EBA  F00F     NOP
1EBC  EF74     GOTO 0x1EE8
1EBE  F00F     NOP
1EC0  0E41     MOVLW 0x41
1EC2  61C4     CPFSLT 0xC4, BANKED
1EC4  EF66     GOTO 0x1ECC
1EC6  F00F     NOP
1EC8  EF68     GOTO 0x1ED0
1ECA  F00F     NOP
1ECC  EF74     GOTO 0x1EE8
1ECE  F00F     NOP
160:           	{
161:           		PIE3bits.TX2IE	= false;
1ED0  98A3     BCF PIE3, 4, ACCESS
162:           		while(!PIR3bits.TX2IF)
163:           		{
164:           			continue;
165:           		}
1ED2  A8A4     BTFSS PIR3, 4, ACCESS
1ED4  EF6E     GOTO 0x1EDC
1ED6  F00F     NOP
1ED8  EF70     GOTO 0x1EE0
1EDA  F00F     NOP
1EDC  EF69     GOTO 0x1ED2
1EDE  F00F     NOP
166:           		TXREG2 = XON;
1EE0  0E11     MOVLW 0x11
1EE2  6EA9     MOVWF TXREG2, ACCESS
167:           		_commStatus2.statusBits.isRxPaused = false;
1EE4  95B2     BCF _commStatus2, 2, BANKED
168:           		PIE3bits.TX2IE	= true;
1EE6  88A3     BSF PIE3, 4, ACCESS
169:           	}
170:           }
1EE8  0012     RETURN 0
---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/main.c  -----------------------
1:             /* Project:	SmartModule
2:              * File:	main.c
3:              * Author:	Jonathan Ruisi
4:              * Created:	December 16, 2016, 6:28 AM
5:              */
6:             
7:             // INCLUDES--------------------------------------------------------------------
8:             #include <xc.h>
9:             #include <stdlib.h>
10:            #include <stdbool.h>
11:            #include <stdint.h>
12:            #include <stdio.h>
13:            
14:            #include "main.h"
15:            #include "button.h"
16:            #include "serial_comm.h"
17:            #include "sram.h"
18:            #include "wifi.h"
19:            #include "utility.h"
20:            
21:            // GLOBAL VARIABLES------------------------------------------------------------
22:            volatile uint32_t _tick = 0;	// Global timekeeping variable (not related to RTCC)
23:            
24:            // PROGRAM ENTRY---------------------------------------------------------------
25:            
26:            void main(void)
27:            {
28:            	// Initialize device
29:            	InitializeOscillator();
0F20  EC2D     CALL 0x225A, 0
0F22  F011     NOP
30:            	InitializeWDT();
0F24  EC37     CALL 0x226E, 0
0F26  F011     NOP
31:            	InitializePorts();
0F28  EC37     CALL 0x206E, 0
0F2A  F010     NOP
32:            	InitializeTimers();
0F2C  EC22     CALL 0x2244, 0
0F2E  F011     NOP
33:            	InitializeSpi();
0F30  ECFD     CALL 0x21FA, 0
0F32  F010     NOP
34:            	InitializeUSART();
0F34  EC9F     CALL 0x213E, 0
0F36  F010     NOP
35:            	InitializeInterrupts();
0F38  EC11     CALL 0x2222, 0
0F3A  F011     NOP
36:            
37:            	// Initialize data
38:            	uint32_t prevTick = 0;
39:            	_button = ButtonInfoCreate(ButtonPress, ButtonHold, ButtonRelease, 0);
0F3C  0E90     MOVLW 0x90
0F3E  6E1A     MOVWF pressAction, ACCESS
0F40  0E22     MOVLW 0x22
0F42  6E1B     MOVWF 0x1B, ACCESS
0F44  0E00     MOVLW 0x0
0F46  6E1C     MOVWF divisor, ACCESS
0F48  0E92     MOVLW 0x92
0F4A  6E1D     MOVWF holdAction, ACCESS
0F4C  0E22     MOVLW 0x22
0F4E  6E1E     MOVWF counter, ACCESS
0F50  0E00     MOVLW 0x0
0F52  6E1F     MOVWF sign, ACCESS
0F54  0E8E     MOVLW 0x8E
0F56  6E20     MOVWF releaseAction, ACCESS
0F58  0E22     MOVLW 0x22
0F5A  6E21     MOVWF data, ACCESS
0F5C  0E00     MOVLW 0x0
0F5E  6E22     MOVWF quotient, ACCESS
0F60  0E00     MOVLW 0x0
0F62  6E23     MOVWF activeLogicLevel, ACCESS
0F64  EC74     CALL 0x1CE8, 0
0F66  F00E     NOP
0F68  EE20     LFSR 2, 0xB4
0F6A  F0B4     NOP
0F6C  0E0E     MOVLW 0xE
0F6E  CFEB     MOVFF PLUSW0, PLUSW2
0F70  FFDB     NOP
0F72  06E8     DECF WREG, F, ACCESS
0F74  E2FC     BC 0xF6E
40:            	char txBufferData1[TX_BUFFER_SIZE] = {0};
0F76  EE20     LFSR 2, 0x60
0F78  F060     NOP
0F7A  0E1F     MOVLW 0x1F
0F7C  6ADE     CLRF POSTINC2, ACCESS
0F7E  06E8     DECF WREG, F, ACCESS
0F80  E2FD     BC 0xF7C
41:            	char txBufferData2[TX_BUFFER_SIZE] = {0};
0F82  EE20     LFSR 2, 0x80
0F84  F080     NOP
0F86  0E1F     MOVLW 0x1F
0F88  6ADE     CLRF POSTINC2, ACCESS
0F8A  06E8     DECF WREG, F, ACCESS
0F8C  E2FD     BC 0xF88
42:            	char rxBufferData1[RX_BUFFER_SIZE] = {0};
0F8E  EE21     LFSR 2, 0x100
0F90  F000     NOP
0F92  0EFF     MOVLW 0xFF
0F94  6ADE     CLRF POSTINC2, ACCESS
0F96  06E8     DECF WREG, F, ACCESS
0F98  E2FD     BC 0xF94
43:            	char rxBufferData2[RX_BUFFER_SIZE] = {0};
0F9A  EE22     LFSR 2, 0x200
0F9C  F000     NOP
0F9E  0EFF     MOVLW 0xFF
0FA0  6ADE     CLRF POSTINC2, ACCESS
0FA2  06E8     DECF WREG, F, ACCESS
0FA4  E2FD     BC 0xFA0
44:            	_txBuffer1 = RingBufferCreate(TX_BUFFER_SIZE, txBufferData1);
0FA6  0E00     MOVLW 0x0
0FA8  6E1B     MOVWF 0x1B, ACCESS
0FAA  0E20     MOVLW 0x20
0FAC  6E1A     MOVWF pressAction, ACCESS
0FAE  0E60     MOVLW 0x60
0FB0  6E1C     MOVWF divisor, ACCESS
0FB2  6A1D     CLRF holdAction, ACCESS
0FB4  ECE9     CALL 0x21D2, 0
0FB6  F010     NOP
0FB8  EE20     LFSR 2, 0x4C
0FBA  F04C     NOP
0FBC  0E05     MOVLW 0x5
0FBE  CFEB     MOVFF PLUSW0, PLUSW2
0FC0  FFDB     NOP
0FC2  06E8     DECF WREG, F, ACCESS
0FC4  E2FC     BC 0xFBE
45:            	_txBuffer2 = RingBufferCreate(TX_BUFFER_SIZE, txBufferData2);
0FC6  0E00     MOVLW 0x0
0FC8  6E1B     MOVWF 0x1B, ACCESS
0FCA  0E20     MOVLW 0x20
0FCC  6E1A     MOVWF pressAction, ACCESS
0FCE  0E80     MOVLW 0x80
0FD0  6E1C     MOVWF divisor, ACCESS
0FD2  6A1D     CLRF holdAction, ACCESS
0FD4  ECE9     CALL 0x21D2, 0
0FD6  F010     NOP
0FD8  EE20     LFSR 2, 0x46
0FDA  F046     NOP
0FDC  0E05     MOVLW 0x5
0FDE  CFEB     MOVFF PLUSW0, PLUSW2
0FE0  FFDB     NOP
0FE2  06E8     DECF WREG, F, ACCESS
0FE4  E2FC     BC 0xFDE
46:            	_rxBuffer1 = RingBufferCreate(RX_BUFFER_SIZE, rxBufferData1);
0FE6  0E01     MOVLW 0x1
0FE8  6E1B     MOVWF 0x1B, ACCESS
0FEA  0E00     MOVLW 0x0
0FEC  6E1A     MOVWF pressAction, ACCESS
0FEE  0E00     MOVLW 0x0
0FF0  6E1C     MOVWF divisor, ACCESS
0FF2  0E01     MOVLW 0x1
0FF4  6E1D     MOVWF holdAction, ACCESS
0FF6  ECE9     CALL 0x21D2, 0
0FF8  F010     NOP
0FFA  EE20     LFSR 2, 0xC9
0FFC  F0C9     NOP
0FFE  0E05     MOVLW 0x5
1000  CFEB     MOVFF PLUSW0, PLUSW2
1002  FFDB     NOP
1004  06E8     DECF WREG, F, ACCESS
1006  E2FC     BC 0x1000
47:            	_rxBuffer2 = RingBufferCreate(RX_BUFFER_SIZE, rxBufferData2);
1008  0E01     MOVLW 0x1
100A  6E1B     MOVWF 0x1B, ACCESS
100C  0E00     MOVLW 0x0
100E  6E1A     MOVWF pressAction, ACCESS
1010  0E00     MOVLW 0x0
1012  6E1C     MOVWF divisor, ACCESS
1014  0E02     MOVLW 0x2
1016  6E1D     MOVWF holdAction, ACCESS
1018  ECE9     CALL 0x21D2, 0
101A  F010     NOP
101C  EE20     LFSR 2, 0xC3
101E  F0C3     NOP
1020  0E05     MOVLW 0x5
1022  CFEB     MOVFF PLUSW0, PLUSW2
1024  FFDB     NOP
1026  06E8     DECF WREG, F, ACCESS
1028  E2FC     BC 0x1022
48:            	_commStatus1.status = 0;
102A  0100     MOVLB 0x0
102C  6BB3     CLRF _commStatus1, BANKED
49:            	_commStatus2.status = 0;
102E  6BB2     CLRF _commStatus2, BANKED
50:            	_commStatus1.statusBits.isRxFlowControl = false;
1030  99B3     BCF _commStatus1, 4, BANKED
51:            	_commStatus2.statusBits.isRxFlowControl = true;
1032  89B2     BSF _commStatus2, 4, BANKED
52:            	_sramStatus.dataLength = 0;
1034  6BA4     CLRF 0xA4, BANKED
1036  6BA5     CLRF 0xA5, BANKED
1038  6BA6     CLRF 0xA6, BANKED
53:            	_sramStatus.readAddress = 0;
103A  6BA7     CLRF 0xA7, BANKED
103C  6BA8     CLRF 0xA8, BANKED
103E  6BA9     CLRF 0xA9, BANKED
54:            	_sramStatus.writeAddress = 0;
1040  6BAA     CLRF 0xAA, BANKED
1042  6BAB     CLRF 0xAB, BANKED
1044  6BAC     CLRF 0xAC, BANKED
55:            	_sramStatus.status = 0;
1046  6BA3     CLRF _sramStatus, BANKED
56:            
57:            	// Start tick timer (Timer 4)
58:            	T4CONbits.TMR4ON = true;
1048  8476     BSF T4CON, 2, ACCESS
59:            
60:            	// Initialize SRAM mode: HOLD function disabled, burst write
61:            	SramMode mode;
62:            	mode.holdDisabled = true;
104A  81A0     BSF mode, 0, BANKED
63:            	mode.mode = SRAM_MODE_BURST;
104C  51A0     MOVF mode, W, BANKED
104E  0B3F     ANDLW 0x3F
1050  0940     IORLW 0x40
1052  6FA0     MOVWF mode, BANKED
64:            	SramSetMode(mode);
1054  51A0     MOVF mode, W, BANKED
1056  ECD1     CALL 0x21A2, 0
1058  F010     NOP
65:            
66:            	// Blank entire SRAM array (fill with 0x00)
67:            	SramFill(0x000000, SRAM_CAPACITY, 0x00);
105A  0E00     MOVLW 0x0
105C  6E1A     MOVWF pressAction, ACCESS
105E  0E00     MOVLW 0x0
1060  6E1B     MOVWF 0x1B, ACCESS
1062  0E00     MOVLW 0x0
1064  6E1C     MOVWF divisor, ACCESS
1066  0E00     MOVLW 0x0
1068  6E1D     MOVWF holdAction, ACCESS
106A  0E00     MOVLW 0x0
106C  6E1E     MOVWF counter, ACCESS
106E  0E02     MOVLW 0x2
1070  6E1F     MOVWF sign, ACCESS
1072  0E00     MOVLW 0x0
1074  6E20     MOVWF releaseAction, ACCESS
1076  EC3B     CALL 0x1A76, 0
1078  F00D     NOP
68:            
69:            	// Main program loop
70:            	while(true)
71:            	{
72:            		// BUTTON------------------------------------------
73:            		CheckButton(&_button);
107A  0EB4     MOVLW 0xB4
107C  6E1A     MOVWF pressAction, ACCESS
107E  EC13     CALL 0x1226, 0
1080  F009     NOP
74:            
75:            		// USART-------------------------------------------
76:            		if(_commStatus1.statusBits.isRxFlowControl)
1082  0100     MOVLB 0x0
1084  A9B3     BTFSS _commStatus1, 4, BANKED
1086  EF47     GOTO 0x108E
1088  F008     NOP
108A  EF49     GOTO 0x1092
108C  F008     NOP
108E  EF4B     GOTO 0x1096
1090  F008     NOP
77:            			CheckFlowControlRx1();
1092  EC75     CALL 0x1EEA, 0
1094  F00F     NOP
78:            		if(_rxBuffer1.length > 0)
1096  51CA     MOVF 0xCA, W, BANKED
1098  B4D8     BTFSC STATUS, 2, ACCESS
109A  EF51     GOTO 0x10A2
109C  F008     NOP
109E  EF53     GOTO 0x10A6
10A0  F008     NOP
10A2  EF57     GOTO 0x10AE
10A4  F008     NOP
79:            			putch2(getch1());
10A6  EC42     CALL 0x2284, 0
10A8  F011     NOP
10AA  ECE1     CALL 0x1FC2, 0
10AC  F00F     NOP
80:            
81:            		if(_commStatus2.statusBits.isRxFlowControl)
10AE  0100     MOVLB 0x0
10B0  A9B2     BTFSS _commStatus2, 4, BANKED
10B2  EF5D     GOTO 0x10BA
10B4  F008     NOP
10B6  EF5F     GOTO 0x10BE
10B8  F008     NOP
10BA  EF61     GOTO 0x10C2
10BC  F008     NOP
82:            			CheckFlowControlRx2();
10BE  EC3C     CALL 0x1E78, 0
10C0  F00F     NOP
83:            		if(_rxBuffer2.length > 0)
10C2  51C4     MOVF 0xC4, W, BANKED
10C4  B4D8     BTFSC STATUS, 2, ACCESS
10C6  EF67     GOTO 0x10CE
10C8  F008     NOP
10CA  EF69     GOTO 0x10D2
10CC  F008     NOP
10CE  EF6D     GOTO 0x10DA
10D0  F008     NOP
84:            			putch1(getch2());
10D2  EC3D     CALL 0x227A, 0
10D4  F011     NOP
10D6  EC0C     CALL 0x2018, 0
10D8  F010     NOP
85:            
86:            		// SRAM--------------------------------------------
87:            		if(_sramStatus.statusBits.isContinuousFill && !_sramStatus.statusBits.isBusyFill)
10DA  0100     MOVLB 0x0
10DC  ADA3     BTFSS _sramStatus, 6, BANKED
10DE  EF73     GOTO 0x10E6
10E0  F008     NOP
10E2  EF75     GOTO 0x10EA
10E4  F008     NOP
10E6  EF7E     GOTO 0x10FC
10E8  F008     NOP
10EA  B5A3     BTFSC _sramStatus, 2, BANKED
10EC  EF7A     GOTO 0x10F4
10EE  F008     NOP
10F0  EF7C     GOTO 0x10F8
10F2  F008     NOP
10F4  EF7E     GOTO 0x10FC
10F6  F008     NOP
88:            			SramFillNext();
10F8  EC01     CALL 0x1E02, 0
10FA  F00F     NOP
89:            
90:            		if(!_sramStatus.statusBits.isBusyRead && _sramStatus.statusBits.hasUnreadData)
10FC  B1A3     BTFSC _sramStatus, 0, BANKED
10FE  EF83     GOTO 0x1106
1100  F008     NOP
1102  EF85     GOTO 0x110A
1104  F008     NOP
1106  EFD0     GOTO 0x11A0
1108  F008     NOP
110A  AFA3     BTFSS _sramStatus, 7, BANKED
110C  EF8A     GOTO 0x1114
110E  F008     NOP
1110  EF8C     GOTO 0x1118
1112  F008     NOP
1114  EFD0     GOTO 0x11A0
1116  F008     NOP
91:            		{
92:            			char number[8];
93:            			ltoa(number, _sramStatus.readAddress - _sramStatus.dataLength, 16);
1118  0E3E     MOVLW 0x3E
111A  6E33     MOVWF buf, ACCESS
111C  51A4     MOVF 0xA4, W, BANKED
111E  5DA7     SUBWF 0xA7, W, BANKED
1120  6E3B     MOVWF 0x3B, ACCESS
1122  51A5     MOVF 0xA5, W, BANKED
1124  59A8     SUBWFB 0xA8, W, BANKED
1126  6E3C     MOVWF 0x3C, ACCESS
1128  51A6     MOVF 0xA6, W, BANKED
112A  59A9     SUBWFB 0xA9, W, BANKED
112C  6E3D     MOVWF 0x3D, ACCESS
112E  503B     MOVF 0x3B, W, ACCESS
1130  6E34     MOVWF val, ACCESS
1132  503C     MOVF 0x3C, W, ACCESS
1134  6E35     MOVWF 0x35, ACCESS
1136  503D     MOVF 0x3D, W, ACCESS
1138  6E36     MOVWF 0x36, ACCESS
113A  6A37     CLRF 0x37, ACCESS
113C  0E00     MOVLW 0x0
113E  6E39     MOVWF 0x39, ACCESS
1140  0E10     MOVLW 0x10
1142  6E38     MOVWF base, ACCESS
1144  EC5E     CALL 0x20BC, 0
1146  F010     NOP
94:            			printf("READ ADDRESS = 0x%s\n\r", number);
1148  0E01     MOVLW 0x1
114A  6E28     MOVWF f, ACCESS
114C  0E3E     MOVLW 0x3E
114E  6E29     MOVWF 0x29, ACCESS
1150  ECAE     CALL 0x155C, 0
1152  F00A     NOP
95:            			int i;
96:            			for(i = 0; i < _sramStatus.dataLength; i++)
1154  0100     MOVLB 0x0
1156  6BA1     CLRF i, BANKED
1158  6BA2     CLRF 0xA2, BANKED
115A  EFBB     GOTO 0x1176
115C  F008     NOP
1170  0100     MOVLB 0x0
1172  4BA1     INFSNZ i, F, BANKED
1174  2BA2     INCF 0xA2, F, BANKED
1176  C0A1     MOVFF i, 0x3B
1178  F03B     NOP
117A  C0A2     MOVFF 0xA2, 0x3C
117C  F03C     NOP
117E  6A3D     CLRF 0x3D, ACCESS
1180  BE3C     BTFSC 0x3C, 7, ACCESS
1182  683D     SETF 0x3D, ACCESS
1184  51A4     MOVF 0xA4, W, BANKED
1186  5C3B     SUBWF 0x3B, W, ACCESS
1188  51A5     MOVF 0xA5, W, BANKED
118A  583C     SUBWFB 0x3C, W, ACCESS
118C  51A6     MOVF 0xA6, W, BANKED
118E  583D     SUBWFB 0x3D, W, ACCESS
1190  A0D8     BTFSS STATUS, 0, ACCESS
1192  EFCD     GOTO 0x119A
1194  F008     NOP
1196  EFCF     GOTO 0x119E
1198  F008     NOP
119A  EFAF     GOTO 0x115E
119C  F008     NOP
97:            			{
98:            				putch2(_sramBuffer.receive.rxData[i]);
115E  0E88     MOVLW 0x88
1160  25A1     ADDWF i, W, BANKED
1162  6ED9     MOVWF FSR2, ACCESS
1164  0E03     MOVLW 0x3
1166  21A2     ADDWFC 0xA2, W, BANKED
1168  6EDA     MOVWF FSR2H, ACCESS
116A  50DF     MOVF INDF2, W, ACCESS
116C  ECE1     CALL 0x1FC2, 0
116E  F00F     NOP
99:            			}
100:           			_sramStatus.statusBits.hasUnreadData = false;
119E  9FA3     BCF _sramStatus, 7, BANKED
101:           		}
102:           
103:           		// WIFI--------------------------------------------
104:           		// 5 seconds after startup, release WiFi module from reset
105:           		if(_wifiConnectStatus == 0 && _tick > 5000)
11A0  51B1     MOVF _wifiConnectStatus, W, BANKED
11A2  A4D8     BTFSS STATUS, 2, ACCESS
11A4  EFD6     GOTO 0x11AC
11A6  F008     NOP
11A8  EFD8     GOTO 0x11B0
11AA  F008     NOP
11AC  EFEA     GOTO 0x11D4
11AE  F008     NOP
11B0  51B0     MOVF 0xB0, W, BANKED
11B2  11AF     IORWF 0xAF, W, BANKED
11B4  E10B     BNZ 0x11CC
11B6  0E89     MOVLW 0x89
11B8  5DAD     SUBWF _tick, W, BANKED
11BA  0E13     MOVLW 0x13
11BC  59AE     SUBWFB 0xAE, W, BANKED
11BE  A0D8     BTFSS STATUS, 0, ACCESS
11C0  EFE4     GOTO 0x11C8
11C2  F008     NOP
11C4  EFE6     GOTO 0x11CC
11C6  F008     NOP
11C8  EFEA     GOTO 0x11D4
11CA  F008     NOP
106:           		{
107:           			WIFI_RST = 1;
11CC  8E89     BSF LATA, 7, ACCESS
108:           			_wifiConnectStatus = 1;
11CE  0E01     MOVLW 0x1
11D0  6FB1     MOVWF _wifiConnectStatus, BANKED
109:           			RCSTA1bits.SPEN	= true;
11D2  8EAC     BSF RCSTA1, 7, ACCESS
110:           		}
111:           
112:           		// After WiFi is released from reset, wait for WiFi initialization to complete, then enable USART1
113:           		if(_wifiConnectStatus == 1 && _tick > 6000)
11D4  05B1     DECF _wifiConnectStatus, W, BANKED
11D6  A4D8     BTFSS STATUS, 2, ACCESS
11D8  EFF0     GOTO 0x11E0
11DA  F008     NOP
11DC  EFF2     GOTO 0x11E4
11DE  F008     NOP
11E0  EF3D     GOTO 0x107A
11E2  F008     NOP
11E4  51B0     MOVF 0xB0, W, BANKED
11E6  11AF     IORWF 0xAF, W, BANKED
11E8  E10B     BNZ 0x1200
11EA  0E71     MOVLW 0x71
11EC  5DAD     SUBWF _tick, W, BANKED
11EE  0E17     MOVLW 0x17
11F0  59AE     SUBWFB 0xAE, W, BANKED
11F2  A0D8     BTFSS STATUS, 0, ACCESS
11F4  EFFE     GOTO 0x11FC
11F6  F008     NOP
11F8  EF00     GOTO 0x1200
11FA  F009     NOP
11FC  EF3D     GOTO 0x107A
11FE  F008     NOP
114:           		{
115:           			putch1('A');
1200  0E41     MOVLW 0x41
1202  EC0C     CALL 0x2018, 0
1204  F010     NOP
116:           			putch1('T');
1206  0E54     MOVLW 0x54
1208  EC0C     CALL 0x2018, 0
120A  F010     NOP
117:           			putch1('\r');
120C  0E0D     MOVLW 0xD
120E  EC0C     CALL 0x2018, 0
1210  F010     NOP
118:           			putch1('\n');
1212  0E0A     MOVLW 0xA
1214  EC0C     CALL 0x2018, 0
1216  F010     NOP
119:           			_wifiConnectStatus = 2;
1218  0E02     MOVLW 0x2
121A  0100     MOVLB 0x0
121C  6FB1     MOVWF _wifiConnectStatus, BANKED
121E  EF3D     GOTO 0x107A
1220  F008     NOP
1222  EFE4     GOTO 0x1C8
1224  F000     NOP
120:           		}
121:           	}
122:           	return;
123:           }
124:           
125:           // INITIALIZATION--------------------------------------------------------------
126:           
127:           void InitializeOscillator(void)
128:           {
129:           	OSCCONbits.SCS	= 0b00;			// Select system clock = primary clock source (INTOSC)
225A  0EFC     MOVLW 0xFC
225C  16D3     ANDWF OSCCON, F, ACCESS
130:           	OSCCONbits.IRCF	= 0b111;		// Internal oscillator frequency select = 8MHz
225E  0E70     MOVLW 0x70
2260  12D3     IORWF OSCCON, F, ACCESS
131:           
132:           	REFOCONbits.ROSEL	= 0;		// Source = FOSC
2262  010F     MOVLB 0xF
2264  993D     BCF 0x3D, 4, BANKED
133:           	REFOCONbits.RODIV	= 0;		// Source not scaled
2266  0EF0     MOVLW 0xF0
2268  173D     ANDWF 0x3D, F, BANKED
134:           	REFOCONbits.ROON	= false;	// Output enable
226A  9F3D     BCF 0x3D, 7, BANKED
135:           }
226C  0012     RETURN 0
136:           
137:           void InitializeWDT(void)
138:           {
139:           	WDTCONbits.REGSLP	= 1;	// On-chip regulator enters low-power operation when device enters Sleep mode
226E  8EC0     BSF WDTCON, 7, ACCESS
140:           	WDTCONbits.VBGOE	= 0;	// Band gap reference output is disabled
2270  98C0     BCF WDTCON, 4, ACCESS
141:           	WDTCONbits.ULPEN	= 0;	// Ultra low-power wake-up module is disabled
2272  94C0     BCF WDTCON, 2, ACCESS
142:           	WDTCONbits.ULPSINK	= 0;	// Ultra low-power wake-up current sink is disabled
2274  92C0     BCF WDTCON, 1, ACCESS
143:           	WDTCONbits.SWDTEN	= 0;	// Watchdog timer is off
2276  90C0     BCF WDTCON, 0, ACCESS
144:           }
2278  0012     RETURN 0
145:           
146:           void InitializePorts(void)
147:           {
148:           	// PORTA
149:           	LATA	= 0b00000000;	// Clear port latch
206E  6A89     CLRF LATA, ACCESS
150:           	ANCON0	= 0b11110000;	// Enable analog inputs AN0-AN3
2070  0EF0     MOVLW 0xF0
2072  6F48     MOVWF 0x48, BANKED
151:           	TRISA	= 0b00111111;	// Output PORTA<7:6>, Input PORTA<5:0>
2074  0E3F     MOVLW 0x3F
2076  6E92     MOVWF TRISA, ACCESS
152:           
153:           	// PORTB
154:           	INTCON2bits.RBPU = 1;	// Disable weak pull-ups
2078  8EF1     BSF INTCON2, 7, ACCESS
155:           	LATB	= 0b00001000;	// Clear port latch
207A  0E08     MOVLW 0x8
207C  6E8A     MOVWF LATB, ACCESS
156:           	ANCON1	= 0b00010111;	// Disable analog inputs AN8-AN10,AN12
207E  0E17     MOVLW 0x17
2080  6F49     MOVWF 0x49, BANKED
157:           	TRISB	= 0b00000100;	// Output PORTB<7:3,1:0>, Input PORTB<2>
2082  0E04     MOVLW 0x4
2084  6E93     MOVWF TRISB, ACCESS
158:           
159:           	// PORTC
160:           	LATC	= 0b00000100;	// Clear port latch
2086  0E04     MOVLW 0x4
2088  6E8B     MOVWF LATC, ACCESS
161:           	ANCON1bits.PCFG11 = 1;	// Disable analog input AN11
208A  8749     BSF 0x49, 3, BANKED
162:           	TRISC	= 0b10010010;	// Output PORTC<6:5,3:2,0>, Input PORTC<7,4,1>
208C  0E92     MOVLW 0x92
208E  6E94     MOVWF TRISC, ACCESS
163:           
164:           	// Configure Peripheral Pin Select
165:           	EECON2 = 0x55;			// PPS register unlock sequence
2090  0E55     MOVLW 0x55
2092  6EA7     MOVWF EECON2, ACCESS
166:           	EECON2 = 0xAA;
2094  0EAA     MOVLW 0xAA
2096  6EA7     MOVWF EECON2, ACCESS
167:           	PPSCONbits.IOLOCK = 0;	// Unlock PPS registers
2098  010E     MOVLB 0xE
209A  91BF     BCF 0xBF, 0, BANKED
168:           	RPINR1	= 0x02;			// Assign External Interrupt 1		(INT1) to RP2	(PORTA<5>)
209C  0E02     MOVLW 0x2
209E  6FE1     MOVWF 0xE1, BANKED
169:           	RPINR21	= 0x05;			// Assign SPI2 Data Input			(SDI2) to RP5	(PORTB<2>)
20A0  0E05     MOVLW 0x5
20A2  6FFC     MOVWF 0xFC, BANKED
170:           	RPINR22	= 0x08;			// Assign SPI2 Clock Input			(SCK2IN) to RP8	(PORTB<5>)
20A4  0E08     MOVLW 0x8
20A6  6FFD     MOVWF 0xFD, BANKED
171:           	RPINR16	= 0x0C;			// Assign USART2 Async. Receive		(RX2) to RP12	(PORTC<1>)
20A8  0E0C     MOVLW 0xC
20AA  6FF7     MOVWF 0xF7, BANKED
172:           	RPOR7	= 0x0A;			// Assign SPI2 Data Output			(SDO2) to RP7	(PORTB<4>)
20AC  0E0A     MOVLW 0xA
20AE  6FC7     MOVWF 0xC7, BANKED
173:           	RPOR8	= 0x0B;			// Assign SPI2 Clock Output			(SCK2) to RP8	(PORTB<5>)
20B0  0E0B     MOVLW 0xB
20B2  6FC8     MOVWF 0xC8, BANKED
174:           	RPOR11	= 0x06;			// Assign USART2 Async. Transmit	(TX2) to RP11	(PORTC<0>)
20B4  0E06     MOVLW 0x6
20B6  6FCB     MOVWF 0xCB, BANKED
175:           	PPSCONbits.IOLOCK = 1;	// Lock PPS registers
20B8  81BF     BSF 0xBF, 0, BANKED
176:           }
20BA  0012     RETURN 0
177:           
178:           void InitializeTimers(void)
179:           {
180:           	// Timer 4
181:           	// (1/(FCY/prescale))*period*postscale = timer interval
182:           	// (1/(12MHz/16))*250*3 = 1ms
183:           	T4CONbits.T4CKPS	= 0x2;	// Clock prescale
2244  5076     MOVF T4CON, W, ACCESS
2246  0BFC     ANDLW 0xFC
2248  0902     IORLW 0x2
224A  6E76     MOVWF T4CON, ACCESS
184:           	T4CONbits.T4OUTPS	= 0x2;	// Output postscale
224C  5076     MOVF T4CON, W, ACCESS
224E  0B87     ANDLW 0x87
2250  0910     IORLW 0x10
2252  6E76     MOVWF T4CON, ACCESS
185:           	PR4					= 0xFA;	// Timer period
2254  0EFA     MOVLW 0xFA
2256  6E77     MOVWF PR4, ACCESS
186:           }
2258  0012     RETURN 0
187:           
188:           void InitializeSpi(void)
189:           {
190:           	// Configure SPI2 module for master mode operation (Mode 0)
191:           	ODCON3bits.SPI2OD	= 0;		// Open-drain capability is disabled
21FA  010F     MOVLB 0xF
21FC  9340     BCF 0x40, 1, BANKED
192:           	SSP2CON1bits.CKP	= 0;		// Idle state for clock is a low level
21FE  9872     BCF SSP2CON1, 4, ACCESS
193:           	SSP2STATbits.CKE	= 1;		// Transmit occurs on transition from active to idle clock state
2200  8C73     BSF SSP2STAT, 6, ACCESS
194:           	SSP2STATbits.SMP	= 0;		// Input data sampled at the middle of data output time
2202  9E73     BCF SSP2STAT, 7, ACCESS
195:           	SSP2CON1bits.SSPM	= 0b0000;	// SPI Master mode, clock = FOSC/4
2204  0EF0     MOVLW 0xF0
2206  1672     ANDWF SSP2CON1, F, ACCESS
196:           	SSP2CON1bits.SSPEN	= 1;		// Enable SPI2
2208  8A72     BSF SSP2CON1, 5, ACCESS
197:           
198:           	// Configure SPI2 DMA
199:           	DMACON1bits.SSCON1		= 0;	// SSDMA pin is not controlled by the DMA module
220A  9E88     BCF DMACON1, 7, ACCESS
200:           	DMACON1bits.SSCON0		= 0;
220C  9C88     BCF DMACON1, 6, ACCESS
201:           	DMACON1bits.DUPLEX1		= 1;	// SPI DMA operates in Full-Duplex mode
220E  8688     BSF DMACON1, 3, ACCESS
202:           	DMACON1bits.DUPLEX0		= 0;
2210  9488     BCF DMACON1, 2, ACCESS
203:           	DMACON1bits.TXINC		= 1;	// The transmit address is to be incremented from the initial value of TXADDR<11:0>
2212  8A88     BSF DMACON1, 5, ACCESS
204:           	DMACON1bits.RXINC		= 1;	// The received address is to be incremented from the initial value of RXADDR<11:0>
2214  8888     BSF DMACON1, 4, ACCESS
205:           	DMACON1bits.DLYINTEN	= 0;	// Disable delay interrupt
2216  9288     BCF DMACON1, 1, ACCESS
206:           	DMACON2bits.DLYCYC		= 0x0;	// Additional inter-byte delay during transfer = 0
2218  0E0F     MOVLW 0xF
221A  1686     ANDWF DMACON2, F, ACCESS
207:           	DMACON2bits.INTLVL		= 0x0;	// Generate interrupt when DMA transfer is complete
221C  0EF0     MOVLW 0xF0
221E  1686     ANDWF DMACON2, F, ACCESS
208:           }
2220  0012     RETURN 0
209:           
210:           void InitializeUSART(void)
211:           {
212:           	// USART1 (Debug connector on bottom of board)
213:           	// Calculate BRG value for desired baud rate = 115200
214:           	// 115200 = FOSC/[4(n+1)] = 48000000/[4(n+1)]  ->  n = 103.167
215:           	// Calculated baud rate = 48000000/[4(103+1)] = 115384.615
216:           	// Error = [(115384.615-115200)/115200]*100 = 0.160%  ->  Tests show good stability
217:           	SPBRGH1	= 0x00;
213E  6A7F     CLRF SPBRGH1, ACCESS
218:           	SPBRG1	= 0x67;
2140  0E67     MOVLW 0x67
2142  6EB0     MOVWF SPBRG1, ACCESS
219:           	TXSTA1bits.BRGH		= true;		// High baud rate
2144  84AD     BSF TXSTA1, 2, ACCESS
220:           	BAUDCON1bits.BRG16	= true;		// Use 16-bit baud rate register
2146  867E     BSF BAUDCON1, 3, ACCESS
221:           	TXSTA1bits.SYNC		= false;	// Asynchronous mode
2148  98AD     BCF TXSTA1, 4, ACCESS
222:           
223:           	// Configure transmission
224:           	TXSTA1bits.TX9		= false;	// 8-bit transmission
214A  9CAD     BCF TXSTA1, 6, ACCESS
225:           	BAUDCON1bits.TXCKP	= false;	// Idle state for transmit = HIGH
214C  987E     BCF BAUDCON1, 4, ACCESS
226:           	TXSTA1bits.TXEN		= true;		// Enable transmission
214E  8AAD     BSF TXSTA1, 5, ACCESS
227:           
228:           	// Configure reception
229:           	RCSTA1bits.RX9		= false;	// 8-bit reception
2150  9CAC     BCF RCSTA1, 6, ACCESS
230:           	BAUDCON1bits.RXDTP	= false;	// Receive data is not inverted (active-high)
2152  9A7E     BCF BAUDCON1, 5, ACCESS
231:           	RCSTA1bits.CREN		= true;		// Enable receiver
2154  88AC     BSF RCSTA1, 4, ACCESS
232:           
233:           	// Enable serial port
234:           	//RCSTA1bits.SPEN		= true;
235:           
236:           	// USART2 (Debug connector on bottom of board)
237:           	// Calculate BRG value for desired baud rate = 115200
238:           	// 115200 = FOSC/[4(n+1)] = 48000000/[4(n+1)]  ->  n = 103.167
239:           	// Calculated baud rate = 48000000/[4(103+1)] = 115384.615
240:           	// Error = [(115384.615-115200)/115200]*100 = 0.160%  ->  Tests show good stability
241:           	SPBRGH2	= 0x00;
2156  6A7D     CLRF SPBRGH2, ACCESS
242:           	SPBRG2	= 0x67;
2158  0E67     MOVLW 0x67
215A  6EAB     MOVWF SPBRG2, ACCESS
243:           	TXSTA2bits.BRGH		= true;		// High baud rate
215C  84A8     BSF TXSTA2, 2, ACCESS
244:           	BAUDCON2bits.BRG16	= true;		// Use 16-bit baud rate register
215E  867C     BSF BAUDCON2, 3, ACCESS
245:           	TXSTA2bits.SYNC		= false;	// Asynchronous mode
2160  98A8     BCF TXSTA2, 4, ACCESS
246:           
247:           	// Configure transmission
248:           	TXSTA2bits.TX9		= false;	// 8-bit transmission
2162  9CA8     BCF TXSTA2, 6, ACCESS
249:           	BAUDCON2bits.TXCKP	= false;	// Idle state for transmit = HIGH
2164  987C     BCF BAUDCON2, 4, ACCESS
250:           	TXSTA2bits.TXEN		= true;		// Enable transmission
2166  8AA8     BSF TXSTA2, 5, ACCESS
251:           
252:           	// Configure reception
253:           	RCSTA2bits.RX9		= false;	// 8-bit reception
2168  9C9C     BCF RCSTA2, 6, ACCESS
254:           	BAUDCON2bits.RXDTP	= false;	// Receive data is not inverted (active-high)
216A  9A7C     BCF BAUDCON2, 5, ACCESS
255:           	RCSTA2bits.CREN		= true;		// Enable receiver
216C  889C     BSF RCSTA2, 4, ACCESS
256:           
257:           	// Enable serial port
258:           	RCSTA2bits.SPEN		= true;
216E  8E9C     BSF RCSTA2, 7, ACCESS
259:           }
2170  0012     RETURN 0
260:           
261:           void InitializeRTCC(void)
262:           {
263:           	;
264:           }
265:           
266:           void InitializeInterrupts(void)
267:           {
268:           	// Configure external interrupt (pushbutton = active LOW on INT1 mapped to RP2)
269:           	INTCON2bits.INTEDG1	= 0;	// Falling edge (button)
2222  9AF1     BCF INTCON2, 5, ACCESS
270:           	INTCON3bits.INT1IP	= 1;	// High priority
2224  8CF0     BSF INTCON3, 6, ACCESS
271:           	INTCON3bits.INT1IE	= 1;	// Enable
2226  86F0     BSF INTCON3, 3, ACCESS
272:           
273:           	// Configure Timer 4 period match interrupt
274:           	IPR3bits.TMR4IP	= 1;	// High priority
2228  86A5     BSF IPR3, 3, ACCESS
275:           	PIE3bits.TMR4IE	= 1;	// Enable
222A  86A3     BSF PIE3, 3, ACCESS
276:           
277:           	// Configure USART1 interrupts
278:           	IPR1bits.TX1IP	= 0;	// Low priority TX interrupt
222C  989F     BCF IPR1, 4, ACCESS
279:           	IPR1bits.RC1IP	= 0;	// Low priority RX interrupt
222E  9A9F     BCF IPR1, 5, ACCESS
280:           	//PIE1bits.TX1IE= 1;	// Enable TX interrupt **This is done in putch(), not here**
281:           	PIE1bits.RC1IE	= 1;	// Enable RX interrupt
2230  8A9D     BSF PIE1, 5, ACCESS
282:           
283:           	// Configure USART2 interrupts
284:           	IPR3bits.TX2IP	= 0;	// Low priority TX interrupt
2232  98A5     BCF IPR3, 4, ACCESS
285:           	IPR3bits.RC2IP	= 0;	// Low priority RX interrupt
2234  9AA5     BCF IPR3, 5, ACCESS
286:           	//PIE3bits.TX2IE= 1;	// Enable TX interrupt **This is done in putch(), not here**
287:           	PIE3bits.RC2IE	= 1;	// Enable RX interrupt
2236  8AA3     BSF PIE3, 5, ACCESS
288:           
289:           	// Configure SPI2 interrupts
290:           	IPR3bits.SSP2IP	= 0;	// Low priority
2238  9EA5     BCF IPR3, 7, ACCESS
291:           	PIE3bits.SSP2IE	= 1;	// Enable
223A  8EA3     BSF PIE3, 7, ACCESS
292:           
293:           	// Enable interrupts
294:           	RCONbits.IPEN	= 1;	// Set prioritized interrupt mode
223C  8ED0     BSF RCON, 7, ACCESS
295:           	INTCONbits.GIEH	= 1;	// Enable high-priority interrupts
223E  8EF2     BSF INTCON, 7, ACCESS
296:           	INTCONbits.GIEL	= 1;	// Enable low-priority interrupts
2240  8CF2     BSF INTCON, 6, ACCESS
297:           }
2242  0012     RETURN 0
298:           
299:           // BUTTON ACTIONS--------------------------------------------------------------
300:           
301:           void ButtonPress(void)
302:           {
303:           	;
304:           }
2290  0012     RETURN 0
305:           
306:           void ButtonHold(void)
307:           {
308:           	;
309:           }
2292  0012     RETURN 0
310:           
311:           void ButtonRelease(void)
312:           {
313:           	;
314:           }
228E  0012     RETURN 0
---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/interrupt.c  ------------------
1:             /* Project:	SmartModule
2:              * File:	interrupt.c
3:              * Author:	Jonathan Ruisi
4:              * Created:	December 19, 2016, 5:26 AM
5:              */
6:             
7:             #include <xc.h>
8:             #include <stdbool.h>
9:             #include <stdint.h>
10:            #include "interrupt.h"
11:            #include "main.h"
12:            #include "button.h"
13:            #include "serial_comm.h"
14:            #include "sram.h"
15:            #include "utility.h"
16:            
17:            void __interrupt(high_priority) isrHighPriority(void)
0008  8252     BSF btemp, 1, ACCESS
1F5C  CFE1     MOVFF FSR1, 0x4
18:            {
19:            	if(PIR3bits.TMR4IF)
1F6C  A6A4     BTFSS PIR3, 3, ACCESS
20:            	{
21:            		_tick++;
1F7A  0E01     MOVLW 0x1
22:            		PIR3bits.TMR4IF = false;
1F88  96A4     BCF PIR3, 3, ACCESS
23:            	}
1F8A  EFD7     GOTO 0x1FAE
24:            	else if(INTCON3bits.INT1IF)
1F8E  A0F0     BTFSS INTCON3, 0, ACCESS
25:            	{
26:            		UpdateButtonState(&_button, BUTTON);
1F9C  0EB4     MOVLW 0xB4
27:            		INTCON3bits.INT1IF = false;
1FAC  90F0     BCF INTCON3, 0, ACCESS
28:            	}
29:            	return;
30:            }
1FAE  C007     MOVFF 0x7, FSR2H
31:            
32:            void __interrupt(low_priority) isrLowPriority(void)
0018  8052     BSF btemp, 0, ACCESS
33:            {
34:            	if(PIR3bits.SSP2IF)
0036  AEA4     BTFSS PIR3, 7, ACCESS
0038  EF20     GOTO 0x40
003A  F000     NOP
003C  EF22     GOTO 0x44
003E  F000     NOP
0040  EF8C     GOTO 0x118
0042  F000     NOP
35:            	{
36:            		if(_sramStatus.statusBits.isBusyRead)
0044  0100     MOVLB 0x0
0046  A1A3     BTFSS _sramStatus, 0, BANKED
0048  EF28     GOTO 0x50
004A  F000     NOP
004C  EF2A     GOTO 0x54
004E  F000     NOP
0050  EF43     GOTO 0x86
0052  F000     NOP
37:            		{
38:            			RAM_CS = 1;
0054  868A     BSF LATB, 3, ACCESS
39:            			_sramStatus.readAddress += _sramStatus.dataLength;
0056  EE20     LFSR 2, 0xA4
0058  F0A4     NOP
005A  50DE     MOVF POSTINC2, W, ACCESS
005C  27A7     ADDWF 0xA7, F, BANKED
005E  50DE     MOVF POSTINC2, W, ACCESS
0060  23A8     ADDWFC 0xA8, F, BANKED
0062  50DD     MOVF POSTDEC2, W, ACCESS
0064  23A9     ADDWFC 0xA9, F, BANKED
40:            			if(_sramStatus.readAddress >= SRAM_CAPACITY)
0066  0E02     MOVLW 0x2
0068  5DA9     SUBWF 0xA9, W, BANKED
006A  A0D8     BTFSS STATUS, 0, ACCESS
006C  EF3A     GOTO 0x74
006E  F000     NOP
0070  EF3C     GOTO 0x78
0072  F000     NOP
0074  EF3F     GOTO 0x7E
0076  F000     NOP
41:            				_sramStatus.readAddress = 0;
0078  6BA7     CLRF 0xA7, BANKED
007A  6BA8     CLRF 0xA8, BANKED
007C  6BA9     CLRF 0xA9, BANKED
42:            			_sramStatus.statusBits.hasUnreadData = true;
007E  8FA3     BSF _sramStatus, 7, BANKED
43:            			_sramStatus.statusBits.isBusyRead = false;
0080  91A3     BCF _sramStatus, 0, BANKED
44:            		}
0082  EF8B     GOTO 0x116
0084  F000     NOP
45:            		else if(_sramStatus.statusBits.isBusyWrite)
0086  A3A3     BTFSS _sramStatus, 1, BANKED
0088  EF48     GOTO 0x90
008A  F000     NOP
008C  EF4A     GOTO 0x94
008E  F000     NOP
0090  EF62     GOTO 0xC4
0092  F000     NOP
46:            		{
47:            			RAM_CS = 1;
0094  868A     BSF LATB, 3, ACCESS
48:            			_sramStatus.writeAddress += _sramStatus.dataLength;
0096  EE20     LFSR 2, 0xA4
0098  F0A4     NOP
009A  50DE     MOVF POSTINC2, W, ACCESS
009C  27AA     ADDWF 0xAA, F, BANKED
009E  50DE     MOVF POSTINC2, W, ACCESS
00A0  23AB     ADDWFC 0xAB, F, BANKED
00A2  50DD     MOVF POSTDEC2, W, ACCESS
00A4  23AC     ADDWFC 0xAC, F, BANKED
49:            			if(_sramStatus.writeAddress >= SRAM_CAPACITY)
00A6  0E02     MOVLW 0x2
00A8  5DAC     SUBWF 0xAC, W, BANKED
00AA  A0D8     BTFSS STATUS, 0, ACCESS
00AC  EF5A     GOTO 0xB4
00AE  F000     NOP
00B0  EF5C     GOTO 0xB8
00B2  F000     NOP
00B4  EF5F     GOTO 0xBE
00B6  F000     NOP
50:            				_sramStatus.writeAddress = 0;
00B8  6BAA     CLRF 0xAA, BANKED
00BA  6BAB     CLRF 0xAB, BANKED
00BC  6BAC     CLRF 0xAC, BANKED
51:            			_sramStatus.statusBits.isBusyWrite = false;
00BE  93A3     BCF _sramStatus, 1, BANKED
52:            		}
00C0  EF8B     GOTO 0x116
00C2  F000     NOP
53:            		else if(_sramStatus.statusBits.isBusyFill)
00C4  A5A3     BTFSS _sramStatus, 2, BANKED
00C6  EF67     GOTO 0xCE
00C8  F000     NOP
00CA  EF69     GOTO 0xD2
00CC  F000     NOP
00CE  EF82     GOTO 0x104
00D0  F000     NOP
54:            		{
55:            			if(_sramStatus.statusBits.isContinuousFill && _sramStatus.dataLength == 0)
00D2  ADA3     BTFSS _sramStatus, 6, BANKED
00D4  EF6E     GOTO 0xDC
00D6  F000     NOP
00D8  EF70     GOTO 0xE0
00DA  F000     NOP
00DC  EF7F     GOTO 0xFE
00DE  F000     NOP
00E0  51A4     MOVF 0xA4, W, BANKED
00E2  11A5     IORWF 0xA5, W, BANKED
00E4  11A6     IORWF 0xA6, W, BANKED
00E6  A4D8     BTFSS STATUS, 2, ACCESS
00E8  EF78     GOTO 0xF0
00EA  F000     NOP
00EC  EF7A     GOTO 0xF4
00EE  F000     NOP
00F0  EF7F     GOTO 0xFE
00F2  F000     NOP
56:            			{
57:            				RAM_CS = 1;
00F4  868A     BSF LATB, 3, ACCESS
58:            				DMACON1bits.DUPLEX1 = 1;
00F6  8688     BSF DMACON1, 3, ACCESS
59:            				DMACON1bits.DUPLEX0 = 0;
00F8  9488     BCF DMACON1, 2, ACCESS
60:            				DMACON1bits.TXINC = 1;
00FA  8A88     BSF DMACON1, 5, ACCESS
61:            				_sramStatus.statusBits.isContinuousFill = false;
00FC  9DA3     BCF _sramStatus, 6, BANKED
62:            			}
63:            			_sramStatus.statusBits.isBusyFill = false;
00FE  95A3     BCF _sramStatus, 2, BANKED
64:            		}
0100  EF8B     GOTO 0x116
0102  F000     NOP
65:            		else if(_sramStatus.statusBits.isBusyMode)
0104  A7A3     BTFSS _sramStatus, 3, BANKED
0106  EF87     GOTO 0x10E
0108  F000     NOP
010A  EF89     GOTO 0x112
010C  F000     NOP
010E  EF8B     GOTO 0x116
0110  F000     NOP
66:            		{
67:            			RAM_CS = 1;
0112  868A     BSF LATB, 3, ACCESS
68:            			_sramStatus.statusBits.isBusyWrite = false;
0114  93A3     BCF _sramStatus, 1, BANKED
69:            		}
70:            		PIR3bits.SSP2IF = false;
0116  9EA4     BCF PIR3, 7, ACCESS
71:            	}
72:            	if(PIR1bits.RC1IF)
0118  AA9E     BTFSS PIR1, 5, ACCESS
011A  EF91     GOTO 0x122
011C  F000     NOP
011E  EF93     GOTO 0x126
0120  F000     NOP
0122  EF99     GOTO 0x132
0124  F000     NOP
73:            	{
74:            		RingBufferEnqueue(&_rxBuffer1, RCREG1);
0126  0EC9     MOVLW 0xC9
0128  6E0E     MOVWF buffer, ACCESS
012A  CFAF     MOVFF RCREG1, data
012C  F00F     NOP
012E  EC23     CALL 0x1846, 0
0130  F00C     NOP
75:            	}
76:            	if(PIR3bits.RC2IF)
0132  AAA4     BTFSS PIR3, 5, ACCESS
0134  EF9E     GOTO 0x13C
0136  F000     NOP
0138  EFA0     GOTO 0x140
013A  F000     NOP
013C  EFA6     GOTO 0x14C
013E  F000     NOP
77:            	{
78:            		RingBufferEnqueue(&_rxBuffer2, RCREG2);
0140  0EC3     MOVLW 0xC3
0142  6E0E     MOVWF buffer, ACCESS
0144  CFAA     MOVFF RCREG2, data
0146  F00F     NOP
0148  EC23     CALL 0x1846, 0
014A  F00C     NOP
79:            	}
80:            	if(PIR1bits.TX1IF)
014C  A89E     BTFSS PIR1, 4, ACCESS
014E  EFAB     GOTO 0x156
0150  F000     NOP
0152  EFAD     GOTO 0x15A
0154  F000     NOP
0156  EFBD     GOTO 0x17A
0158  F000     NOP
81:            	{
82:            		if(_txBuffer1.length == 0)
015A  504D     MOVF 0x4D, W, ACCESS
015C  A4D8     BTFSS STATUS, 2, ACCESS
015E  EFB3     GOTO 0x166
0160  F000     NOP
0162  EFB5     GOTO 0x16A
0164  F000     NOP
0166  EFB8     GOTO 0x170
0168  F000     NOP
83:            			PIE1bits.TX1IE = false;
016A  989D     BCF PIE1, 4, ACCESS
016C  EFBD     GOTO 0x17A
016E  F000     NOP
84:            		else
85:            			TXREG1 = RingBufferDequeue(&_txBuffer1);
0170  0E4C     MOVLW 0x4C
0172  6E0E     MOVWF buffer, ACCESS
0174  EC28     CALL 0x1C50, 0
0176  F00E     NOP
0178  6EAE     MOVWF TXREG1, ACCESS
86:            	}
87:            	if(PIR3bits.TX2IF)
017A  A8A4     BTFSS PIR3, 4, ACCESS
017C  EFC2     GOTO 0x184
017E  F000     NOP
0180  EFC4     GOTO 0x188
0182  F000     NOP
0184  EFD4     GOTO 0x1A8
0186  F000     NOP
88:            	{
89:            		if(_txBuffer2.length == 0)
0188  5047     MOVF 0x47, W, ACCESS
018A  A4D8     BTFSS STATUS, 2, ACCESS
018C  EFCA     GOTO 0x194
018E  F000     NOP
0190  EFCC     GOTO 0x198
0192  F000     NOP
0194  EFCF     GOTO 0x19E
0196  F000     NOP
90:            			PIE3bits.TX2IE = false;
0198  98A3     BCF PIE3, 4, ACCESS
019A  EFD4     GOTO 0x1A8
019C  F000     NOP
91:            		else
92:            			TXREG2 = RingBufferDequeue(&_txBuffer2);
019E  0E46     MOVLW 0x46
01A0  6E0E     MOVWF buffer, ACCESS
01A2  EC28     CALL 0x1C50, 0
01A4  F00E     NOP
01A6  6EA9     MOVWF TXREG2, ACCESS
93:            	}
94:            	return;
95:            }
01A8  C019     MOVFF 0x19, FSR2H
01AA  FFDA     NOP
01AC  C018     MOVFF 0x18, FSR2
01AE  FFD9     NOP
01B0  C017     MOVFF 0x17, FSR1H
01B2  FFE2     NOP
01B4  C016     MOVFF 0x16, FSR1
01B6  FFE1     NOP
01B8  C015     MOVFF 0x15, BSR
01BA  FFE0     NOP
01BC  C014     MOVFF 0x14, WREG
01BE  FFE8     NOP
01C0  C013     MOVFF 0x13, STATUS
01C2  FFD8     NOP
01C4  9052     BCF btemp, 0, ACCESS
01C6  0010     RETFIE 0
---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/dist/default/debug/startup.as  
1:             
2:             	; Microchip MPLAB XC8 C Compiler V1.41
3:             	; Copyright (C) 1984-2017 HI-TECH Software
4:             
5:             	; Auto-generated runtime startup code for final link stage.
6:             
7:             	;
8:             	; Compiler options:
9:             	;
10:            	; --chip=18F27J13 -G -mdist/default/debug/SmartModule.X.debug.map \
11:            	; -D__DEBUG=1 --debugger=none --double=24 --float=24 --emi=wordwrite \
12:            	; --opt=none --addrqual=require -P -N255 --warn=-3 --asmlist \
13:            	; -DXPRJ_default=default \
14:            	; --summary=default,+psect,-class,+mem,-hex,+file \
15:            	; --output=default,-inhx032 \
16:            	; --runtime=default,+clear,+init,+keep,-no_startup,-download,+config,+clib,+plib \
17:            	; --output=-mcof,+elf:multilocs --stack=compiled:auto:auto:auto \
18:            	; --errformat=%f:%l: error: (%n) %s \
19:            	; --warnformat=%f:%l: warning: (%n) %s \
20:            	; --msgformat=%f:%l: advisory: (%n) %s --summary=+xml \
21:            	; --summarydir=dist/default/debug/memoryfile.xml \
22:            	; -odist/default/debug/SmartModule.X.debug.elf \
23:            	; build/default/debug/config.p1 build/default/debug/main.p1 \
24:            	; build/default/debug/interrupt.p1 build/default/debug/button.p1 \
25:            	; build/default/debug/sram.p1 build/default/debug/serial_comm.p1 \
26:            	; build/default/debug/wifi.p1
27:            	;
28:            
29:            
30:            	processor	18F27J13
31:            
32:            	GLOBAL	_main,start
33:            	FNROOT	_main
34:            
35:            	pic18cxx	equ	1
36:            
37:            	psect	jflash_buffer,class=CODE,space=0,noexec
38:            	psect	config,class=CONFIG,delta=1,noexec
39:            	psect	idloc,class=IDLOC,delta=1,noexec
40:            	psect	const,class=CONST,delta=1,reloc=2,noexec
41:            	psect	smallconst,class=SMALLCONST,delta=1,reloc=2,noexec
42:            	psect	mediumconst,class=MEDIUMCONST,delta=1,reloc=2,noexec
43:            	psect	rbss,class=COMRAM,space=1,noexec
44:            	psect	bss,class=RAM,space=1,noexec
45:            	psect	rdata,class=COMRAM,space=1,noexec
46:            	psect	irdata,class=CODE,space=0,reloc=2,noexec
47:            	psect	bss,class=RAM,space=1,noexec
48:            	psect	data,class=RAM,space=1,noexec
49:            	psect	idata,class=CODE,space=0,reloc=2,noexec
50:            	psect	nvrram,class=COMRAM,space=1,noexec
51:            	psect	nvbit,class=COMRAM,bit,space=1,noexec
52:            	psect	temp,ovrld,class=COMRAM,space=1,noexec
53:            	psect	struct,ovrld,class=COMRAM,space=1,noexec
54:            	psect	rbit,class=COMRAM,bit,space=1,noexec
55:            	psect	bigbss,class=BIGRAM,space=1,noexec
56:            	psect	bigdata,class=BIGRAM,space=1,noexec
57:            	psect	ibigdata,class=CODE,space=0,reloc=2,noexec
58:            	psect	farbss,class=FARRAM,space=0,reloc=2,delta=1,noexec
59:            	psect	nvFARRAM,class=FARRAM,space=0,reloc=2,delta=1,noexec
60:            	psect	fardata,class=FARRAM,space=0,reloc=2,delta=1,noexec
61:            	psect	ifardata,class=CODE,space=0,reloc=2,delta=1,noexec
62:            
63:            	psect	reset_vec,class=CODE,delta=1,reloc=2
64:            	psect	powerup,class=CODE,delta=1,reloc=2
65:            	psect	init,class=CODE,delta=1,reloc=2
66:            	psect	text,class=CODE,delta=1,reloc=2
67:            GLOBAL	intlevel0,intlevel1,intlevel2
68:            intlevel0:
69:            intlevel1:
70:            intlevel2:
71:            GLOBAL	intlevel3
72:            intlevel3:
73:            	psect	clrtext,class=CODE,delta=1,reloc=2
74:            
75:            	psect	intcode,class=CODE,delta=1,reloc=2
76:            	psect	intcode_body,class=CODE,delta=1,reloc=2
77:            	psect	intcodelo,class=CODE,delta=1,reloc=2
78:            	psect	intret,class=CODE,delta=1,reloc=2
79:            	psect	intentry,class=CODE,delta=1,reloc=2
80:            	psect	intsave_regs,class=BIGRAM,space=1
81:            
82:            	psect	smallconst
83:            	GLOBAL	__smallconst
84:            __smallconst:
85:            	psect	mediumconst
86:            	GLOBAL	__mediumconst
87:            __mediumconst:
88:            wreg	EQU	0FE8h
89:            fsr0l	EQU	0FE9h
90:            fsr0h	EQU	0FEAh
91:            fsr1l	EQU	0FE1h
92:            fsr1h	EQU	0FE2h
93:            fsr2l	EQU	0FD9h
94:            fsr2h	EQU	0FDAh
95:            postinc0	EQU	0FEEh
96:            postdec0	EQU	0FEDh
97:            postinc1	EQU	0FE6h
98:            postdec1	EQU	0FE5h
99:            postinc2	EQU	0FDEh
100:           postdec2	EQU	0FDDh
101:           tblptrl	EQU	0FF6h
102:           tblptrh	EQU	0FF7h
103:           tblptru	EQU	0FF8h
104:           tablat		EQU	0FF5h
105:           
106:           	PSECT	ramtop,class=RAM,noexec
107:           	GLOBAL	__S1			; top of RAM usage
108:           	GLOBAL	__ramtop
109:           	GLOBAL	__LRAM,__HRAM
110:           __ramtop:
111:           
112:           	psect	reset_vec
113:           reset_vec:
114:           	; No powerup routine
115:           	global start
116:           
117:           ; jump to start
118:           	goto start
0000  EFE4     GOTO 0x1C8
119:           	GLOBAL __accesstop
120:           __accesstop EQU 96
121:           
122:           ;Initialize the stack pointer (FSR1)
123:           	global stacklo, stackhi
124:           	stacklo	equ	0408h
125:           	stackhi	equ	0EAFh
126:           
127:           
128:           	psect	stack,class=STACK,space=2,noexec
129:           	global ___sp,___inthi_sp,___intlo_sp
130:           ___sp:
131:           ___inthi_sp:
132:           ___intlo_sp:
133:           
134:           
135:           
136:           	psect	init
137:           start:
138:           	global start_initialization
139:           	goto start_initialization	;jump to C runtime clear & initialization
01C8  EF84     GOTO 0x2108
140:           
141:           ; Config register CONFIG1L @ 0x1FFF8
142:           ;	Watchdog Timer
143:           ;	WDTEN = OFF, Disabled - Controlled by SWDTEN bit
144:           ;	96MHz PLL Prescaler Selection (PLLSEL=0)
145:           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
146:           ;	PLL Enable Configuration Bit
147:           ;	CFGPLLEN = ON, PLL Enabled
148:           ;	Stack Overflow/Underflow Reset
149:           ;	STVREN = ON, Enabled
150:           ;	Extended Instruction Set
151:           ;	XINST = OFF, Disabled
152:           
153:           	psect	config,class=CONFIG,delta=1,noexec
154:           		org 0x0
155:           		db 0xAC
156:           
157:           ; Config register CONFIG1H @ 0x1FFF9
158:           ;	Code Protect
159:           ;	CP0 = OFF, Program memory is not code-protected
160:           
161:           	psect	config,class=CONFIG,delta=1,noexec
162:           		org 0x1
163:           		db 0xF4
164:           
165:           ; Config register CONFIG2L @ 0x1FFFA
166:           ;	Oscillator
167:           ;	OSC = INTOSCPLL, INTOSCPLL
168:           ;	T1OSC/SOSC Power Selection Bits
169:           ;	SOSCSEL = DIG, Digital (SCLKI) mode selected
170:           ;	EC Clock Out Enable Bit
171:           ;	CLKOEC = OFF, CLKO output disabled on the RA6 pin
172:           ;	Fail-Safe Clock Monitor
173:           ;	FCMEN = ON, Enabled
174:           ;	Internal External Oscillator Switch Over Mode
175:           ;	IESO = OFF, Disabled
176:           
177:           	psect	config,class=CONFIG,delta=1,noexec
178:           		org 0x2
179:           		db 0x52
180:           
181:           ; Config register CONFIG2H @ 0x1FFFB
182:           ;	Watchdog Postscaler
183:           ;	WDTPS = 32768, 1:32768
184:           
185:           	psect	config,class=CONFIG,delta=1,noexec
186:           		org 0x3
187:           		db 0xFF
188:           
189:           ; Config register CONFIG3L @ 0x1FFFC
190:           ;	DSWDT Clock Select
191:           ;	DSWDTOSC = T1OSCREF, DSWDT uses T1OSC/T1CKI
192:           ;	RTCC Clock Select
193:           ;	RTCOSC = T1OSCREF, RTCC uses T1OSC/T1CKI
194:           ;	Deep Sleep BOR
195:           ;	DSBOREN = ON, Enabled
196:           ;	Deep Sleep Watchdog Timer
197:           ;	DSWDTEN = ON, Enabled
198:           ;	Deep Sleep Watchdog Postscaler
199:           ;	DSWDTPS = G2, 1:2,147,483,648 (25.7 days)
200:           
201:           	psect	config,class=CONFIG,delta=1,noexec
202:           		org 0x4
203:           		db 0xFE
204:           
205:           ; Config register CONFIG3H @ 0x1FFFD
206:           ;	IOLOCK One-Way Set Enable bit
207:           ;	IOL1WAY = ON, The IOLOCK bit (PPSCON<0>) can be set once
208:           ;	ADC 10 or 12 Bit Select
209:           ;	ADCSEL = BIT12, 12 - Bit ADC Enabled
210:           ;	PLL Selection Bit
211:           ;	PLLSEL = PLL96, Selects 96MHz PLL
212:           ;	MSSP address masking
213:           ;	MSSP7B_EN = MSK7, 7 Bit address masking mode
214:           
215:           	psect	config,class=CONFIG,delta=1,noexec
216:           		org 0x5
217:           		db 0xF9
218:           
219:           ; Config register CONFIG4L @ 0x1FFFE
220:           ;	Write/Erase Protect Page Start/End Location
221:           ;	WPFP = PAGE_127, Write Protect Program Flash Page 127
222:           ;	Write/Erase Protect Configuration Region
223:           ;	WPCFG = OFF, Configuration Words page not erase/write-protected
224:           
225:           	psect	config,class=CONFIG,delta=1,noexec
226:           		org 0x6
227:           		db 0xFF
228:           
229:           ; Config register CONFIG4H @ 0x1FFFF
230:           ;	Write Protect Disable bit
231:           ;	WPDIS = OFF, WPFP<6:0>/WPEND region ignored
232:           ;	Write/Erase Protect Region Select bit (valid when WPDIS = 0)
233:           ;	WPEND = PAGE_WPFP, Pages WPFP<6:0> through Configuration Words erase/write protected
234:           
235:           	psect	config,class=CONFIG,delta=1,noexec
236:           		org 0x7
237:           		db 0xF3
238:           
239:           
240:           psect comram,class=COMRAM,space=1
241:           psect abs1,class=ABS1,space=1
242:           psect bigram,class=BIGRAM,space=1
243:           psect ram,class=RAM,space=1
244:           psect bank0,class=BANK0,space=1
245:           psect bank1,class=BANK1,space=1
246:           psect bank2,class=BANK2,space=1
247:           psect bank3,class=BANK3,space=1
248:           psect bank4,class=BANK4,space=1
249:           psect bank5,class=BANK5,space=1
250:           psect bank6,class=BANK6,space=1
251:           psect bank7,class=BANK7,space=1
252:           psect bank8,class=BANK8,space=1
253:           psect bank9,class=BANK9,space=1
254:           psect bank10,class=BANK10,space=1
255:           psect bank11,class=BANK11,space=1
256:           psect bank12,class=BANK12,space=1
257:           psect bank13,class=BANK13,space=1
258:           psect bank14,class=BANK14,space=1
259:           psect sfr,class=SFR,space=1
260:           
261:           
262:           	end	start
---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/dist/default/debug/SmartModule.X.debug.as
1:             opt subtitle "Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102"
2:             
3:             opt pagewidth 120
4:             
5:             	opt pm
6:             
7:             	processor	18F27J13
8:             opt include "C:\Program Files (x86)\Microchip\xc8\v1.41\include\18f27j13.cgen.inc"
9:             clrc   macro
10:            	bcf	status,0
11:            endm
12:            setc   macro
13:            	bsf	status,0
14:            endm
15:            clrz   macro
16:            	bcf	status,2
17:            endm
18:            setz   macro
19:            	bsf	status,2
20:            endm
21:            skipnz macro
22:            	btfsc	status,2
23:            endm
24:            skipz  macro
25:            	btfss	status,2
26:            endm
27:            skipnc macro
28:            	btfsc	status,0
29:            endm
30:            skipc  macro
31:            	btfss	status,0
32:            endm
33:            pushw macro
34:            	movwf postinc1
35:            endm
36:            pushf macro arg1
37:            	movff arg1, postinc1
38:            endm
39:            popw macro
40:            	movf postdec1,f
41:            	movf indf1,w
42:            endm
43:            popf macro arg1
44:            	movf postdec1,f
45:            	movff indf1,arg1
46:            endm
47:            popfc macro arg1
48:            	movff plusw1,arg1
49:            	decfsz fsr1,f
50:            endm
51:            	global	__ramtop
52:            	global	__accesstop
53:            # 51 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
54:            ADCTRIG equ 0EB8h ;# 
55:            # 106 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
56:            PMDIS0 equ 0EB9h ;# 
57:            # 111 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
58:            PD0 equ 0EB9h ;# 
59:            # 411 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
60:            PMDIS1 equ 0EBAh ;# 
61:            # 416 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
62:            PD1 equ 0EBAh ;# 
63:            # 624 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
64:            PMDIS2 equ 0EBBh ;# 
65:            # 629 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
66:            PD2 equ 0EBBh ;# 
67:            # 833 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
68:            PMDIS3 equ 0EBCh ;# 
69:            # 838 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
70:            PD3 equ 0EBCh ;# 
71:            # 1070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
72:            PPSCON equ 0EBFh ;# 
73:            # 1089 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
74:            RPOR0 equ 0EC0h ;# 
75:            # 1095 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
76:            RPOR1 equ 0EC1h ;# 
77:            # 1101 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
78:            RPOR2 equ 0EC2h ;# 
79:            # 1107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
80:            RPOR3 equ 0EC3h ;# 
81:            # 1113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
82:            RPOR4 equ 0EC4h ;# 
83:            # 1119 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
84:            RPOR5 equ 0EC5h ;# 
85:            # 1125 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
86:            RPOR6 equ 0EC6h ;# 
87:            # 1131 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
88:            RPOR7 equ 0EC7h ;# 
89:            # 1137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
90:            RPOR8 equ 0EC8h ;# 
91:            # 1143 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
92:            RPOR9 equ 0EC9h ;# 
93:            # 1149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
94:            RPOR10 equ 0ECAh ;# 
95:            # 1155 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
96:            RPOR11 equ 0ECBh ;# 
97:            # 1161 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
98:            RPOR12 equ 0ECCh ;# 
99:            # 1167 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
100:           RPOR13 equ 0ECDh ;# 
101:           # 1173 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
102:           RPOR14 equ 0ECEh ;# 
103:           # 1179 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
104:           RPOR15 equ 0ECFh ;# 
105:           # 1185 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
106:           RPOR16 equ 0ED0h ;# 
107:           # 1191 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
108:           RPOR17 equ 0ED1h ;# 
109:           # 1197 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
110:           RPOR18 equ 0ED2h ;# 
111:           # 1203 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
112:           RPINR1 equ 0EE1h ;# 
113:           # 1209 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
114:           RPINR2 equ 0EE2h ;# 
115:           # 1215 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
116:           RPINR3 equ 0EE3h ;# 
117:           # 1221 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
118:           RPINR4 equ 0EE4h ;# 
119:           # 1227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
120:           RPINR6 equ 0EE6h ;# 
121:           # 1233 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
122:           RPINR15 equ 0EE7h ;# 
123:           # 1239 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
124:           RPINR7 equ 0EE8h ;# 
125:           # 1245 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
126:           RPINR8 equ 0EE9h ;# 
127:           # 1251 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
128:           RPINR9 equ 0EEAh ;# 
129:           # 1257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
130:           RPINR12 equ 0EF2h ;# 
131:           # 1263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
132:           RPINR13 equ 0EF3h ;# 
133:           # 1269 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
134:           RPINR14 equ 0EF4h ;# 
135:           # 1275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
136:           RPINR16 equ 0EF7h ;# 
137:           # 1281 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
138:           RPINR17 equ 0EF8h ;# 
139:           # 1287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
140:           RPINR21 equ 0EFCh ;# 
141:           # 1293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
142:           RPINR22 equ 0EFDh ;# 
143:           # 1299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
144:           RPINR23 equ 0EFEh ;# 
145:           # 1305 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
146:           RPINR24 equ 0EFFh ;# 
147:           # 1311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
148:           CCP10CON equ 0F00h ;# 
149:           # 1374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
150:           CCPR10L equ 0F01h ;# 
151:           # 1393 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
152:           CCPR10H equ 0F02h ;# 
153:           # 1412 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
154:           CCP9CON equ 0F03h ;# 
155:           # 1475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
156:           CCPR9L equ 0F04h ;# 
157:           # 1494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
158:           CCPR9H equ 0F05h ;# 
159:           # 1513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
160:           CCP8CON equ 0F06h ;# 
161:           # 1576 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
162:           CCPR8L equ 0F07h ;# 
163:           # 1595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
164:           CCPR8H equ 0F08h ;# 
165:           # 1614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
166:           CCP7CON equ 0F09h ;# 
167:           # 1677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
168:           CCPR7L equ 0F0Ah ;# 
169:           # 1696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
170:           CCPR7H equ 0F0Bh ;# 
171:           # 1715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
172:           CCP6CON equ 0F0Ch ;# 
173:           # 1778 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
174:           CCPR6L equ 0F0Dh ;# 
175:           # 1797 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
176:           CCPR6H equ 0F0Eh ;# 
177:           # 1816 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
178:           CCP5CON equ 0F0Fh ;# 
179:           # 1879 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
180:           CCPR5L equ 0F10h ;# 
181:           # 1898 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
182:           CCPR5H equ 0F11h ;# 
183:           # 1917 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
184:           CCP4CON equ 0F12h ;# 
185:           # 1980 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
186:           CCPR4L equ 0F13h ;# 
187:           # 1999 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
188:           CCPR4H equ 0F14h ;# 
189:           # 2018 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
190:           CCP3CON equ 0F15h ;# 
191:           # 2099 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
192:           CCPR3L equ 0F16h ;# 
193:           # 2118 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
194:           CCPR3H equ 0F17h ;# 
195:           # 2137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
196:           ECCP3DEL equ 0F18h ;# 
197:           # 2206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
198:           ECCP3AS equ 0F19h ;# 
199:           # 2287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
200:           PSTR3CON equ 0F1Ah ;# 
201:           # 2397 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
202:           T8CON equ 0F1Bh ;# 
203:           # 2467 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
204:           PR8 equ 0F1Ch ;# 
205:           # 2486 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
206:           TMR8 equ 0F1Dh ;# 
207:           # 2505 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
208:           T6CON equ 0F1Eh ;# 
209:           # 2575 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
210:           PR6 equ 0F1Fh ;# 
211:           # 2594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
212:           TMR6 equ 0F20h ;# 
213:           # 2613 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
214:           T5GCON equ 0F21h ;# 
215:           # 2725 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
216:           T5CON equ 0F22h ;# 
217:           # 2826 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
218:           TMR5L equ 0F23h ;# 
219:           # 2845 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
220:           TMR5H equ 0F24h ;# 
221:           # 2864 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
222:           CM3CON equ 0F25h ;# 
223:           # 2990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
224:           RTCVALL equ 0F3Ah ;# 
225:           # 3009 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
226:           RTCVALH equ 0F3Bh ;# 
227:           # 3078 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
228:           PADCFG1 equ 0F3Ch ;# 
229:           # 3104 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
230:           REFOCON equ 0F3Dh ;# 
231:           # 3168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
232:           RTCCAL equ 0F3Eh ;# 
233:           # 3237 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
234:           RTCCFG equ 0F3Fh ;# 
235:           # 3293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
236:           ODCON3 equ 0F40h ;# 
237:           # 3325 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
238:           ODCON2 equ 0F41h ;# 
239:           # 3362 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
240:           ODCON1 equ 0F42h ;# 
241:           # 3423 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
242:           ALRMVALL equ 0F44h ;# 
243:           # 3442 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
244:           ALRMVALH equ 0F45h ;# 
245:           # 3461 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
246:           ALRMRPT equ 0F46h ;# 
247:           # 3530 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
248:           ALRMCFG equ 0F47h ;# 
249:           # 3605 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
250:           ANCON0 equ 0F48h ;# 
251:           # 3648 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
252:           ANCON1 equ 0F49h ;# 
253:           # 3707 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
254:           DSWAKEL equ 0F4Ah ;# 
255:           # 3758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
256:           DSWAKEH equ 0F4Bh ;# 
257:           # 3777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
258:           DSCONL equ 0F4Ch ;# 
259:           # 3808 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
260:           DSCONH equ 0F4Dh ;# 
261:           # 3840 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
262:           DSGPR0 equ 0F4Eh ;# 
263:           # 3859 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
264:           DSGPR1 equ 0F4Fh ;# 
265:           # 3878 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
266:           CCPTMRS2 equ 0F50h ;# 
267:           # 3924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
268:           CCPTMRS1 equ 0F51h ;# 
269:           # 3990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
270:           CCPTMRS0 equ 0F52h ;# 
271:           # 4071 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
272:           CVRCON equ 0F53h ;# 
273:           # 4149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
274:           DMABCH equ 0F66h ;# 
275:           # 4168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
276:           DMABCL equ 0F67h ;# 
277:           # 4187 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
278:           RXADDRH equ 0F68h ;# 
279:           # 4206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
280:           RXADDRL equ 0F69h ;# 
281:           # 4225 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
282:           TXADDRH equ 0F6Ah ;# 
283:           # 4244 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
284:           TXADDRL equ 0F6Bh ;# 
285:           # 4263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
286:           CMSTAT equ 0F70h ;# 
287:           # 4268 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
288:           CMSTATUS equ 0F70h ;# 
289:           # 4324 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
290:           SSP2CON2 equ 0F71h ;# 
291:           # 4501 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
292:           SSP2CON1 equ 0F72h ;# 
293:           # 4620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
294:           SSP2STAT equ 0F73h ;# 
295:           # 4921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
296:           SSP2ADD equ 0F74h ;# 
297:           # 4990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
298:           SSP2MSK equ 0F74h ;# 
299:           # 5051 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
300:           SSP2BUF equ 0F75h ;# 
301:           # 5070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
302:           T4CON equ 0F76h ;# 
303:           # 5140 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
304:           PR4 equ 0F77h ;# 
305:           # 5159 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
306:           TMR4 equ 0F78h ;# 
307:           # 5178 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
308:           T3CON equ 0F79h ;# 
309:           # 5288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
310:           TMR3 equ 0F7Ah ;# 
311:           # 5294 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
312:           TMR3L equ 0F7Ah ;# 
313:           # 5313 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
314:           TMR3H equ 0F7Bh ;# 
315:           # 5332 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
316:           BAUDCON2 equ 0F7Ch ;# 
317:           # 5454 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
318:           SPBRGH2 equ 0F7Dh ;# 
319:           # 5473 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
320:           BAUDCON1 equ 0F7Eh ;# 
321:           # 5478 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
322:           BAUDCON equ 0F7Eh ;# 
323:           # 5482 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
324:           BAUDCTL equ 0F7Eh ;# 
325:           # 5979 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
326:           SPBRGH1 equ 0F7Fh ;# 
327:           # 5984 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
328:           SPBRGH equ 0F7Fh ;# 
329:           # 6016 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
330:           PORTA equ 0F80h ;# 
331:           # 6278 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
332:           PORTB equ 0F81h ;# 
333:           # 6564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
334:           PORTC equ 0F82h ;# 
335:           # 6819 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
336:           HLVDCON equ 0F85h ;# 
337:           # 6888 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
338:           DMACON2 equ 0F86h ;# 
339:           # 6963 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
340:           OSCCON2 equ 0F87h ;# 
341:           # 7002 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
342:           DMACON1 equ 0F88h ;# 
343:           # 7063 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
344:           LATA equ 0F89h ;# 
345:           # 7164 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
346:           LATB equ 0F8Ah ;# 
347:           # 7275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
348:           LATC equ 0F8Bh ;# 
349:           # 7386 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
350:           PIE4 equ 0F8Eh ;# 
351:           # 7447 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
352:           PIR4 equ 0F8Fh ;# 
353:           # 7508 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
354:           IPR4 equ 0F90h ;# 
355:           # 7577 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
356:           PIE5 equ 0F91h ;# 
357:           # 7626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
358:           TRISA equ 0F92h ;# 
359:           # 7682 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
360:           TRISB equ 0F93h ;# 
361:           # 7743 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
362:           TRISC equ 0F94h ;# 
363:           # 7804 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
364:           T3GCON equ 0F97h ;# 
365:           # 7883 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
366:           PIR5 equ 0F98h ;# 
367:           # 7932 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
368:           IPR5 equ 0F99h ;# 
369:           # 8008 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
370:           T1GCON equ 0F9Ah ;# 
371:           # 8114 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
372:           OSCTUNE equ 0F9Bh ;# 
373:           # 8183 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
374:           RCSTA2 equ 0F9Ch ;# 
375:           # 8318 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
376:           PIE1 equ 0F9Dh ;# 
377:           # 8394 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
378:           PIR1 equ 0F9Eh ;# 
379:           # 8470 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
380:           IPR1 equ 0F9Fh ;# 
381:           # 8546 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
382:           PIE2 equ 0FA0h ;# 
383:           # 8626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
384:           PIR2 equ 0FA1h ;# 
385:           # 8706 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
386:           IPR2 equ 0FA2h ;# 
387:           # 8786 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
388:           PIE3 equ 0FA3h ;# 
389:           # 8895 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
390:           PIR3 equ 0FA4h ;# 
391:           # 8972 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
392:           IPR3 equ 0FA5h ;# 
393:           # 9049 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
394:           EECON1 equ 0FA6h ;# 
395:           # 9093 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
396:           EECON2 equ 0FA7h ;# 
397:           # 9112 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
398:           TXSTA2 equ 0FA8h ;# 
399:           # 9238 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
400:           TXREG2 equ 0FA9h ;# 
401:           # 9257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
402:           RCREG2 equ 0FAAh ;# 
403:           # 9276 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
404:           SPBRG2 equ 0FABh ;# 
405:           # 9295 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
406:           RCSTA1 equ 0FACh ;# 
407:           # 9300 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
408:           RCSTA equ 0FACh ;# 
409:           # 9632 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
410:           TXSTA1 equ 0FADh ;# 
411:           # 9637 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
412:           TXSTA equ 0FADh ;# 
413:           # 9919 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
414:           TXREG1 equ 0FAEh ;# 
415:           # 9924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
416:           TXREG equ 0FAEh ;# 
417:           # 9956 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
418:           RCREG1 equ 0FAFh ;# 
419:           # 9961 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
420:           RCREG equ 0FAFh ;# 
421:           # 9993 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
422:           SPBRG1 equ 0FB0h ;# 
423:           # 9998 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
424:           SPBRG equ 0FB0h ;# 
425:           # 10030 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
426:           CTMUICON equ 0FB1h ;# 
427:           # 10105 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
428:           CTMUCONL equ 0FB2h ;# 
429:           # 10166 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
430:           CTMUCONH equ 0FB3h ;# 
431:           # 10222 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
432:           CCP2CON equ 0FB4h ;# 
433:           # 10227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
434:           ECCP2CON equ 0FB4h ;# 
435:           # 10413 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
436:           CCPR2 equ 0FB5h ;# 
437:           # 10419 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
438:           CCPR2L equ 0FB5h ;# 
439:           # 10438 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
440:           CCPR2H equ 0FB6h ;# 
441:           # 10457 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
442:           ECCP2DEL equ 0FB7h ;# 
443:           # 10462 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
444:           PWM2CON equ 0FB7h ;# 
445:           # 10594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
446:           ECCP2AS equ 0FB8h ;# 
447:           # 10675 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
448:           PSTR2CON equ 0FB9h ;# 
449:           # 10916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
450:           CCP1CON equ 0FBAh ;# 
451:           # 10921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
452:           ECCP1CON equ 0FBAh ;# 
453:           # 11107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
454:           CCPR1 equ 0FBBh ;# 
455:           # 11113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
456:           CCPR1L equ 0FBBh ;# 
457:           # 11132 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
458:           CCPR1H equ 0FBCh ;# 
459:           # 11151 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
460:           ECCP1DEL equ 0FBDh ;# 
461:           # 11156 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
462:           PWM1CON equ 0FBDh ;# 
463:           # 11288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
464:           ECCP1AS equ 0FBEh ;# 
465:           # 11369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
466:           PSTR1CON equ 0FBFh ;# 
467:           # 11425 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
468:           WDTCON equ 0FC0h ;# 
469:           # 11494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
470:           ADCON1 equ 0FC1h ;# 
471:           # 11590 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
472:           ADCON0 equ 0FC2h ;# 
473:           # 11733 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
474:           ADRES equ 0FC3h ;# 
475:           # 11739 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
476:           ADRESL equ 0FC3h ;# 
477:           # 11758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
478:           ADRESH equ 0FC4h ;# 
479:           # 11777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
480:           SSP1CON2 equ 0FC5h ;# 
481:           # 11782 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
482:           SSPCON2 equ 0FC5h ;# 
483:           # 12130 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
484:           SSP1CON1 equ 0FC6h ;# 
485:           # 12135 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
486:           SSPCON1 equ 0FC6h ;# 
487:           # 12367 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
488:           SSP1STAT equ 0FC7h ;# 
489:           # 12372 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
490:           SSPSTAT equ 0FC7h ;# 
491:           # 12964 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
492:           SSP1ADD equ 0FC8h ;# 
493:           # 12969 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
494:           SSPADD equ 0FC8h ;# 
495:           # 13201 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
496:           SSP1MSK equ 0FC8h ;# 
497:           # 13262 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
498:           SSP1BUF equ 0FC9h ;# 
499:           # 13267 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
500:           SSPBUF equ 0FC9h ;# 
501:           # 13299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
502:           T2CON equ 0FCAh ;# 
503:           # 13369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
504:           PR2 equ 0FCBh ;# 
505:           # 13374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
506:           MEMCON equ 0FCBh ;# 
507:           # 13494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
508:           TMR2 equ 0FCCh ;# 
509:           # 13513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
510:           T1CON equ 0FCDh ;# 
511:           # 13614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
512:           TMR1 equ 0FCEh ;# 
513:           # 13620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
514:           TMR1L equ 0FCEh ;# 
515:           # 13639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
516:           TMR1H equ 0FCFh ;# 
517:           # 13658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
518:           RCON equ 0FD0h ;# 
519:           # 13805 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
520:           CM2CON equ 0FD1h ;# 
521:           # 13810 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
522:           CM2CON1 equ 0FD1h ;# 
523:           # 14056 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
524:           CM1CON equ 0FD2h ;# 
525:           # 14061 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
526:           CM1CON1 equ 0FD2h ;# 
527:           # 14335 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
528:           OSCCON equ 0FD3h ;# 
529:           # 14406 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
530:           T0CON equ 0FD5h ;# 
531:           # 14475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
532:           TMR0 equ 0FD6h ;# 
533:           # 14481 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
534:           TMR0L equ 0FD6h ;# 
535:           # 14500 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
536:           TMR0H equ 0FD7h ;# 
537:           # 14519 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
538:           STATUS equ 0FD8h ;# 
539:           # 14589 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
540:           FSR2 equ 0FD9h ;# 
541:           # 14595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
542:           FSR2L equ 0FD9h ;# 
543:           # 14614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
544:           FSR2H equ 0FDAh ;# 
545:           # 14620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
546:           PLUSW2 equ 0FDBh ;# 
547:           # 14639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
548:           PREINC2 equ 0FDCh ;# 
549:           # 14658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
550:           POSTDEC2 equ 0FDDh ;# 
551:           # 14677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
552:           POSTINC2 equ 0FDEh ;# 
553:           # 14696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
554:           INDF2 equ 0FDFh ;# 
555:           # 14715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
556:           BSR equ 0FE0h ;# 
557:           # 14721 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
558:           FSR1 equ 0FE1h ;# 
559:           # 14727 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
560:           FSR1L equ 0FE1h ;# 
561:           # 14746 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
562:           FSR1H equ 0FE2h ;# 
563:           # 14752 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
564:           PLUSW1 equ 0FE3h ;# 
565:           # 14771 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
566:           PREINC1 equ 0FE4h ;# 
567:           # 14790 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
568:           POSTDEC1 equ 0FE5h ;# 
569:           # 14809 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
570:           POSTINC1 equ 0FE6h ;# 
571:           # 14828 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
572:           INDF1 equ 0FE7h ;# 
573:           # 14847 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
574:           WREG equ 0FE8h ;# 
575:           # 14866 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
576:           FSR0 equ 0FE9h ;# 
577:           # 14872 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
578:           FSR0L equ 0FE9h ;# 
579:           # 14891 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
580:           FSR0H equ 0FEAh ;# 
581:           # 14897 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
582:           PLUSW0 equ 0FEBh ;# 
583:           # 14916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
584:           PREINC0 equ 0FECh ;# 
585:           # 14935 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
586:           POSTDEC0 equ 0FEDh ;# 
587:           # 14954 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
588:           POSTINC0 equ 0FEEh ;# 
589:           # 14973 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
590:           INDF0 equ 0FEFh ;# 
591:           # 14992 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
592:           INTCON3 equ 0FF0h ;# 
593:           # 15103 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
594:           INTCON2 equ 0FF1h ;# 
595:           # 15195 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
596:           INTCON equ 0FF2h ;# 
597:           # 15311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
598:           PROD equ 0FF3h ;# 
599:           # 15317 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
600:           PRODL equ 0FF3h ;# 
601:           # 15336 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
602:           PRODH equ 0FF4h ;# 
603:           # 15355 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
604:           TABLAT equ 0FF5h ;# 
605:           # 15376 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
606:           TBLPTR equ 0FF6h ;# 
607:           # 15382 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
608:           TBLPTRL equ 0FF6h ;# 
609:           # 15401 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
610:           TBLPTRH equ 0FF7h ;# 
611:           # 15420 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
612:           TBLPTRU equ 0FF8h ;# 
613:           # 15428 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
614:           PCLAT equ 0FF9h ;# 
615:           # 15435 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
616:           PC equ 0FF9h ;# 
617:           # 15441 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
618:           PCL equ 0FF9h ;# 
619:           # 15460 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
620:           PCLATH equ 0FFAh ;# 
621:           # 15479 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
622:           PCLATU equ 0FFBh ;# 
623:           # 15485 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
624:           STKPTR equ 0FFCh ;# 
625:           # 15558 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
626:           TOS equ 0FFDh ;# 
627:           # 15564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
628:           TOSL equ 0FFDh ;# 
629:           # 15583 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
630:           TOSH equ 0FFEh ;# 
631:           # 15602 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
632:           TOSU equ 0FFFh ;# 
633:           # 51 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
634:           ADCTRIG equ 0EB8h ;# 
635:           # 106 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
636:           PMDIS0 equ 0EB9h ;# 
637:           # 111 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
638:           PD0 equ 0EB9h ;# 
639:           # 411 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
640:           PMDIS1 equ 0EBAh ;# 
641:           # 416 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
642:           PD1 equ 0EBAh ;# 
643:           # 624 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
644:           PMDIS2 equ 0EBBh ;# 
645:           # 629 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
646:           PD2 equ 0EBBh ;# 
647:           # 833 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
648:           PMDIS3 equ 0EBCh ;# 
649:           # 838 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
650:           PD3 equ 0EBCh ;# 
651:           # 1070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
652:           PPSCON equ 0EBFh ;# 
653:           # 1089 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
654:           RPOR0 equ 0EC0h ;# 
655:           # 1095 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
656:           RPOR1 equ 0EC1h ;# 
657:           # 1101 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
658:           RPOR2 equ 0EC2h ;# 
659:           # 1107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
660:           RPOR3 equ 0EC3h ;# 
661:           # 1113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
662:           RPOR4 equ 0EC4h ;# 
663:           # 1119 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
664:           RPOR5 equ 0EC5h ;# 
665:           # 1125 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
666:           RPOR6 equ 0EC6h ;# 
667:           # 1131 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
668:           RPOR7 equ 0EC7h ;# 
669:           # 1137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
670:           RPOR8 equ 0EC8h ;# 
671:           # 1143 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
672:           RPOR9 equ 0EC9h ;# 
673:           # 1149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
674:           RPOR10 equ 0ECAh ;# 
675:           # 1155 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
676:           RPOR11 equ 0ECBh ;# 
677:           # 1161 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
678:           RPOR12 equ 0ECCh ;# 
679:           # 1167 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
680:           RPOR13 equ 0ECDh ;# 
681:           # 1173 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
682:           RPOR14 equ 0ECEh ;# 
683:           # 1179 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
684:           RPOR15 equ 0ECFh ;# 
685:           # 1185 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
686:           RPOR16 equ 0ED0h ;# 
687:           # 1191 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
688:           RPOR17 equ 0ED1h ;# 
689:           # 1197 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
690:           RPOR18 equ 0ED2h ;# 
691:           # 1203 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
692:           RPINR1 equ 0EE1h ;# 
693:           # 1209 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
694:           RPINR2 equ 0EE2h ;# 
695:           # 1215 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
696:           RPINR3 equ 0EE3h ;# 
697:           # 1221 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
698:           RPINR4 equ 0EE4h ;# 
699:           # 1227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
700:           RPINR6 equ 0EE6h ;# 
701:           # 1233 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
702:           RPINR15 equ 0EE7h ;# 
703:           # 1239 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
704:           RPINR7 equ 0EE8h ;# 
705:           # 1245 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
706:           RPINR8 equ 0EE9h ;# 
707:           # 1251 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
708:           RPINR9 equ 0EEAh ;# 
709:           # 1257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
710:           RPINR12 equ 0EF2h ;# 
711:           # 1263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
712:           RPINR13 equ 0EF3h ;# 
713:           # 1269 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
714:           RPINR14 equ 0EF4h ;# 
715:           # 1275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
716:           RPINR16 equ 0EF7h ;# 
717:           # 1281 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
718:           RPINR17 equ 0EF8h ;# 
719:           # 1287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
720:           RPINR21 equ 0EFCh ;# 
721:           # 1293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
722:           RPINR22 equ 0EFDh ;# 
723:           # 1299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
724:           RPINR23 equ 0EFEh ;# 
725:           # 1305 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
726:           RPINR24 equ 0EFFh ;# 
727:           # 1311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
728:           CCP10CON equ 0F00h ;# 
729:           # 1374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
730:           CCPR10L equ 0F01h ;# 
731:           # 1393 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
732:           CCPR10H equ 0F02h ;# 
733:           # 1412 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
734:           CCP9CON equ 0F03h ;# 
735:           # 1475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
736:           CCPR9L equ 0F04h ;# 
737:           # 1494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
738:           CCPR9H equ 0F05h ;# 
739:           # 1513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
740:           CCP8CON equ 0F06h ;# 
741:           # 1576 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
742:           CCPR8L equ 0F07h ;# 
743:           # 1595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
744:           CCPR8H equ 0F08h ;# 
745:           # 1614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
746:           CCP7CON equ 0F09h ;# 
747:           # 1677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
748:           CCPR7L equ 0F0Ah ;# 
749:           # 1696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
750:           CCPR7H equ 0F0Bh ;# 
751:           # 1715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
752:           CCP6CON equ 0F0Ch ;# 
753:           # 1778 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
754:           CCPR6L equ 0F0Dh ;# 
755:           # 1797 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
756:           CCPR6H equ 0F0Eh ;# 
757:           # 1816 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
758:           CCP5CON equ 0F0Fh ;# 
759:           # 1879 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
760:           CCPR5L equ 0F10h ;# 
761:           # 1898 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
762:           CCPR5H equ 0F11h ;# 
763:           # 1917 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
764:           CCP4CON equ 0F12h ;# 
765:           # 1980 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
766:           CCPR4L equ 0F13h ;# 
767:           # 1999 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
768:           CCPR4H equ 0F14h ;# 
769:           # 2018 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
770:           CCP3CON equ 0F15h ;# 
771:           # 2099 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
772:           CCPR3L equ 0F16h ;# 
773:           # 2118 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
774:           CCPR3H equ 0F17h ;# 
775:           # 2137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
776:           ECCP3DEL equ 0F18h ;# 
777:           # 2206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
778:           ECCP3AS equ 0F19h ;# 
779:           # 2287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
780:           PSTR3CON equ 0F1Ah ;# 
781:           # 2397 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
782:           T8CON equ 0F1Bh ;# 
783:           # 2467 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
784:           PR8 equ 0F1Ch ;# 
785:           # 2486 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
786:           TMR8 equ 0F1Dh ;# 
787:           # 2505 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
788:           T6CON equ 0F1Eh ;# 
789:           # 2575 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
790:           PR6 equ 0F1Fh ;# 
791:           # 2594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
792:           TMR6 equ 0F20h ;# 
793:           # 2613 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
794:           T5GCON equ 0F21h ;# 
795:           # 2725 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
796:           T5CON equ 0F22h ;# 
797:           # 2826 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
798:           TMR5L equ 0F23h ;# 
799:           # 2845 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
800:           TMR5H equ 0F24h ;# 
801:           # 2864 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
802:           CM3CON equ 0F25h ;# 
803:           # 2990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
804:           RTCVALL equ 0F3Ah ;# 
805:           # 3009 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
806:           RTCVALH equ 0F3Bh ;# 
807:           # 3078 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
808:           PADCFG1 equ 0F3Ch ;# 
809:           # 3104 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
810:           REFOCON equ 0F3Dh ;# 
811:           # 3168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
812:           RTCCAL equ 0F3Eh ;# 
813:           # 3237 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
814:           RTCCFG equ 0F3Fh ;# 
815:           # 3293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
816:           ODCON3 equ 0F40h ;# 
817:           # 3325 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
818:           ODCON2 equ 0F41h ;# 
819:           # 3362 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
820:           ODCON1 equ 0F42h ;# 
821:           # 3423 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
822:           ALRMVALL equ 0F44h ;# 
823:           # 3442 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
824:           ALRMVALH equ 0F45h ;# 
825:           # 3461 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
826:           ALRMRPT equ 0F46h ;# 
827:           # 3530 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
828:           ALRMCFG equ 0F47h ;# 
829:           # 3605 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
830:           ANCON0 equ 0F48h ;# 
831:           # 3648 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
832:           ANCON1 equ 0F49h ;# 
833:           # 3707 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
834:           DSWAKEL equ 0F4Ah ;# 
835:           # 3758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
836:           DSWAKEH equ 0F4Bh ;# 
837:           # 3777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
838:           DSCONL equ 0F4Ch ;# 
839:           # 3808 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
840:           DSCONH equ 0F4Dh ;# 
841:           # 3840 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
842:           DSGPR0 equ 0F4Eh ;# 
843:           # 3859 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
844:           DSGPR1 equ 0F4Fh ;# 
845:           # 3878 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
846:           CCPTMRS2 equ 0F50h ;# 
847:           # 3924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
848:           CCPTMRS1 equ 0F51h ;# 
849:           # 3990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
850:           CCPTMRS0 equ 0F52h ;# 
851:           # 4071 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
852:           CVRCON equ 0F53h ;# 
853:           # 4149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
854:           DMABCH equ 0F66h ;# 
855:           # 4168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
856:           DMABCL equ 0F67h ;# 
857:           # 4187 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
858:           RXADDRH equ 0F68h ;# 
859:           # 4206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
860:           RXADDRL equ 0F69h ;# 
861:           # 4225 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
862:           TXADDRH equ 0F6Ah ;# 
863:           # 4244 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
864:           TXADDRL equ 0F6Bh ;# 
865:           # 4263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
866:           CMSTAT equ 0F70h ;# 
867:           # 4268 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
868:           CMSTATUS equ 0F70h ;# 
869:           # 4324 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
870:           SSP2CON2 equ 0F71h ;# 
871:           # 4501 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
872:           SSP2CON1 equ 0F72h ;# 
873:           # 4620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
874:           SSP2STAT equ 0F73h ;# 
875:           # 4921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
876:           SSP2ADD equ 0F74h ;# 
877:           # 4990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
878:           SSP2MSK equ 0F74h ;# 
879:           # 5051 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
880:           SSP2BUF equ 0F75h ;# 
881:           # 5070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
882:           T4CON equ 0F76h ;# 
883:           # 5140 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
884:           PR4 equ 0F77h ;# 
885:           # 5159 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
886:           TMR4 equ 0F78h ;# 
887:           # 5178 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
888:           T3CON equ 0F79h ;# 
889:           # 5288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
890:           TMR3 equ 0F7Ah ;# 
891:           # 5294 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
892:           TMR3L equ 0F7Ah ;# 
893:           # 5313 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
894:           TMR3H equ 0F7Bh ;# 
895:           # 5332 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
896:           BAUDCON2 equ 0F7Ch ;# 
897:           # 5454 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
898:           SPBRGH2 equ 0F7Dh ;# 
899:           # 5473 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
900:           BAUDCON1 equ 0F7Eh ;# 
901:           # 5478 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
902:           BAUDCON equ 0F7Eh ;# 
903:           # 5482 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
904:           BAUDCTL equ 0F7Eh ;# 
905:           # 5979 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
906:           SPBRGH1 equ 0F7Fh ;# 
907:           # 5984 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
908:           SPBRGH equ 0F7Fh ;# 
909:           # 6016 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
910:           PORTA equ 0F80h ;# 
911:           # 6278 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
912:           PORTB equ 0F81h ;# 
913:           # 6564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
914:           PORTC equ 0F82h ;# 
915:           # 6819 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
916:           HLVDCON equ 0F85h ;# 
917:           # 6888 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
918:           DMACON2 equ 0F86h ;# 
919:           # 6963 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
920:           OSCCON2 equ 0F87h ;# 
921:           # 7002 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
922:           DMACON1 equ 0F88h ;# 
923:           # 7063 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
924:           LATA equ 0F89h ;# 
925:           # 7164 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
926:           LATB equ 0F8Ah ;# 
927:           # 7275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
928:           LATC equ 0F8Bh ;# 
929:           # 7386 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
930:           PIE4 equ 0F8Eh ;# 
931:           # 7447 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
932:           PIR4 equ 0F8Fh ;# 
933:           # 7508 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
934:           IPR4 equ 0F90h ;# 
935:           # 7577 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
936:           PIE5 equ 0F91h ;# 
937:           # 7626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
938:           TRISA equ 0F92h ;# 
939:           # 7682 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
940:           TRISB equ 0F93h ;# 
941:           # 7743 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
942:           TRISC equ 0F94h ;# 
943:           # 7804 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
944:           T3GCON equ 0F97h ;# 
945:           # 7883 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
946:           PIR5 equ 0F98h ;# 
947:           # 7932 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
948:           IPR5 equ 0F99h ;# 
949:           # 8008 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
950:           T1GCON equ 0F9Ah ;# 
951:           # 8114 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
952:           OSCTUNE equ 0F9Bh ;# 
953:           # 8183 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
954:           RCSTA2 equ 0F9Ch ;# 
955:           # 8318 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
956:           PIE1 equ 0F9Dh ;# 
957:           # 8394 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
958:           PIR1 equ 0F9Eh ;# 
959:           # 8470 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
960:           IPR1 equ 0F9Fh ;# 
961:           # 8546 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
962:           PIE2 equ 0FA0h ;# 
963:           # 8626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
964:           PIR2 equ 0FA1h ;# 
965:           # 8706 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
966:           IPR2 equ 0FA2h ;# 
967:           # 8786 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
968:           PIE3 equ 0FA3h ;# 
969:           # 8895 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
970:           PIR3 equ 0FA4h ;# 
971:           # 8972 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
972:           IPR3 equ 0FA5h ;# 
973:           # 9049 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
974:           EECON1 equ 0FA6h ;# 
975:           # 9093 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
976:           EECON2 equ 0FA7h ;# 
977:           # 9112 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
978:           TXSTA2 equ 0FA8h ;# 
979:           # 9238 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
980:           TXREG2 equ 0FA9h ;# 
981:           # 9257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
982:           RCREG2 equ 0FAAh ;# 
983:           # 9276 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
984:           SPBRG2 equ 0FABh ;# 
985:           # 9295 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
986:           RCSTA1 equ 0FACh ;# 
987:           # 9300 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
988:           RCSTA equ 0FACh ;# 
989:           # 9632 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
990:           TXSTA1 equ 0FADh ;# 
991:           # 9637 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
992:           TXSTA equ 0FADh ;# 
993:           # 9919 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
994:           TXREG1 equ 0FAEh ;# 
995:           # 9924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
996:           TXREG equ 0FAEh ;# 
997:           # 9956 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
998:           RCREG1 equ 0FAFh ;# 
999:           # 9961 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1000:          RCREG equ 0FAFh ;# 
1001:          # 9993 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1002:          SPBRG1 equ 0FB0h ;# 
1003:          # 9998 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1004:          SPBRG equ 0FB0h ;# 
1005:          # 10030 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1006:          CTMUICON equ 0FB1h ;# 
1007:          # 10105 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1008:          CTMUCONL equ 0FB2h ;# 
1009:          # 10166 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1010:          CTMUCONH equ 0FB3h ;# 
1011:          # 10222 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1012:          CCP2CON equ 0FB4h ;# 
1013:          # 10227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1014:          ECCP2CON equ 0FB4h ;# 
1015:          # 10413 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1016:          CCPR2 equ 0FB5h ;# 
1017:          # 10419 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1018:          CCPR2L equ 0FB5h ;# 
1019:          # 10438 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1020:          CCPR2H equ 0FB6h ;# 
1021:          # 10457 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1022:          ECCP2DEL equ 0FB7h ;# 
1023:          # 10462 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1024:          PWM2CON equ 0FB7h ;# 
1025:          # 10594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1026:          ECCP2AS equ 0FB8h ;# 
1027:          # 10675 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1028:          PSTR2CON equ 0FB9h ;# 
1029:          # 10916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1030:          CCP1CON equ 0FBAh ;# 
1031:          # 10921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1032:          ECCP1CON equ 0FBAh ;# 
1033:          # 11107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1034:          CCPR1 equ 0FBBh ;# 
1035:          # 11113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1036:          CCPR1L equ 0FBBh ;# 
1037:          # 11132 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1038:          CCPR1H equ 0FBCh ;# 
1039:          # 11151 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1040:          ECCP1DEL equ 0FBDh ;# 
1041:          # 11156 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1042:          PWM1CON equ 0FBDh ;# 
1043:          # 11288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1044:          ECCP1AS equ 0FBEh ;# 
1045:          # 11369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1046:          PSTR1CON equ 0FBFh ;# 
1047:          # 11425 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1048:          WDTCON equ 0FC0h ;# 
1049:          # 11494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1050:          ADCON1 equ 0FC1h ;# 
1051:          # 11590 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1052:          ADCON0 equ 0FC2h ;# 
1053:          # 11733 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1054:          ADRES equ 0FC3h ;# 
1055:          # 11739 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1056:          ADRESL equ 0FC3h ;# 
1057:          # 11758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1058:          ADRESH equ 0FC4h ;# 
1059:          # 11777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1060:          SSP1CON2 equ 0FC5h ;# 
1061:          # 11782 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1062:          SSPCON2 equ 0FC5h ;# 
1063:          # 12130 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1064:          SSP1CON1 equ 0FC6h ;# 
1065:          # 12135 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1066:          SSPCON1 equ 0FC6h ;# 
1067:          # 12367 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1068:          SSP1STAT equ 0FC7h ;# 
1069:          # 12372 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1070:          SSPSTAT equ 0FC7h ;# 
1071:          # 12964 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1072:          SSP1ADD equ 0FC8h ;# 
1073:          # 12969 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1074:          SSPADD equ 0FC8h ;# 
1075:          # 13201 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1076:          SSP1MSK equ 0FC8h ;# 
1077:          # 13262 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1078:          SSP1BUF equ 0FC9h ;# 
1079:          # 13267 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1080:          SSPBUF equ 0FC9h ;# 
1081:          # 13299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1082:          T2CON equ 0FCAh ;# 
1083:          # 13369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1084:          PR2 equ 0FCBh ;# 
1085:          # 13374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1086:          MEMCON equ 0FCBh ;# 
1087:          # 13494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1088:          TMR2 equ 0FCCh ;# 
1089:          # 13513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1090:          T1CON equ 0FCDh ;# 
1091:          # 13614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1092:          TMR1 equ 0FCEh ;# 
1093:          # 13620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1094:          TMR1L equ 0FCEh ;# 
1095:          # 13639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1096:          TMR1H equ 0FCFh ;# 
1097:          # 13658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1098:          RCON equ 0FD0h ;# 
1099:          # 13805 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1100:          CM2CON equ 0FD1h ;# 
1101:          # 13810 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1102:          CM2CON1 equ 0FD1h ;# 
1103:          # 14056 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1104:          CM1CON equ 0FD2h ;# 
1105:          # 14061 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1106:          CM1CON1 equ 0FD2h ;# 
1107:          # 14335 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1108:          OSCCON equ 0FD3h ;# 
1109:          # 14406 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1110:          T0CON equ 0FD5h ;# 
1111:          # 14475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1112:          TMR0 equ 0FD6h ;# 
1113:          # 14481 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1114:          TMR0L equ 0FD6h ;# 
1115:          # 14500 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1116:          TMR0H equ 0FD7h ;# 
1117:          # 14519 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1118:          STATUS equ 0FD8h ;# 
1119:          # 14589 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1120:          FSR2 equ 0FD9h ;# 
1121:          # 14595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1122:          FSR2L equ 0FD9h ;# 
1123:          # 14614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1124:          FSR2H equ 0FDAh ;# 
1125:          # 14620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1126:          PLUSW2 equ 0FDBh ;# 
1127:          # 14639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1128:          PREINC2 equ 0FDCh ;# 
1129:          # 14658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1130:          POSTDEC2 equ 0FDDh ;# 
1131:          # 14677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1132:          POSTINC2 equ 0FDEh ;# 
1133:          # 14696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1134:          INDF2 equ 0FDFh ;# 
1135:          # 14715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1136:          BSR equ 0FE0h ;# 
1137:          # 14721 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1138:          FSR1 equ 0FE1h ;# 
1139:          # 14727 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1140:          FSR1L equ 0FE1h ;# 
1141:          # 14746 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1142:          FSR1H equ 0FE2h ;# 
1143:          # 14752 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1144:          PLUSW1 equ 0FE3h ;# 
1145:          # 14771 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1146:          PREINC1 equ 0FE4h ;# 
1147:          # 14790 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1148:          POSTDEC1 equ 0FE5h ;# 
1149:          # 14809 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1150:          POSTINC1 equ 0FE6h ;# 
1151:          # 14828 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1152:          INDF1 equ 0FE7h ;# 
1153:          # 14847 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1154:          WREG equ 0FE8h ;# 
1155:          # 14866 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1156:          FSR0 equ 0FE9h ;# 
1157:          # 14872 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1158:          FSR0L equ 0FE9h ;# 
1159:          # 14891 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1160:          FSR0H equ 0FEAh ;# 
1161:          # 14897 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1162:          PLUSW0 equ 0FEBh ;# 
1163:          # 14916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1164:          PREINC0 equ 0FECh ;# 
1165:          # 14935 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1166:          POSTDEC0 equ 0FEDh ;# 
1167:          # 14954 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1168:          POSTINC0 equ 0FEEh ;# 
1169:          # 14973 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1170:          INDF0 equ 0FEFh ;# 
1171:          # 14992 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1172:          INTCON3 equ 0FF0h ;# 
1173:          # 15103 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1174:          INTCON2 equ 0FF1h ;# 
1175:          # 15195 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1176:          INTCON equ 0FF2h ;# 
1177:          # 15311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1178:          PROD equ 0FF3h ;# 
1179:          # 15317 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1180:          PRODL equ 0FF3h ;# 
1181:          # 15336 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1182:          PRODH equ 0FF4h ;# 
1183:          # 15355 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1184:          TABLAT equ 0FF5h ;# 
1185:          # 15376 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1186:          TBLPTR equ 0FF6h ;# 
1187:          # 15382 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1188:          TBLPTRL equ 0FF6h ;# 
1189:          # 15401 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1190:          TBLPTRH equ 0FF7h ;# 
1191:          # 15420 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1192:          TBLPTRU equ 0FF8h ;# 
1193:          # 15428 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1194:          PCLAT equ 0FF9h ;# 
1195:          # 15435 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1196:          PC equ 0FF9h ;# 
1197:          # 15441 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1198:          PCL equ 0FF9h ;# 
1199:          # 15460 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1200:          PCLATH equ 0FFAh ;# 
1201:          # 15479 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1202:          PCLATU equ 0FFBh ;# 
1203:          # 15485 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1204:          STKPTR equ 0FFCh ;# 
1205:          # 15558 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1206:          TOS equ 0FFDh ;# 
1207:          # 15564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1208:          TOSL equ 0FFDh ;# 
1209:          # 15583 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1210:          TOSH equ 0FFEh ;# 
1211:          # 15602 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1212:          TOSU equ 0FFFh ;# 
1213:          # 51 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1214:          ADCTRIG equ 0EB8h ;# 
1215:          # 106 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1216:          PMDIS0 equ 0EB9h ;# 
1217:          # 111 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1218:          PD0 equ 0EB9h ;# 
1219:          # 411 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1220:          PMDIS1 equ 0EBAh ;# 
1221:          # 416 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1222:          PD1 equ 0EBAh ;# 
1223:          # 624 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1224:          PMDIS2 equ 0EBBh ;# 
1225:          # 629 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1226:          PD2 equ 0EBBh ;# 
1227:          # 833 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1228:          PMDIS3 equ 0EBCh ;# 
1229:          # 838 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1230:          PD3 equ 0EBCh ;# 
1231:          # 1070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1232:          PPSCON equ 0EBFh ;# 
1233:          # 1089 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1234:          RPOR0 equ 0EC0h ;# 
1235:          # 1095 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1236:          RPOR1 equ 0EC1h ;# 
1237:          # 1101 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1238:          RPOR2 equ 0EC2h ;# 
1239:          # 1107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1240:          RPOR3 equ 0EC3h ;# 
1241:          # 1113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1242:          RPOR4 equ 0EC4h ;# 
1243:          # 1119 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1244:          RPOR5 equ 0EC5h ;# 
1245:          # 1125 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1246:          RPOR6 equ 0EC6h ;# 
1247:          # 1131 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1248:          RPOR7 equ 0EC7h ;# 
1249:          # 1137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1250:          RPOR8 equ 0EC8h ;# 
1251:          # 1143 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1252:          RPOR9 equ 0EC9h ;# 
1253:          # 1149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1254:          RPOR10 equ 0ECAh ;# 
1255:          # 1155 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1256:          RPOR11 equ 0ECBh ;# 
1257:          # 1161 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1258:          RPOR12 equ 0ECCh ;# 
1259:          # 1167 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1260:          RPOR13 equ 0ECDh ;# 
1261:          # 1173 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1262:          RPOR14 equ 0ECEh ;# 
1263:          # 1179 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1264:          RPOR15 equ 0ECFh ;# 
1265:          # 1185 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1266:          RPOR16 equ 0ED0h ;# 
1267:          # 1191 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1268:          RPOR17 equ 0ED1h ;# 
1269:          # 1197 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1270:          RPOR18 equ 0ED2h ;# 
1271:          # 1203 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1272:          RPINR1 equ 0EE1h ;# 
1273:          # 1209 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1274:          RPINR2 equ 0EE2h ;# 
1275:          # 1215 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1276:          RPINR3 equ 0EE3h ;# 
1277:          # 1221 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1278:          RPINR4 equ 0EE4h ;# 
1279:          # 1227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1280:          RPINR6 equ 0EE6h ;# 
1281:          # 1233 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1282:          RPINR15 equ 0EE7h ;# 
1283:          # 1239 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1284:          RPINR7 equ 0EE8h ;# 
1285:          # 1245 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1286:          RPINR8 equ 0EE9h ;# 
1287:          # 1251 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1288:          RPINR9 equ 0EEAh ;# 
1289:          # 1257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1290:          RPINR12 equ 0EF2h ;# 
1291:          # 1263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1292:          RPINR13 equ 0EF3h ;# 
1293:          # 1269 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1294:          RPINR14 equ 0EF4h ;# 
1295:          # 1275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1296:          RPINR16 equ 0EF7h ;# 
1297:          # 1281 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1298:          RPINR17 equ 0EF8h ;# 
1299:          # 1287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1300:          RPINR21 equ 0EFCh ;# 
1301:          # 1293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1302:          RPINR22 equ 0EFDh ;# 
1303:          # 1299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1304:          RPINR23 equ 0EFEh ;# 
1305:          # 1305 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1306:          RPINR24 equ 0EFFh ;# 
1307:          # 1311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1308:          CCP10CON equ 0F00h ;# 
1309:          # 1374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1310:          CCPR10L equ 0F01h ;# 
1311:          # 1393 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1312:          CCPR10H equ 0F02h ;# 
1313:          # 1412 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1314:          CCP9CON equ 0F03h ;# 
1315:          # 1475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1316:          CCPR9L equ 0F04h ;# 
1317:          # 1494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1318:          CCPR9H equ 0F05h ;# 
1319:          # 1513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1320:          CCP8CON equ 0F06h ;# 
1321:          # 1576 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1322:          CCPR8L equ 0F07h ;# 
1323:          # 1595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1324:          CCPR8H equ 0F08h ;# 
1325:          # 1614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1326:          CCP7CON equ 0F09h ;# 
1327:          # 1677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1328:          CCPR7L equ 0F0Ah ;# 
1329:          # 1696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1330:          CCPR7H equ 0F0Bh ;# 
1331:          # 1715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1332:          CCP6CON equ 0F0Ch ;# 
1333:          # 1778 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1334:          CCPR6L equ 0F0Dh ;# 
1335:          # 1797 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1336:          CCPR6H equ 0F0Eh ;# 
1337:          # 1816 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1338:          CCP5CON equ 0F0Fh ;# 
1339:          # 1879 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1340:          CCPR5L equ 0F10h ;# 
1341:          # 1898 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1342:          CCPR5H equ 0F11h ;# 
1343:          # 1917 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1344:          CCP4CON equ 0F12h ;# 
1345:          # 1980 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1346:          CCPR4L equ 0F13h ;# 
1347:          # 1999 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1348:          CCPR4H equ 0F14h ;# 
1349:          # 2018 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1350:          CCP3CON equ 0F15h ;# 
1351:          # 2099 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1352:          CCPR3L equ 0F16h ;# 
1353:          # 2118 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1354:          CCPR3H equ 0F17h ;# 
1355:          # 2137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1356:          ECCP3DEL equ 0F18h ;# 
1357:          # 2206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1358:          ECCP3AS equ 0F19h ;# 
1359:          # 2287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1360:          PSTR3CON equ 0F1Ah ;# 
1361:          # 2397 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1362:          T8CON equ 0F1Bh ;# 
1363:          # 2467 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1364:          PR8 equ 0F1Ch ;# 
1365:          # 2486 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1366:          TMR8 equ 0F1Dh ;# 
1367:          # 2505 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1368:          T6CON equ 0F1Eh ;# 
1369:          # 2575 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1370:          PR6 equ 0F1Fh ;# 
1371:          # 2594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1372:          TMR6 equ 0F20h ;# 
1373:          # 2613 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1374:          T5GCON equ 0F21h ;# 
1375:          # 2725 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1376:          T5CON equ 0F22h ;# 
1377:          # 2826 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1378:          TMR5L equ 0F23h ;# 
1379:          # 2845 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1380:          TMR5H equ 0F24h ;# 
1381:          # 2864 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1382:          CM3CON equ 0F25h ;# 
1383:          # 2990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1384:          RTCVALL equ 0F3Ah ;# 
1385:          # 3009 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1386:          RTCVALH equ 0F3Bh ;# 
1387:          # 3078 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1388:          PADCFG1 equ 0F3Ch ;# 
1389:          # 3104 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1390:          REFOCON equ 0F3Dh ;# 
1391:          # 3168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1392:          RTCCAL equ 0F3Eh ;# 
1393:          # 3237 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1394:          RTCCFG equ 0F3Fh ;# 
1395:          # 3293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1396:          ODCON3 equ 0F40h ;# 
1397:          # 3325 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1398:          ODCON2 equ 0F41h ;# 
1399:          # 3362 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1400:          ODCON1 equ 0F42h ;# 
1401:          # 3423 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1402:          ALRMVALL equ 0F44h ;# 
1403:          # 3442 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1404:          ALRMVALH equ 0F45h ;# 
1405:          # 3461 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1406:          ALRMRPT equ 0F46h ;# 
1407:          # 3530 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1408:          ALRMCFG equ 0F47h ;# 
1409:          # 3605 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1410:          ANCON0 equ 0F48h ;# 
1411:          # 3648 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1412:          ANCON1 equ 0F49h ;# 
1413:          # 3707 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1414:          DSWAKEL equ 0F4Ah ;# 
1415:          # 3758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1416:          DSWAKEH equ 0F4Bh ;# 
1417:          # 3777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1418:          DSCONL equ 0F4Ch ;# 
1419:          # 3808 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1420:          DSCONH equ 0F4Dh ;# 
1421:          # 3840 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1422:          DSGPR0 equ 0F4Eh ;# 
1423:          # 3859 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1424:          DSGPR1 equ 0F4Fh ;# 
1425:          # 3878 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1426:          CCPTMRS2 equ 0F50h ;# 
1427:          # 3924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1428:          CCPTMRS1 equ 0F51h ;# 
1429:          # 3990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1430:          CCPTMRS0 equ 0F52h ;# 
1431:          # 4071 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1432:          CVRCON equ 0F53h ;# 
1433:          # 4149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1434:          DMABCH equ 0F66h ;# 
1435:          # 4168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1436:          DMABCL equ 0F67h ;# 
1437:          # 4187 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1438:          RXADDRH equ 0F68h ;# 
1439:          # 4206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1440:          RXADDRL equ 0F69h ;# 
1441:          # 4225 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1442:          TXADDRH equ 0F6Ah ;# 
1443:          # 4244 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1444:          TXADDRL equ 0F6Bh ;# 
1445:          # 4263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1446:          CMSTAT equ 0F70h ;# 
1447:          # 4268 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1448:          CMSTATUS equ 0F70h ;# 
1449:          # 4324 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1450:          SSP2CON2 equ 0F71h ;# 
1451:          # 4501 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1452:          SSP2CON1 equ 0F72h ;# 
1453:          # 4620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1454:          SSP2STAT equ 0F73h ;# 
1455:          # 4921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1456:          SSP2ADD equ 0F74h ;# 
1457:          # 4990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1458:          SSP2MSK equ 0F74h ;# 
1459:          # 5051 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1460:          SSP2BUF equ 0F75h ;# 
1461:          # 5070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1462:          T4CON equ 0F76h ;# 
1463:          # 5140 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1464:          PR4 equ 0F77h ;# 
1465:          # 5159 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1466:          TMR4 equ 0F78h ;# 
1467:          # 5178 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1468:          T3CON equ 0F79h ;# 
1469:          # 5288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1470:          TMR3 equ 0F7Ah ;# 
1471:          # 5294 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1472:          TMR3L equ 0F7Ah ;# 
1473:          # 5313 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1474:          TMR3H equ 0F7Bh ;# 
1475:          # 5332 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1476:          BAUDCON2 equ 0F7Ch ;# 
1477:          # 5454 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1478:          SPBRGH2 equ 0F7Dh ;# 
1479:          # 5473 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1480:          BAUDCON1 equ 0F7Eh ;# 
1481:          # 5478 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1482:          BAUDCON equ 0F7Eh ;# 
1483:          # 5482 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1484:          BAUDCTL equ 0F7Eh ;# 
1485:          # 5979 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1486:          SPBRGH1 equ 0F7Fh ;# 
1487:          # 5984 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1488:          SPBRGH equ 0F7Fh ;# 
1489:          # 6016 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1490:          PORTA equ 0F80h ;# 
1491:          # 6278 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1492:          PORTB equ 0F81h ;# 
1493:          # 6564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1494:          PORTC equ 0F82h ;# 
1495:          # 6819 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1496:          HLVDCON equ 0F85h ;# 
1497:          # 6888 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1498:          DMACON2 equ 0F86h ;# 
1499:          # 6963 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1500:          OSCCON2 equ 0F87h ;# 
1501:          # 7002 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1502:          DMACON1 equ 0F88h ;# 
1503:          # 7063 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1504:          LATA equ 0F89h ;# 
1505:          # 7164 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1506:          LATB equ 0F8Ah ;# 
1507:          # 7275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1508:          LATC equ 0F8Bh ;# 
1509:          # 7386 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1510:          PIE4 equ 0F8Eh ;# 
1511:          # 7447 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1512:          PIR4 equ 0F8Fh ;# 
1513:          # 7508 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1514:          IPR4 equ 0F90h ;# 
1515:          # 7577 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1516:          PIE5 equ 0F91h ;# 
1517:          # 7626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1518:          TRISA equ 0F92h ;# 
1519:          # 7682 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1520:          TRISB equ 0F93h ;# 
1521:          # 7743 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1522:          TRISC equ 0F94h ;# 
1523:          # 7804 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1524:          T3GCON equ 0F97h ;# 
1525:          # 7883 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1526:          PIR5 equ 0F98h ;# 
1527:          # 7932 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1528:          IPR5 equ 0F99h ;# 
1529:          # 8008 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1530:          T1GCON equ 0F9Ah ;# 
1531:          # 8114 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1532:          OSCTUNE equ 0F9Bh ;# 
1533:          # 8183 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1534:          RCSTA2 equ 0F9Ch ;# 
1535:          # 8318 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1536:          PIE1 equ 0F9Dh ;# 
1537:          # 8394 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1538:          PIR1 equ 0F9Eh ;# 
1539:          # 8470 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1540:          IPR1 equ 0F9Fh ;# 
1541:          # 8546 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1542:          PIE2 equ 0FA0h ;# 
1543:          # 8626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1544:          PIR2 equ 0FA1h ;# 
1545:          # 8706 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1546:          IPR2 equ 0FA2h ;# 
1547:          # 8786 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1548:          PIE3 equ 0FA3h ;# 
1549:          # 8895 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1550:          PIR3 equ 0FA4h ;# 
1551:          # 8972 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1552:          IPR3 equ 0FA5h ;# 
1553:          # 9049 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1554:          EECON1 equ 0FA6h ;# 
1555:          # 9093 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1556:          EECON2 equ 0FA7h ;# 
1557:          # 9112 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1558:          TXSTA2 equ 0FA8h ;# 
1559:          # 9238 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1560:          TXREG2 equ 0FA9h ;# 
1561:          # 9257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1562:          RCREG2 equ 0FAAh ;# 
1563:          # 9276 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1564:          SPBRG2 equ 0FABh ;# 
1565:          # 9295 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1566:          RCSTA1 equ 0FACh ;# 
1567:          # 9300 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1568:          RCSTA equ 0FACh ;# 
1569:          # 9632 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1570:          TXSTA1 equ 0FADh ;# 
1571:          # 9637 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1572:          TXSTA equ 0FADh ;# 
1573:          # 9919 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1574:          TXREG1 equ 0FAEh ;# 
1575:          # 9924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1576:          TXREG equ 0FAEh ;# 
1577:          # 9956 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1578:          RCREG1 equ 0FAFh ;# 
1579:          # 9961 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1580:          RCREG equ 0FAFh ;# 
1581:          # 9993 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1582:          SPBRG1 equ 0FB0h ;# 
1583:          # 9998 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1584:          SPBRG equ 0FB0h ;# 
1585:          # 10030 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1586:          CTMUICON equ 0FB1h ;# 
1587:          # 10105 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1588:          CTMUCONL equ 0FB2h ;# 
1589:          # 10166 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1590:          CTMUCONH equ 0FB3h ;# 
1591:          # 10222 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1592:          CCP2CON equ 0FB4h ;# 
1593:          # 10227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1594:          ECCP2CON equ 0FB4h ;# 
1595:          # 10413 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1596:          CCPR2 equ 0FB5h ;# 
1597:          # 10419 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1598:          CCPR2L equ 0FB5h ;# 
1599:          # 10438 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1600:          CCPR2H equ 0FB6h ;# 
1601:          # 10457 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1602:          ECCP2DEL equ 0FB7h ;# 
1603:          # 10462 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1604:          PWM2CON equ 0FB7h ;# 
1605:          # 10594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1606:          ECCP2AS equ 0FB8h ;# 
1607:          # 10675 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1608:          PSTR2CON equ 0FB9h ;# 
1609:          # 10916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1610:          CCP1CON equ 0FBAh ;# 
1611:          # 10921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1612:          ECCP1CON equ 0FBAh ;# 
1613:          # 11107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1614:          CCPR1 equ 0FBBh ;# 
1615:          # 11113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1616:          CCPR1L equ 0FBBh ;# 
1617:          # 11132 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1618:          CCPR1H equ 0FBCh ;# 
1619:          # 11151 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1620:          ECCP1DEL equ 0FBDh ;# 
1621:          # 11156 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1622:          PWM1CON equ 0FBDh ;# 
1623:          # 11288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1624:          ECCP1AS equ 0FBEh ;# 
1625:          # 11369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1626:          PSTR1CON equ 0FBFh ;# 
1627:          # 11425 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1628:          WDTCON equ 0FC0h ;# 
1629:          # 11494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1630:          ADCON1 equ 0FC1h ;# 
1631:          # 11590 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1632:          ADCON0 equ 0FC2h ;# 
1633:          # 11733 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1634:          ADRES equ 0FC3h ;# 
1635:          # 11739 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1636:          ADRESL equ 0FC3h ;# 
1637:          # 11758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1638:          ADRESH equ 0FC4h ;# 
1639:          # 11777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1640:          SSP1CON2 equ 0FC5h ;# 
1641:          # 11782 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1642:          SSPCON2 equ 0FC5h ;# 
1643:          # 12130 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1644:          SSP1CON1 equ 0FC6h ;# 
1645:          # 12135 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1646:          SSPCON1 equ 0FC6h ;# 
1647:          # 12367 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1648:          SSP1STAT equ 0FC7h ;# 
1649:          # 12372 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1650:          SSPSTAT equ 0FC7h ;# 
1651:          # 12964 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1652:          SSP1ADD equ 0FC8h ;# 
1653:          # 12969 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1654:          SSPADD equ 0FC8h ;# 
1655:          # 13201 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1656:          SSP1MSK equ 0FC8h ;# 
1657:          # 13262 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1658:          SSP1BUF equ 0FC9h ;# 
1659:          # 13267 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1660:          SSPBUF equ 0FC9h ;# 
1661:          # 13299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1662:          T2CON equ 0FCAh ;# 
1663:          # 13369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1664:          PR2 equ 0FCBh ;# 
1665:          # 13374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1666:          MEMCON equ 0FCBh ;# 
1667:          # 13494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1668:          TMR2 equ 0FCCh ;# 
1669:          # 13513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1670:          T1CON equ 0FCDh ;# 
1671:          # 13614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1672:          TMR1 equ 0FCEh ;# 
1673:          # 13620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1674:          TMR1L equ 0FCEh ;# 
1675:          # 13639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1676:          TMR1H equ 0FCFh ;# 
1677:          # 13658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1678:          RCON equ 0FD0h ;# 
1679:          # 13805 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1680:          CM2CON equ 0FD1h ;# 
1681:          # 13810 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1682:          CM2CON1 equ 0FD1h ;# 
1683:          # 14056 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1684:          CM1CON equ 0FD2h ;# 
1685:          # 14061 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1686:          CM1CON1 equ 0FD2h ;# 
1687:          # 14335 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1688:          OSCCON equ 0FD3h ;# 
1689:          # 14406 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1690:          T0CON equ 0FD5h ;# 
1691:          # 14475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1692:          TMR0 equ 0FD6h ;# 
1693:          # 14481 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1694:          TMR0L equ 0FD6h ;# 
1695:          # 14500 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1696:          TMR0H equ 0FD7h ;# 
1697:          # 14519 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1698:          STATUS equ 0FD8h ;# 
1699:          # 14589 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1700:          FSR2 equ 0FD9h ;# 
1701:          # 14595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1702:          FSR2L equ 0FD9h ;# 
1703:          # 14614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1704:          FSR2H equ 0FDAh ;# 
1705:          # 14620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1706:          PLUSW2 equ 0FDBh ;# 
1707:          # 14639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1708:          PREINC2 equ 0FDCh ;# 
1709:          # 14658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1710:          POSTDEC2 equ 0FDDh ;# 
1711:          # 14677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1712:          POSTINC2 equ 0FDEh ;# 
1713:          # 14696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1714:          INDF2 equ 0FDFh ;# 
1715:          # 14715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1716:          BSR equ 0FE0h ;# 
1717:          # 14721 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1718:          FSR1 equ 0FE1h ;# 
1719:          # 14727 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1720:          FSR1L equ 0FE1h ;# 
1721:          # 14746 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1722:          FSR1H equ 0FE2h ;# 
1723:          # 14752 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1724:          PLUSW1 equ 0FE3h ;# 
1725:          # 14771 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1726:          PREINC1 equ 0FE4h ;# 
1727:          # 14790 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1728:          POSTDEC1 equ 0FE5h ;# 
1729:          # 14809 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1730:          POSTINC1 equ 0FE6h ;# 
1731:          # 14828 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1732:          INDF1 equ 0FE7h ;# 
1733:          # 14847 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1734:          WREG equ 0FE8h ;# 
1735:          # 14866 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1736:          FSR0 equ 0FE9h ;# 
1737:          # 14872 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1738:          FSR0L equ 0FE9h ;# 
1739:          # 14891 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1740:          FSR0H equ 0FEAh ;# 
1741:          # 14897 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1742:          PLUSW0 equ 0FEBh ;# 
1743:          # 14916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1744:          PREINC0 equ 0FECh ;# 
1745:          # 14935 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1746:          POSTDEC0 equ 0FEDh ;# 
1747:          # 14954 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1748:          POSTINC0 equ 0FEEh ;# 
1749:          # 14973 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1750:          INDF0 equ 0FEFh ;# 
1751:          # 14992 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1752:          INTCON3 equ 0FF0h ;# 
1753:          # 15103 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1754:          INTCON2 equ 0FF1h ;# 
1755:          # 15195 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1756:          INTCON equ 0FF2h ;# 
1757:          # 15311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1758:          PROD equ 0FF3h ;# 
1759:          # 15317 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1760:          PRODL equ 0FF3h ;# 
1761:          # 15336 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1762:          PRODH equ 0FF4h ;# 
1763:          # 15355 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1764:          TABLAT equ 0FF5h ;# 
1765:          # 15376 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1766:          TBLPTR equ 0FF6h ;# 
1767:          # 15382 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1768:          TBLPTRL equ 0FF6h ;# 
1769:          # 15401 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1770:          TBLPTRH equ 0FF7h ;# 
1771:          # 15420 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1772:          TBLPTRU equ 0FF8h ;# 
1773:          # 15428 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1774:          PCLAT equ 0FF9h ;# 
1775:          # 15435 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1776:          PC equ 0FF9h ;# 
1777:          # 15441 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1778:          PCL equ 0FF9h ;# 
1779:          # 15460 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1780:          PCLATH equ 0FFAh ;# 
1781:          # 15479 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1782:          PCLATU equ 0FFBh ;# 
1783:          # 15485 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1784:          STKPTR equ 0FFCh ;# 
1785:          # 15558 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1786:          TOS equ 0FFDh ;# 
1787:          # 15564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1788:          TOSL equ 0FFDh ;# 
1789:          # 15583 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1790:          TOSH equ 0FFEh ;# 
1791:          # 15602 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1792:          TOSU equ 0FFFh ;# 
1793:          # 51 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1794:          ADCTRIG equ 0EB8h ;# 
1795:          # 106 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1796:          PMDIS0 equ 0EB9h ;# 
1797:          # 111 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1798:          PD0 equ 0EB9h ;# 
1799:          # 411 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1800:          PMDIS1 equ 0EBAh ;# 
1801:          # 416 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1802:          PD1 equ 0EBAh ;# 
1803:          # 624 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1804:          PMDIS2 equ 0EBBh ;# 
1805:          # 629 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1806:          PD2 equ 0EBBh ;# 
1807:          # 833 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1808:          PMDIS3 equ 0EBCh ;# 
1809:          # 838 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1810:          PD3 equ 0EBCh ;# 
1811:          # 1070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1812:          PPSCON equ 0EBFh ;# 
1813:          # 1089 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1814:          RPOR0 equ 0EC0h ;# 
1815:          # 1095 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1816:          RPOR1 equ 0EC1h ;# 
1817:          # 1101 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1818:          RPOR2 equ 0EC2h ;# 
1819:          # 1107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1820:          RPOR3 equ 0EC3h ;# 
1821:          # 1113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1822:          RPOR4 equ 0EC4h ;# 
1823:          # 1119 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1824:          RPOR5 equ 0EC5h ;# 
1825:          # 1125 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1826:          RPOR6 equ 0EC6h ;# 
1827:          # 1131 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1828:          RPOR7 equ 0EC7h ;# 
1829:          # 1137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1830:          RPOR8 equ 0EC8h ;# 
1831:          # 1143 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1832:          RPOR9 equ 0EC9h ;# 
1833:          # 1149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1834:          RPOR10 equ 0ECAh ;# 
1835:          # 1155 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1836:          RPOR11 equ 0ECBh ;# 
1837:          # 1161 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1838:          RPOR12 equ 0ECCh ;# 
1839:          # 1167 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1840:          RPOR13 equ 0ECDh ;# 
1841:          # 1173 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1842:          RPOR14 equ 0ECEh ;# 
1843:          # 1179 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1844:          RPOR15 equ 0ECFh ;# 
1845:          # 1185 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1846:          RPOR16 equ 0ED0h ;# 
1847:          # 1191 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1848:          RPOR17 equ 0ED1h ;# 
1849:          # 1197 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1850:          RPOR18 equ 0ED2h ;# 
1851:          # 1203 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1852:          RPINR1 equ 0EE1h ;# 
1853:          # 1209 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1854:          RPINR2 equ 0EE2h ;# 
1855:          # 1215 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1856:          RPINR3 equ 0EE3h ;# 
1857:          # 1221 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1858:          RPINR4 equ 0EE4h ;# 
1859:          # 1227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1860:          RPINR6 equ 0EE6h ;# 
1861:          # 1233 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1862:          RPINR15 equ 0EE7h ;# 
1863:          # 1239 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1864:          RPINR7 equ 0EE8h ;# 
1865:          # 1245 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1866:          RPINR8 equ 0EE9h ;# 
1867:          # 1251 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1868:          RPINR9 equ 0EEAh ;# 
1869:          # 1257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1870:          RPINR12 equ 0EF2h ;# 
1871:          # 1263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1872:          RPINR13 equ 0EF3h ;# 
1873:          # 1269 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1874:          RPINR14 equ 0EF4h ;# 
1875:          # 1275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1876:          RPINR16 equ 0EF7h ;# 
1877:          # 1281 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1878:          RPINR17 equ 0EF8h ;# 
1879:          # 1287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1880:          RPINR21 equ 0EFCh ;# 
1881:          # 1293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1882:          RPINR22 equ 0EFDh ;# 
1883:          # 1299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1884:          RPINR23 equ 0EFEh ;# 
1885:          # 1305 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1886:          RPINR24 equ 0EFFh ;# 
1887:          # 1311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1888:          CCP10CON equ 0F00h ;# 
1889:          # 1374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1890:          CCPR10L equ 0F01h ;# 
1891:          # 1393 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1892:          CCPR10H equ 0F02h ;# 
1893:          # 1412 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1894:          CCP9CON equ 0F03h ;# 
1895:          # 1475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1896:          CCPR9L equ 0F04h ;# 
1897:          # 1494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1898:          CCPR9H equ 0F05h ;# 
1899:          # 1513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1900:          CCP8CON equ 0F06h ;# 
1901:          # 1576 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1902:          CCPR8L equ 0F07h ;# 
1903:          # 1595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1904:          CCPR8H equ 0F08h ;# 
1905:          # 1614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1906:          CCP7CON equ 0F09h ;# 
1907:          # 1677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1908:          CCPR7L equ 0F0Ah ;# 
1909:          # 1696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1910:          CCPR7H equ 0F0Bh ;# 
1911:          # 1715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1912:          CCP6CON equ 0F0Ch ;# 
1913:          # 1778 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1914:          CCPR6L equ 0F0Dh ;# 
1915:          # 1797 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1916:          CCPR6H equ 0F0Eh ;# 
1917:          # 1816 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1918:          CCP5CON equ 0F0Fh ;# 
1919:          # 1879 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1920:          CCPR5L equ 0F10h ;# 
1921:          # 1898 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1922:          CCPR5H equ 0F11h ;# 
1923:          # 1917 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1924:          CCP4CON equ 0F12h ;# 
1925:          # 1980 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1926:          CCPR4L equ 0F13h ;# 
1927:          # 1999 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1928:          CCPR4H equ 0F14h ;# 
1929:          # 2018 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1930:          CCP3CON equ 0F15h ;# 
1931:          # 2099 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1932:          CCPR3L equ 0F16h ;# 
1933:          # 2118 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1934:          CCPR3H equ 0F17h ;# 
1935:          # 2137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1936:          ECCP3DEL equ 0F18h ;# 
1937:          # 2206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1938:          ECCP3AS equ 0F19h ;# 
1939:          # 2287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1940:          PSTR3CON equ 0F1Ah ;# 
1941:          # 2397 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1942:          T8CON equ 0F1Bh ;# 
1943:          # 2467 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1944:          PR8 equ 0F1Ch ;# 
1945:          # 2486 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1946:          TMR8 equ 0F1Dh ;# 
1947:          # 2505 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1948:          T6CON equ 0F1Eh ;# 
1949:          # 2575 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1950:          PR6 equ 0F1Fh ;# 
1951:          # 2594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1952:          TMR6 equ 0F20h ;# 
1953:          # 2613 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1954:          T5GCON equ 0F21h ;# 
1955:          # 2725 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1956:          T5CON equ 0F22h ;# 
1957:          # 2826 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1958:          TMR5L equ 0F23h ;# 
1959:          # 2845 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1960:          TMR5H equ 0F24h ;# 
1961:          # 2864 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1962:          CM3CON equ 0F25h ;# 
1963:          # 2990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1964:          RTCVALL equ 0F3Ah ;# 
1965:          # 3009 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1966:          RTCVALH equ 0F3Bh ;# 
1967:          # 3078 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1968:          PADCFG1 equ 0F3Ch ;# 
1969:          # 3104 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1970:          REFOCON equ 0F3Dh ;# 
1971:          # 3168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1972:          RTCCAL equ 0F3Eh ;# 
1973:          # 3237 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1974:          RTCCFG equ 0F3Fh ;# 
1975:          # 3293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1976:          ODCON3 equ 0F40h ;# 
1977:          # 3325 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1978:          ODCON2 equ 0F41h ;# 
1979:          # 3362 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1980:          ODCON1 equ 0F42h ;# 
1981:          # 3423 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1982:          ALRMVALL equ 0F44h ;# 
1983:          # 3442 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1984:          ALRMVALH equ 0F45h ;# 
1985:          # 3461 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1986:          ALRMRPT equ 0F46h ;# 
1987:          # 3530 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1988:          ALRMCFG equ 0F47h ;# 
1989:          # 3605 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1990:          ANCON0 equ 0F48h ;# 
1991:          # 3648 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1992:          ANCON1 equ 0F49h ;# 
1993:          # 3707 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1994:          DSWAKEL equ 0F4Ah ;# 
1995:          # 3758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1996:          DSWAKEH equ 0F4Bh ;# 
1997:          # 3777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
1998:          DSCONL equ 0F4Ch ;# 
1999:          # 3808 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2000:          DSCONH equ 0F4Dh ;# 
2001:          # 3840 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2002:          DSGPR0 equ 0F4Eh ;# 
2003:          # 3859 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2004:          DSGPR1 equ 0F4Fh ;# 
2005:          # 3878 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2006:          CCPTMRS2 equ 0F50h ;# 
2007:          # 3924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2008:          CCPTMRS1 equ 0F51h ;# 
2009:          # 3990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2010:          CCPTMRS0 equ 0F52h ;# 
2011:          # 4071 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2012:          CVRCON equ 0F53h ;# 
2013:          # 4149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2014:          DMABCH equ 0F66h ;# 
2015:          # 4168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2016:          DMABCL equ 0F67h ;# 
2017:          # 4187 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2018:          RXADDRH equ 0F68h ;# 
2019:          # 4206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2020:          RXADDRL equ 0F69h ;# 
2021:          # 4225 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2022:          TXADDRH equ 0F6Ah ;# 
2023:          # 4244 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2024:          TXADDRL equ 0F6Bh ;# 
2025:          # 4263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2026:          CMSTAT equ 0F70h ;# 
2027:          # 4268 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2028:          CMSTATUS equ 0F70h ;# 
2029:          # 4324 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2030:          SSP2CON2 equ 0F71h ;# 
2031:          # 4501 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2032:          SSP2CON1 equ 0F72h ;# 
2033:          # 4620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2034:          SSP2STAT equ 0F73h ;# 
2035:          # 4921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2036:          SSP2ADD equ 0F74h ;# 
2037:          # 4990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2038:          SSP2MSK equ 0F74h ;# 
2039:          # 5051 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2040:          SSP2BUF equ 0F75h ;# 
2041:          # 5070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2042:          T4CON equ 0F76h ;# 
2043:          # 5140 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2044:          PR4 equ 0F77h ;# 
2045:          # 5159 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2046:          TMR4 equ 0F78h ;# 
2047:          # 5178 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2048:          T3CON equ 0F79h ;# 
2049:          # 5288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2050:          TMR3 equ 0F7Ah ;# 
2051:          # 5294 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2052:          TMR3L equ 0F7Ah ;# 
2053:          # 5313 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2054:          TMR3H equ 0F7Bh ;# 
2055:          # 5332 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2056:          BAUDCON2 equ 0F7Ch ;# 
2057:          # 5454 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2058:          SPBRGH2 equ 0F7Dh ;# 
2059:          # 5473 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2060:          BAUDCON1 equ 0F7Eh ;# 
2061:          # 5478 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2062:          BAUDCON equ 0F7Eh ;# 
2063:          # 5482 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2064:          BAUDCTL equ 0F7Eh ;# 
2065:          # 5979 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2066:          SPBRGH1 equ 0F7Fh ;# 
2067:          # 5984 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2068:          SPBRGH equ 0F7Fh ;# 
2069:          # 6016 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2070:          PORTA equ 0F80h ;# 
2071:          # 6278 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2072:          PORTB equ 0F81h ;# 
2073:          # 6564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2074:          PORTC equ 0F82h ;# 
2075:          # 6819 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2076:          HLVDCON equ 0F85h ;# 
2077:          # 6888 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2078:          DMACON2 equ 0F86h ;# 
2079:          # 6963 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2080:          OSCCON2 equ 0F87h ;# 
2081:          # 7002 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2082:          DMACON1 equ 0F88h ;# 
2083:          # 7063 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2084:          LATA equ 0F89h ;# 
2085:          # 7164 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2086:          LATB equ 0F8Ah ;# 
2087:          # 7275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2088:          LATC equ 0F8Bh ;# 
2089:          # 7386 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2090:          PIE4 equ 0F8Eh ;# 
2091:          # 7447 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2092:          PIR4 equ 0F8Fh ;# 
2093:          # 7508 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2094:          IPR4 equ 0F90h ;# 
2095:          # 7577 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2096:          PIE5 equ 0F91h ;# 
2097:          # 7626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2098:          TRISA equ 0F92h ;# 
2099:          # 7682 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2100:          TRISB equ 0F93h ;# 
2101:          # 7743 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2102:          TRISC equ 0F94h ;# 
2103:          # 7804 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2104:          T3GCON equ 0F97h ;# 
2105:          # 7883 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2106:          PIR5 equ 0F98h ;# 
2107:          # 7932 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2108:          IPR5 equ 0F99h ;# 
2109:          # 8008 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2110:          T1GCON equ 0F9Ah ;# 
2111:          # 8114 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2112:          OSCTUNE equ 0F9Bh ;# 
2113:          # 8183 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2114:          RCSTA2 equ 0F9Ch ;# 
2115:          # 8318 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2116:          PIE1 equ 0F9Dh ;# 
2117:          # 8394 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2118:          PIR1 equ 0F9Eh ;# 
2119:          # 8470 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2120:          IPR1 equ 0F9Fh ;# 
2121:          # 8546 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2122:          PIE2 equ 0FA0h ;# 
2123:          # 8626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2124:          PIR2 equ 0FA1h ;# 
2125:          # 8706 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2126:          IPR2 equ 0FA2h ;# 
2127:          # 8786 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2128:          PIE3 equ 0FA3h ;# 
2129:          # 8895 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2130:          PIR3 equ 0FA4h ;# 
2131:          # 8972 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2132:          IPR3 equ 0FA5h ;# 
2133:          # 9049 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2134:          EECON1 equ 0FA6h ;# 
2135:          # 9093 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2136:          EECON2 equ 0FA7h ;# 
2137:          # 9112 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2138:          TXSTA2 equ 0FA8h ;# 
2139:          # 9238 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2140:          TXREG2 equ 0FA9h ;# 
2141:          # 9257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2142:          RCREG2 equ 0FAAh ;# 
2143:          # 9276 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2144:          SPBRG2 equ 0FABh ;# 
2145:          # 9295 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2146:          RCSTA1 equ 0FACh ;# 
2147:          # 9300 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2148:          RCSTA equ 0FACh ;# 
2149:          # 9632 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2150:          TXSTA1 equ 0FADh ;# 
2151:          # 9637 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2152:          TXSTA equ 0FADh ;# 
2153:          # 9919 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2154:          TXREG1 equ 0FAEh ;# 
2155:          # 9924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2156:          TXREG equ 0FAEh ;# 
2157:          # 9956 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2158:          RCREG1 equ 0FAFh ;# 
2159:          # 9961 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2160:          RCREG equ 0FAFh ;# 
2161:          # 9993 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2162:          SPBRG1 equ 0FB0h ;# 
2163:          # 9998 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2164:          SPBRG equ 0FB0h ;# 
2165:          # 10030 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2166:          CTMUICON equ 0FB1h ;# 
2167:          # 10105 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2168:          CTMUCONL equ 0FB2h ;# 
2169:          # 10166 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2170:          CTMUCONH equ 0FB3h ;# 
2171:          # 10222 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2172:          CCP2CON equ 0FB4h ;# 
2173:          # 10227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2174:          ECCP2CON equ 0FB4h ;# 
2175:          # 10413 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2176:          CCPR2 equ 0FB5h ;# 
2177:          # 10419 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2178:          CCPR2L equ 0FB5h ;# 
2179:          # 10438 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2180:          CCPR2H equ 0FB6h ;# 
2181:          # 10457 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2182:          ECCP2DEL equ 0FB7h ;# 
2183:          # 10462 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2184:          PWM2CON equ 0FB7h ;# 
2185:          # 10594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2186:          ECCP2AS equ 0FB8h ;# 
2187:          # 10675 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2188:          PSTR2CON equ 0FB9h ;# 
2189:          # 10916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2190:          CCP1CON equ 0FBAh ;# 
2191:          # 10921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2192:          ECCP1CON equ 0FBAh ;# 
2193:          # 11107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2194:          CCPR1 equ 0FBBh ;# 
2195:          # 11113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2196:          CCPR1L equ 0FBBh ;# 
2197:          # 11132 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2198:          CCPR1H equ 0FBCh ;# 
2199:          # 11151 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2200:          ECCP1DEL equ 0FBDh ;# 
2201:          # 11156 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2202:          PWM1CON equ 0FBDh ;# 
2203:          # 11288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2204:          ECCP1AS equ 0FBEh ;# 
2205:          # 11369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2206:          PSTR1CON equ 0FBFh ;# 
2207:          # 11425 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2208:          WDTCON equ 0FC0h ;# 
2209:          # 11494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2210:          ADCON1 equ 0FC1h ;# 
2211:          # 11590 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2212:          ADCON0 equ 0FC2h ;# 
2213:          # 11733 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2214:          ADRES equ 0FC3h ;# 
2215:          # 11739 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2216:          ADRESL equ 0FC3h ;# 
2217:          # 11758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2218:          ADRESH equ 0FC4h ;# 
2219:          # 11777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2220:          SSP1CON2 equ 0FC5h ;# 
2221:          # 11782 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2222:          SSPCON2 equ 0FC5h ;# 
2223:          # 12130 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2224:          SSP1CON1 equ 0FC6h ;# 
2225:          # 12135 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2226:          SSPCON1 equ 0FC6h ;# 
2227:          # 12367 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2228:          SSP1STAT equ 0FC7h ;# 
2229:          # 12372 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2230:          SSPSTAT equ 0FC7h ;# 
2231:          # 12964 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2232:          SSP1ADD equ 0FC8h ;# 
2233:          # 12969 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2234:          SSPADD equ 0FC8h ;# 
2235:          # 13201 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2236:          SSP1MSK equ 0FC8h ;# 
2237:          # 13262 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2238:          SSP1BUF equ 0FC9h ;# 
2239:          # 13267 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2240:          SSPBUF equ 0FC9h ;# 
2241:          # 13299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2242:          T2CON equ 0FCAh ;# 
2243:          # 13369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2244:          PR2 equ 0FCBh ;# 
2245:          # 13374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2246:          MEMCON equ 0FCBh ;# 
2247:          # 13494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2248:          TMR2 equ 0FCCh ;# 
2249:          # 13513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2250:          T1CON equ 0FCDh ;# 
2251:          # 13614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2252:          TMR1 equ 0FCEh ;# 
2253:          # 13620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2254:          TMR1L equ 0FCEh ;# 
2255:          # 13639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2256:          TMR1H equ 0FCFh ;# 
2257:          # 13658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2258:          RCON equ 0FD0h ;# 
2259:          # 13805 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2260:          CM2CON equ 0FD1h ;# 
2261:          # 13810 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2262:          CM2CON1 equ 0FD1h ;# 
2263:          # 14056 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2264:          CM1CON equ 0FD2h ;# 
2265:          # 14061 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2266:          CM1CON1 equ 0FD2h ;# 
2267:          # 14335 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2268:          OSCCON equ 0FD3h ;# 
2269:          # 14406 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2270:          T0CON equ 0FD5h ;# 
2271:          # 14475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2272:          TMR0 equ 0FD6h ;# 
2273:          # 14481 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2274:          TMR0L equ 0FD6h ;# 
2275:          # 14500 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2276:          TMR0H equ 0FD7h ;# 
2277:          # 14519 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2278:          STATUS equ 0FD8h ;# 
2279:          # 14589 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2280:          FSR2 equ 0FD9h ;# 
2281:          # 14595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2282:          FSR2L equ 0FD9h ;# 
2283:          # 14614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2284:          FSR2H equ 0FDAh ;# 
2285:          # 14620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2286:          PLUSW2 equ 0FDBh ;# 
2287:          # 14639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2288:          PREINC2 equ 0FDCh ;# 
2289:          # 14658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2290:          POSTDEC2 equ 0FDDh ;# 
2291:          # 14677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2292:          POSTINC2 equ 0FDEh ;# 
2293:          # 14696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2294:          INDF2 equ 0FDFh ;# 
2295:          # 14715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2296:          BSR equ 0FE0h ;# 
2297:          # 14721 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2298:          FSR1 equ 0FE1h ;# 
2299:          # 14727 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2300:          FSR1L equ 0FE1h ;# 
2301:          # 14746 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2302:          FSR1H equ 0FE2h ;# 
2303:          # 14752 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2304:          PLUSW1 equ 0FE3h ;# 
2305:          # 14771 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2306:          PREINC1 equ 0FE4h ;# 
2307:          # 14790 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2308:          POSTDEC1 equ 0FE5h ;# 
2309:          # 14809 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2310:          POSTINC1 equ 0FE6h ;# 
2311:          # 14828 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2312:          INDF1 equ 0FE7h ;# 
2313:          # 14847 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2314:          WREG equ 0FE8h ;# 
2315:          # 14866 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2316:          FSR0 equ 0FE9h ;# 
2317:          # 14872 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2318:          FSR0L equ 0FE9h ;# 
2319:          # 14891 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2320:          FSR0H equ 0FEAh ;# 
2321:          # 14897 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2322:          PLUSW0 equ 0FEBh ;# 
2323:          # 14916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2324:          PREINC0 equ 0FECh ;# 
2325:          # 14935 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2326:          POSTDEC0 equ 0FEDh ;# 
2327:          # 14954 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2328:          POSTINC0 equ 0FEEh ;# 
2329:          # 14973 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2330:          INDF0 equ 0FEFh ;# 
2331:          # 14992 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2332:          INTCON3 equ 0FF0h ;# 
2333:          # 15103 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2334:          INTCON2 equ 0FF1h ;# 
2335:          # 15195 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2336:          INTCON equ 0FF2h ;# 
2337:          # 15311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2338:          PROD equ 0FF3h ;# 
2339:          # 15317 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2340:          PRODL equ 0FF3h ;# 
2341:          # 15336 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2342:          PRODH equ 0FF4h ;# 
2343:          # 15355 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2344:          TABLAT equ 0FF5h ;# 
2345:          # 15376 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2346:          TBLPTR equ 0FF6h ;# 
2347:          # 15382 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2348:          TBLPTRL equ 0FF6h ;# 
2349:          # 15401 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2350:          TBLPTRH equ 0FF7h ;# 
2351:          # 15420 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2352:          TBLPTRU equ 0FF8h ;# 
2353:          # 15428 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2354:          PCLAT equ 0FF9h ;# 
2355:          # 15435 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2356:          PC equ 0FF9h ;# 
2357:          # 15441 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2358:          PCL equ 0FF9h ;# 
2359:          # 15460 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2360:          PCLATH equ 0FFAh ;# 
2361:          # 15479 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2362:          PCLATU equ 0FFBh ;# 
2363:          # 15485 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2364:          STKPTR equ 0FFCh ;# 
2365:          # 15558 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2366:          TOS equ 0FFDh ;# 
2367:          # 15564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2368:          TOSL equ 0FFDh ;# 
2369:          # 15583 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2370:          TOSH equ 0FFEh ;# 
2371:          # 15602 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2372:          TOSU equ 0FFFh ;# 
2373:          # 51 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2374:          ADCTRIG equ 0EB8h ;# 
2375:          # 106 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2376:          PMDIS0 equ 0EB9h ;# 
2377:          # 111 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2378:          PD0 equ 0EB9h ;# 
2379:          # 411 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2380:          PMDIS1 equ 0EBAh ;# 
2381:          # 416 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2382:          PD1 equ 0EBAh ;# 
2383:          # 624 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2384:          PMDIS2 equ 0EBBh ;# 
2385:          # 629 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2386:          PD2 equ 0EBBh ;# 
2387:          # 833 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2388:          PMDIS3 equ 0EBCh ;# 
2389:          # 838 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2390:          PD3 equ 0EBCh ;# 
2391:          # 1070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2392:          PPSCON equ 0EBFh ;# 
2393:          # 1089 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2394:          RPOR0 equ 0EC0h ;# 
2395:          # 1095 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2396:          RPOR1 equ 0EC1h ;# 
2397:          # 1101 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2398:          RPOR2 equ 0EC2h ;# 
2399:          # 1107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2400:          RPOR3 equ 0EC3h ;# 
2401:          # 1113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2402:          RPOR4 equ 0EC4h ;# 
2403:          # 1119 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2404:          RPOR5 equ 0EC5h ;# 
2405:          # 1125 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2406:          RPOR6 equ 0EC6h ;# 
2407:          # 1131 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2408:          RPOR7 equ 0EC7h ;# 
2409:          # 1137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2410:          RPOR8 equ 0EC8h ;# 
2411:          # 1143 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2412:          RPOR9 equ 0EC9h ;# 
2413:          # 1149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2414:          RPOR10 equ 0ECAh ;# 
2415:          # 1155 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2416:          RPOR11 equ 0ECBh ;# 
2417:          # 1161 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2418:          RPOR12 equ 0ECCh ;# 
2419:          # 1167 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2420:          RPOR13 equ 0ECDh ;# 
2421:          # 1173 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2422:          RPOR14 equ 0ECEh ;# 
2423:          # 1179 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2424:          RPOR15 equ 0ECFh ;# 
2425:          # 1185 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2426:          RPOR16 equ 0ED0h ;# 
2427:          # 1191 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2428:          RPOR17 equ 0ED1h ;# 
2429:          # 1197 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2430:          RPOR18 equ 0ED2h ;# 
2431:          # 1203 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2432:          RPINR1 equ 0EE1h ;# 
2433:          # 1209 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2434:          RPINR2 equ 0EE2h ;# 
2435:          # 1215 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2436:          RPINR3 equ 0EE3h ;# 
2437:          # 1221 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2438:          RPINR4 equ 0EE4h ;# 
2439:          # 1227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2440:          RPINR6 equ 0EE6h ;# 
2441:          # 1233 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2442:          RPINR15 equ 0EE7h ;# 
2443:          # 1239 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2444:          RPINR7 equ 0EE8h ;# 
2445:          # 1245 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2446:          RPINR8 equ 0EE9h ;# 
2447:          # 1251 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2448:          RPINR9 equ 0EEAh ;# 
2449:          # 1257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2450:          RPINR12 equ 0EF2h ;# 
2451:          # 1263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2452:          RPINR13 equ 0EF3h ;# 
2453:          # 1269 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2454:          RPINR14 equ 0EF4h ;# 
2455:          # 1275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2456:          RPINR16 equ 0EF7h ;# 
2457:          # 1281 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2458:          RPINR17 equ 0EF8h ;# 
2459:          # 1287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2460:          RPINR21 equ 0EFCh ;# 
2461:          # 1293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2462:          RPINR22 equ 0EFDh ;# 
2463:          # 1299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2464:          RPINR23 equ 0EFEh ;# 
2465:          # 1305 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2466:          RPINR24 equ 0EFFh ;# 
2467:          # 1311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2468:          CCP10CON equ 0F00h ;# 
2469:          # 1374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2470:          CCPR10L equ 0F01h ;# 
2471:          # 1393 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2472:          CCPR10H equ 0F02h ;# 
2473:          # 1412 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2474:          CCP9CON equ 0F03h ;# 
2475:          # 1475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2476:          CCPR9L equ 0F04h ;# 
2477:          # 1494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2478:          CCPR9H equ 0F05h ;# 
2479:          # 1513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2480:          CCP8CON equ 0F06h ;# 
2481:          # 1576 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2482:          CCPR8L equ 0F07h ;# 
2483:          # 1595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2484:          CCPR8H equ 0F08h ;# 
2485:          # 1614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2486:          CCP7CON equ 0F09h ;# 
2487:          # 1677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2488:          CCPR7L equ 0F0Ah ;# 
2489:          # 1696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2490:          CCPR7H equ 0F0Bh ;# 
2491:          # 1715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2492:          CCP6CON equ 0F0Ch ;# 
2493:          # 1778 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2494:          CCPR6L equ 0F0Dh ;# 
2495:          # 1797 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2496:          CCPR6H equ 0F0Eh ;# 
2497:          # 1816 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2498:          CCP5CON equ 0F0Fh ;# 
2499:          # 1879 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2500:          CCPR5L equ 0F10h ;# 
2501:          # 1898 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2502:          CCPR5H equ 0F11h ;# 
2503:          # 1917 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2504:          CCP4CON equ 0F12h ;# 
2505:          # 1980 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2506:          CCPR4L equ 0F13h ;# 
2507:          # 1999 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2508:          CCPR4H equ 0F14h ;# 
2509:          # 2018 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2510:          CCP3CON equ 0F15h ;# 
2511:          # 2099 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2512:          CCPR3L equ 0F16h ;# 
2513:          # 2118 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2514:          CCPR3H equ 0F17h ;# 
2515:          # 2137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2516:          ECCP3DEL equ 0F18h ;# 
2517:          # 2206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2518:          ECCP3AS equ 0F19h ;# 
2519:          # 2287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2520:          PSTR3CON equ 0F1Ah ;# 
2521:          # 2397 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2522:          T8CON equ 0F1Bh ;# 
2523:          # 2467 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2524:          PR8 equ 0F1Ch ;# 
2525:          # 2486 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2526:          TMR8 equ 0F1Dh ;# 
2527:          # 2505 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2528:          T6CON equ 0F1Eh ;# 
2529:          # 2575 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2530:          PR6 equ 0F1Fh ;# 
2531:          # 2594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2532:          TMR6 equ 0F20h ;# 
2533:          # 2613 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2534:          T5GCON equ 0F21h ;# 
2535:          # 2725 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2536:          T5CON equ 0F22h ;# 
2537:          # 2826 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2538:          TMR5L equ 0F23h ;# 
2539:          # 2845 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2540:          TMR5H equ 0F24h ;# 
2541:          # 2864 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2542:          CM3CON equ 0F25h ;# 
2543:          # 2990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2544:          RTCVALL equ 0F3Ah ;# 
2545:          # 3009 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2546:          RTCVALH equ 0F3Bh ;# 
2547:          # 3078 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2548:          PADCFG1 equ 0F3Ch ;# 
2549:          # 3104 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2550:          REFOCON equ 0F3Dh ;# 
2551:          # 3168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2552:          RTCCAL equ 0F3Eh ;# 
2553:          # 3237 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2554:          RTCCFG equ 0F3Fh ;# 
2555:          # 3293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2556:          ODCON3 equ 0F40h ;# 
2557:          # 3325 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2558:          ODCON2 equ 0F41h ;# 
2559:          # 3362 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2560:          ODCON1 equ 0F42h ;# 
2561:          # 3423 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2562:          ALRMVALL equ 0F44h ;# 
2563:          # 3442 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2564:          ALRMVALH equ 0F45h ;# 
2565:          # 3461 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2566:          ALRMRPT equ 0F46h ;# 
2567:          # 3530 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2568:          ALRMCFG equ 0F47h ;# 
2569:          # 3605 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2570:          ANCON0 equ 0F48h ;# 
2571:          # 3648 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2572:          ANCON1 equ 0F49h ;# 
2573:          # 3707 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2574:          DSWAKEL equ 0F4Ah ;# 
2575:          # 3758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2576:          DSWAKEH equ 0F4Bh ;# 
2577:          # 3777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2578:          DSCONL equ 0F4Ch ;# 
2579:          # 3808 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2580:          DSCONH equ 0F4Dh ;# 
2581:          # 3840 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2582:          DSGPR0 equ 0F4Eh ;# 
2583:          # 3859 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2584:          DSGPR1 equ 0F4Fh ;# 
2585:          # 3878 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2586:          CCPTMRS2 equ 0F50h ;# 
2587:          # 3924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2588:          CCPTMRS1 equ 0F51h ;# 
2589:          # 3990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2590:          CCPTMRS0 equ 0F52h ;# 
2591:          # 4071 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2592:          CVRCON equ 0F53h ;# 
2593:          # 4149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2594:          DMABCH equ 0F66h ;# 
2595:          # 4168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2596:          DMABCL equ 0F67h ;# 
2597:          # 4187 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2598:          RXADDRH equ 0F68h ;# 
2599:          # 4206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2600:          RXADDRL equ 0F69h ;# 
2601:          # 4225 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2602:          TXADDRH equ 0F6Ah ;# 
2603:          # 4244 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2604:          TXADDRL equ 0F6Bh ;# 
2605:          # 4263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2606:          CMSTAT equ 0F70h ;# 
2607:          # 4268 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2608:          CMSTATUS equ 0F70h ;# 
2609:          # 4324 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2610:          SSP2CON2 equ 0F71h ;# 
2611:          # 4501 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2612:          SSP2CON1 equ 0F72h ;# 
2613:          # 4620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2614:          SSP2STAT equ 0F73h ;# 
2615:          # 4921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2616:          SSP2ADD equ 0F74h ;# 
2617:          # 4990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2618:          SSP2MSK equ 0F74h ;# 
2619:          # 5051 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2620:          SSP2BUF equ 0F75h ;# 
2621:          # 5070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2622:          T4CON equ 0F76h ;# 
2623:          # 5140 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2624:          PR4 equ 0F77h ;# 
2625:          # 5159 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2626:          TMR4 equ 0F78h ;# 
2627:          # 5178 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2628:          T3CON equ 0F79h ;# 
2629:          # 5288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2630:          TMR3 equ 0F7Ah ;# 
2631:          # 5294 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2632:          TMR3L equ 0F7Ah ;# 
2633:          # 5313 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2634:          TMR3H equ 0F7Bh ;# 
2635:          # 5332 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2636:          BAUDCON2 equ 0F7Ch ;# 
2637:          # 5454 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2638:          SPBRGH2 equ 0F7Dh ;# 
2639:          # 5473 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2640:          BAUDCON1 equ 0F7Eh ;# 
2641:          # 5478 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2642:          BAUDCON equ 0F7Eh ;# 
2643:          # 5482 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2644:          BAUDCTL equ 0F7Eh ;# 
2645:          # 5979 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2646:          SPBRGH1 equ 0F7Fh ;# 
2647:          # 5984 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2648:          SPBRGH equ 0F7Fh ;# 
2649:          # 6016 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2650:          PORTA equ 0F80h ;# 
2651:          # 6278 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2652:          PORTB equ 0F81h ;# 
2653:          # 6564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2654:          PORTC equ 0F82h ;# 
2655:          # 6819 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2656:          HLVDCON equ 0F85h ;# 
2657:          # 6888 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2658:          DMACON2 equ 0F86h ;# 
2659:          # 6963 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2660:          OSCCON2 equ 0F87h ;# 
2661:          # 7002 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2662:          DMACON1 equ 0F88h ;# 
2663:          # 7063 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2664:          LATA equ 0F89h ;# 
2665:          # 7164 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2666:          LATB equ 0F8Ah ;# 
2667:          # 7275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2668:          LATC equ 0F8Bh ;# 
2669:          # 7386 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2670:          PIE4 equ 0F8Eh ;# 
2671:          # 7447 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2672:          PIR4 equ 0F8Fh ;# 
2673:          # 7508 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2674:          IPR4 equ 0F90h ;# 
2675:          # 7577 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2676:          PIE5 equ 0F91h ;# 
2677:          # 7626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2678:          TRISA equ 0F92h ;# 
2679:          # 7682 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2680:          TRISB equ 0F93h ;# 
2681:          # 7743 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2682:          TRISC equ 0F94h ;# 
2683:          # 7804 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2684:          T3GCON equ 0F97h ;# 
2685:          # 7883 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2686:          PIR5 equ 0F98h ;# 
2687:          # 7932 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2688:          IPR5 equ 0F99h ;# 
2689:          # 8008 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2690:          T1GCON equ 0F9Ah ;# 
2691:          # 8114 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2692:          OSCTUNE equ 0F9Bh ;# 
2693:          # 8183 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2694:          RCSTA2 equ 0F9Ch ;# 
2695:          # 8318 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2696:          PIE1 equ 0F9Dh ;# 
2697:          # 8394 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2698:          PIR1 equ 0F9Eh ;# 
2699:          # 8470 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2700:          IPR1 equ 0F9Fh ;# 
2701:          # 8546 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2702:          PIE2 equ 0FA0h ;# 
2703:          # 8626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2704:          PIR2 equ 0FA1h ;# 
2705:          # 8706 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2706:          IPR2 equ 0FA2h ;# 
2707:          # 8786 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2708:          PIE3 equ 0FA3h ;# 
2709:          # 8895 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2710:          PIR3 equ 0FA4h ;# 
2711:          # 8972 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2712:          IPR3 equ 0FA5h ;# 
2713:          # 9049 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2714:          EECON1 equ 0FA6h ;# 
2715:          # 9093 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2716:          EECON2 equ 0FA7h ;# 
2717:          # 9112 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2718:          TXSTA2 equ 0FA8h ;# 
2719:          # 9238 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2720:          TXREG2 equ 0FA9h ;# 
2721:          # 9257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2722:          RCREG2 equ 0FAAh ;# 
2723:          # 9276 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2724:          SPBRG2 equ 0FABh ;# 
2725:          # 9295 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2726:          RCSTA1 equ 0FACh ;# 
2727:          # 9300 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2728:          RCSTA equ 0FACh ;# 
2729:          # 9632 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2730:          TXSTA1 equ 0FADh ;# 
2731:          # 9637 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2732:          TXSTA equ 0FADh ;# 
2733:          # 9919 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2734:          TXREG1 equ 0FAEh ;# 
2735:          # 9924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2736:          TXREG equ 0FAEh ;# 
2737:          # 9956 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2738:          RCREG1 equ 0FAFh ;# 
2739:          # 9961 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2740:          RCREG equ 0FAFh ;# 
2741:          # 9993 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2742:          SPBRG1 equ 0FB0h ;# 
2743:          # 9998 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2744:          SPBRG equ 0FB0h ;# 
2745:          # 10030 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2746:          CTMUICON equ 0FB1h ;# 
2747:          # 10105 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2748:          CTMUCONL equ 0FB2h ;# 
2749:          # 10166 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2750:          CTMUCONH equ 0FB3h ;# 
2751:          # 10222 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2752:          CCP2CON equ 0FB4h ;# 
2753:          # 10227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2754:          ECCP2CON equ 0FB4h ;# 
2755:          # 10413 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2756:          CCPR2 equ 0FB5h ;# 
2757:          # 10419 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2758:          CCPR2L equ 0FB5h ;# 
2759:          # 10438 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2760:          CCPR2H equ 0FB6h ;# 
2761:          # 10457 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2762:          ECCP2DEL equ 0FB7h ;# 
2763:          # 10462 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2764:          PWM2CON equ 0FB7h ;# 
2765:          # 10594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2766:          ECCP2AS equ 0FB8h ;# 
2767:          # 10675 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2768:          PSTR2CON equ 0FB9h ;# 
2769:          # 10916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2770:          CCP1CON equ 0FBAh ;# 
2771:          # 10921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2772:          ECCP1CON equ 0FBAh ;# 
2773:          # 11107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2774:          CCPR1 equ 0FBBh ;# 
2775:          # 11113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2776:          CCPR1L equ 0FBBh ;# 
2777:          # 11132 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2778:          CCPR1H equ 0FBCh ;# 
2779:          # 11151 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2780:          ECCP1DEL equ 0FBDh ;# 
2781:          # 11156 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2782:          PWM1CON equ 0FBDh ;# 
2783:          # 11288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2784:          ECCP1AS equ 0FBEh ;# 
2785:          # 11369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2786:          PSTR1CON equ 0FBFh ;# 
2787:          # 11425 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2788:          WDTCON equ 0FC0h ;# 
2789:          # 11494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2790:          ADCON1 equ 0FC1h ;# 
2791:          # 11590 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2792:          ADCON0 equ 0FC2h ;# 
2793:          # 11733 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2794:          ADRES equ 0FC3h ;# 
2795:          # 11739 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2796:          ADRESL equ 0FC3h ;# 
2797:          # 11758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2798:          ADRESH equ 0FC4h ;# 
2799:          # 11777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2800:          SSP1CON2 equ 0FC5h ;# 
2801:          # 11782 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2802:          SSPCON2 equ 0FC5h ;# 
2803:          # 12130 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2804:          SSP1CON1 equ 0FC6h ;# 
2805:          # 12135 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2806:          SSPCON1 equ 0FC6h ;# 
2807:          # 12367 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2808:          SSP1STAT equ 0FC7h ;# 
2809:          # 12372 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2810:          SSPSTAT equ 0FC7h ;# 
2811:          # 12964 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2812:          SSP1ADD equ 0FC8h ;# 
2813:          # 12969 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2814:          SSPADD equ 0FC8h ;# 
2815:          # 13201 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2816:          SSP1MSK equ 0FC8h ;# 
2817:          # 13262 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2818:          SSP1BUF equ 0FC9h ;# 
2819:          # 13267 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2820:          SSPBUF equ 0FC9h ;# 
2821:          # 13299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2822:          T2CON equ 0FCAh ;# 
2823:          # 13369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2824:          PR2 equ 0FCBh ;# 
2825:          # 13374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2826:          MEMCON equ 0FCBh ;# 
2827:          # 13494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2828:          TMR2 equ 0FCCh ;# 
2829:          # 13513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2830:          T1CON equ 0FCDh ;# 
2831:          # 13614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2832:          TMR1 equ 0FCEh ;# 
2833:          # 13620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2834:          TMR1L equ 0FCEh ;# 
2835:          # 13639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2836:          TMR1H equ 0FCFh ;# 
2837:          # 13658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2838:          RCON equ 0FD0h ;# 
2839:          # 13805 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2840:          CM2CON equ 0FD1h ;# 
2841:          # 13810 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2842:          CM2CON1 equ 0FD1h ;# 
2843:          # 14056 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2844:          CM1CON equ 0FD2h ;# 
2845:          # 14061 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2846:          CM1CON1 equ 0FD2h ;# 
2847:          # 14335 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2848:          OSCCON equ 0FD3h ;# 
2849:          # 14406 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2850:          T0CON equ 0FD5h ;# 
2851:          # 14475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2852:          TMR0 equ 0FD6h ;# 
2853:          # 14481 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2854:          TMR0L equ 0FD6h ;# 
2855:          # 14500 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2856:          TMR0H equ 0FD7h ;# 
2857:          # 14519 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2858:          STATUS equ 0FD8h ;# 
2859:          # 14589 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2860:          FSR2 equ 0FD9h ;# 
2861:          # 14595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2862:          FSR2L equ 0FD9h ;# 
2863:          # 14614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2864:          FSR2H equ 0FDAh ;# 
2865:          # 14620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2866:          PLUSW2 equ 0FDBh ;# 
2867:          # 14639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2868:          PREINC2 equ 0FDCh ;# 
2869:          # 14658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2870:          POSTDEC2 equ 0FDDh ;# 
2871:          # 14677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2872:          POSTINC2 equ 0FDEh ;# 
2873:          # 14696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2874:          INDF2 equ 0FDFh ;# 
2875:          # 14715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2876:          BSR equ 0FE0h ;# 
2877:          # 14721 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2878:          FSR1 equ 0FE1h ;# 
2879:          # 14727 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2880:          FSR1L equ 0FE1h ;# 
2881:          # 14746 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2882:          FSR1H equ 0FE2h ;# 
2883:          # 14752 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2884:          PLUSW1 equ 0FE3h ;# 
2885:          # 14771 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2886:          PREINC1 equ 0FE4h ;# 
2887:          # 14790 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2888:          POSTDEC1 equ 0FE5h ;# 
2889:          # 14809 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2890:          POSTINC1 equ 0FE6h ;# 
2891:          # 14828 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2892:          INDF1 equ 0FE7h ;# 
2893:          # 14847 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2894:          WREG equ 0FE8h ;# 
2895:          # 14866 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2896:          FSR0 equ 0FE9h ;# 
2897:          # 14872 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2898:          FSR0L equ 0FE9h ;# 
2899:          # 14891 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2900:          FSR0H equ 0FEAh ;# 
2901:          # 14897 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2902:          PLUSW0 equ 0FEBh ;# 
2903:          # 14916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2904:          PREINC0 equ 0FECh ;# 
2905:          # 14935 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2906:          POSTDEC0 equ 0FEDh ;# 
2907:          # 14954 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2908:          POSTINC0 equ 0FEEh ;# 
2909:          # 14973 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2910:          INDF0 equ 0FEFh ;# 
2911:          # 14992 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2912:          INTCON3 equ 0FF0h ;# 
2913:          # 15103 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2914:          INTCON2 equ 0FF1h ;# 
2915:          # 15195 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2916:          INTCON equ 0FF2h ;# 
2917:          # 15311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2918:          PROD equ 0FF3h ;# 
2919:          # 15317 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2920:          PRODL equ 0FF3h ;# 
2921:          # 15336 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2922:          PRODH equ 0FF4h ;# 
2923:          # 15355 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2924:          TABLAT equ 0FF5h ;# 
2925:          # 15376 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2926:          TBLPTR equ 0FF6h ;# 
2927:          # 15382 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2928:          TBLPTRL equ 0FF6h ;# 
2929:          # 15401 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2930:          TBLPTRH equ 0FF7h ;# 
2931:          # 15420 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2932:          TBLPTRU equ 0FF8h ;# 
2933:          # 15428 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2934:          PCLAT equ 0FF9h ;# 
2935:          # 15435 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2936:          PC equ 0FF9h ;# 
2937:          # 15441 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2938:          PCL equ 0FF9h ;# 
2939:          # 15460 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2940:          PCLATH equ 0FFAh ;# 
2941:          # 15479 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2942:          PCLATU equ 0FFBh ;# 
2943:          # 15485 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2944:          STKPTR equ 0FFCh ;# 
2945:          # 15558 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2946:          TOS equ 0FFDh ;# 
2947:          # 15564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2948:          TOSL equ 0FFDh ;# 
2949:          # 15583 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2950:          TOSH equ 0FFEh ;# 
2951:          # 15602 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2952:          TOSU equ 0FFFh ;# 
2953:          # 51 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2954:          ADCTRIG equ 0EB8h ;# 
2955:          # 106 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2956:          PMDIS0 equ 0EB9h ;# 
2957:          # 111 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2958:          PD0 equ 0EB9h ;# 
2959:          # 411 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2960:          PMDIS1 equ 0EBAh ;# 
2961:          # 416 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2962:          PD1 equ 0EBAh ;# 
2963:          # 624 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2964:          PMDIS2 equ 0EBBh ;# 
2965:          # 629 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2966:          PD2 equ 0EBBh ;# 
2967:          # 833 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2968:          PMDIS3 equ 0EBCh ;# 
2969:          # 838 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2970:          PD3 equ 0EBCh ;# 
2971:          # 1070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2972:          PPSCON equ 0EBFh ;# 
2973:          # 1089 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2974:          RPOR0 equ 0EC0h ;# 
2975:          # 1095 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2976:          RPOR1 equ 0EC1h ;# 
2977:          # 1101 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2978:          RPOR2 equ 0EC2h ;# 
2979:          # 1107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2980:          RPOR3 equ 0EC3h ;# 
2981:          # 1113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2982:          RPOR4 equ 0EC4h ;# 
2983:          # 1119 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2984:          RPOR5 equ 0EC5h ;# 
2985:          # 1125 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2986:          RPOR6 equ 0EC6h ;# 
2987:          # 1131 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2988:          RPOR7 equ 0EC7h ;# 
2989:          # 1137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2990:          RPOR8 equ 0EC8h ;# 
2991:          # 1143 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2992:          RPOR9 equ 0EC9h ;# 
2993:          # 1149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2994:          RPOR10 equ 0ECAh ;# 
2995:          # 1155 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2996:          RPOR11 equ 0ECBh ;# 
2997:          # 1161 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
2998:          RPOR12 equ 0ECCh ;# 
2999:          # 1167 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3000:          RPOR13 equ 0ECDh ;# 
3001:          # 1173 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3002:          RPOR14 equ 0ECEh ;# 
3003:          # 1179 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3004:          RPOR15 equ 0ECFh ;# 
3005:          # 1185 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3006:          RPOR16 equ 0ED0h ;# 
3007:          # 1191 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3008:          RPOR17 equ 0ED1h ;# 
3009:          # 1197 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3010:          RPOR18 equ 0ED2h ;# 
3011:          # 1203 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3012:          RPINR1 equ 0EE1h ;# 
3013:          # 1209 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3014:          RPINR2 equ 0EE2h ;# 
3015:          # 1215 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3016:          RPINR3 equ 0EE3h ;# 
3017:          # 1221 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3018:          RPINR4 equ 0EE4h ;# 
3019:          # 1227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3020:          RPINR6 equ 0EE6h ;# 
3021:          # 1233 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3022:          RPINR15 equ 0EE7h ;# 
3023:          # 1239 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3024:          RPINR7 equ 0EE8h ;# 
3025:          # 1245 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3026:          RPINR8 equ 0EE9h ;# 
3027:          # 1251 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3028:          RPINR9 equ 0EEAh ;# 
3029:          # 1257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3030:          RPINR12 equ 0EF2h ;# 
3031:          # 1263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3032:          RPINR13 equ 0EF3h ;# 
3033:          # 1269 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3034:          RPINR14 equ 0EF4h ;# 
3035:          # 1275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3036:          RPINR16 equ 0EF7h ;# 
3037:          # 1281 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3038:          RPINR17 equ 0EF8h ;# 
3039:          # 1287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3040:          RPINR21 equ 0EFCh ;# 
3041:          # 1293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3042:          RPINR22 equ 0EFDh ;# 
3043:          # 1299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3044:          RPINR23 equ 0EFEh ;# 
3045:          # 1305 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3046:          RPINR24 equ 0EFFh ;# 
3047:          # 1311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3048:          CCP10CON equ 0F00h ;# 
3049:          # 1374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3050:          CCPR10L equ 0F01h ;# 
3051:          # 1393 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3052:          CCPR10H equ 0F02h ;# 
3053:          # 1412 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3054:          CCP9CON equ 0F03h ;# 
3055:          # 1475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3056:          CCPR9L equ 0F04h ;# 
3057:          # 1494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3058:          CCPR9H equ 0F05h ;# 
3059:          # 1513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3060:          CCP8CON equ 0F06h ;# 
3061:          # 1576 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3062:          CCPR8L equ 0F07h ;# 
3063:          # 1595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3064:          CCPR8H equ 0F08h ;# 
3065:          # 1614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3066:          CCP7CON equ 0F09h ;# 
3067:          # 1677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3068:          CCPR7L equ 0F0Ah ;# 
3069:          # 1696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3070:          CCPR7H equ 0F0Bh ;# 
3071:          # 1715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3072:          CCP6CON equ 0F0Ch ;# 
3073:          # 1778 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3074:          CCPR6L equ 0F0Dh ;# 
3075:          # 1797 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3076:          CCPR6H equ 0F0Eh ;# 
3077:          # 1816 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3078:          CCP5CON equ 0F0Fh ;# 
3079:          # 1879 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3080:          CCPR5L equ 0F10h ;# 
3081:          # 1898 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3082:          CCPR5H equ 0F11h ;# 
3083:          # 1917 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3084:          CCP4CON equ 0F12h ;# 
3085:          # 1980 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3086:          CCPR4L equ 0F13h ;# 
3087:          # 1999 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3088:          CCPR4H equ 0F14h ;# 
3089:          # 2018 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3090:          CCP3CON equ 0F15h ;# 
3091:          # 2099 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3092:          CCPR3L equ 0F16h ;# 
3093:          # 2118 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3094:          CCPR3H equ 0F17h ;# 
3095:          # 2137 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3096:          ECCP3DEL equ 0F18h ;# 
3097:          # 2206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3098:          ECCP3AS equ 0F19h ;# 
3099:          # 2287 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3100:          PSTR3CON equ 0F1Ah ;# 
3101:          # 2397 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3102:          T8CON equ 0F1Bh ;# 
3103:          # 2467 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3104:          PR8 equ 0F1Ch ;# 
3105:          # 2486 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3106:          TMR8 equ 0F1Dh ;# 
3107:          # 2505 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3108:          T6CON equ 0F1Eh ;# 
3109:          # 2575 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3110:          PR6 equ 0F1Fh ;# 
3111:          # 2594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3112:          TMR6 equ 0F20h ;# 
3113:          # 2613 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3114:          T5GCON equ 0F21h ;# 
3115:          # 2725 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3116:          T5CON equ 0F22h ;# 
3117:          # 2826 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3118:          TMR5L equ 0F23h ;# 
3119:          # 2845 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3120:          TMR5H equ 0F24h ;# 
3121:          # 2864 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3122:          CM3CON equ 0F25h ;# 
3123:          # 2990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3124:          RTCVALL equ 0F3Ah ;# 
3125:          # 3009 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3126:          RTCVALH equ 0F3Bh ;# 
3127:          # 3078 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3128:          PADCFG1 equ 0F3Ch ;# 
3129:          # 3104 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3130:          REFOCON equ 0F3Dh ;# 
3131:          # 3168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3132:          RTCCAL equ 0F3Eh ;# 
3133:          # 3237 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3134:          RTCCFG equ 0F3Fh ;# 
3135:          # 3293 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3136:          ODCON3 equ 0F40h ;# 
3137:          # 3325 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3138:          ODCON2 equ 0F41h ;# 
3139:          # 3362 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3140:          ODCON1 equ 0F42h ;# 
3141:          # 3423 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3142:          ALRMVALL equ 0F44h ;# 
3143:          # 3442 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3144:          ALRMVALH equ 0F45h ;# 
3145:          # 3461 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3146:          ALRMRPT equ 0F46h ;# 
3147:          # 3530 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3148:          ALRMCFG equ 0F47h ;# 
3149:          # 3605 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3150:          ANCON0 equ 0F48h ;# 
3151:          # 3648 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3152:          ANCON1 equ 0F49h ;# 
3153:          # 3707 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3154:          DSWAKEL equ 0F4Ah ;# 
3155:          # 3758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3156:          DSWAKEH equ 0F4Bh ;# 
3157:          # 3777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3158:          DSCONL equ 0F4Ch ;# 
3159:          # 3808 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3160:          DSCONH equ 0F4Dh ;# 
3161:          # 3840 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3162:          DSGPR0 equ 0F4Eh ;# 
3163:          # 3859 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3164:          DSGPR1 equ 0F4Fh ;# 
3165:          # 3878 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3166:          CCPTMRS2 equ 0F50h ;# 
3167:          # 3924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3168:          CCPTMRS1 equ 0F51h ;# 
3169:          # 3990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3170:          CCPTMRS0 equ 0F52h ;# 
3171:          # 4071 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3172:          CVRCON equ 0F53h ;# 
3173:          # 4149 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3174:          DMABCH equ 0F66h ;# 
3175:          # 4168 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3176:          DMABCL equ 0F67h ;# 
3177:          # 4187 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3178:          RXADDRH equ 0F68h ;# 
3179:          # 4206 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3180:          RXADDRL equ 0F69h ;# 
3181:          # 4225 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3182:          TXADDRH equ 0F6Ah ;# 
3183:          # 4244 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3184:          TXADDRL equ 0F6Bh ;# 
3185:          # 4263 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3186:          CMSTAT equ 0F70h ;# 
3187:          # 4268 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3188:          CMSTATUS equ 0F70h ;# 
3189:          # 4324 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3190:          SSP2CON2 equ 0F71h ;# 
3191:          # 4501 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3192:          SSP2CON1 equ 0F72h ;# 
3193:          # 4620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3194:          SSP2STAT equ 0F73h ;# 
3195:          # 4921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3196:          SSP2ADD equ 0F74h ;# 
3197:          # 4990 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3198:          SSP2MSK equ 0F74h ;# 
3199:          # 5051 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3200:          SSP2BUF equ 0F75h ;# 
3201:          # 5070 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3202:          T4CON equ 0F76h ;# 
3203:          # 5140 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3204:          PR4 equ 0F77h ;# 
3205:          # 5159 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3206:          TMR4 equ 0F78h ;# 
3207:          # 5178 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3208:          T3CON equ 0F79h ;# 
3209:          # 5288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3210:          TMR3 equ 0F7Ah ;# 
3211:          # 5294 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3212:          TMR3L equ 0F7Ah ;# 
3213:          # 5313 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3214:          TMR3H equ 0F7Bh ;# 
3215:          # 5332 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3216:          BAUDCON2 equ 0F7Ch ;# 
3217:          # 5454 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3218:          SPBRGH2 equ 0F7Dh ;# 
3219:          # 5473 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3220:          BAUDCON1 equ 0F7Eh ;# 
3221:          # 5478 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3222:          BAUDCON equ 0F7Eh ;# 
3223:          # 5482 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3224:          BAUDCTL equ 0F7Eh ;# 
3225:          # 5979 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3226:          SPBRGH1 equ 0F7Fh ;# 
3227:          # 5984 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3228:          SPBRGH equ 0F7Fh ;# 
3229:          # 6016 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3230:          PORTA equ 0F80h ;# 
3231:          # 6278 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3232:          PORTB equ 0F81h ;# 
3233:          # 6564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3234:          PORTC equ 0F82h ;# 
3235:          # 6819 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3236:          HLVDCON equ 0F85h ;# 
3237:          # 6888 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3238:          DMACON2 equ 0F86h ;# 
3239:          # 6963 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3240:          OSCCON2 equ 0F87h ;# 
3241:          # 7002 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3242:          DMACON1 equ 0F88h ;# 
3243:          # 7063 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3244:          LATA equ 0F89h ;# 
3245:          # 7164 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3246:          LATB equ 0F8Ah ;# 
3247:          # 7275 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3248:          LATC equ 0F8Bh ;# 
3249:          # 7386 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3250:          PIE4 equ 0F8Eh ;# 
3251:          # 7447 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3252:          PIR4 equ 0F8Fh ;# 
3253:          # 7508 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3254:          IPR4 equ 0F90h ;# 
3255:          # 7577 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3256:          PIE5 equ 0F91h ;# 
3257:          # 7626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3258:          TRISA equ 0F92h ;# 
3259:          # 7682 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3260:          TRISB equ 0F93h ;# 
3261:          # 7743 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3262:          TRISC equ 0F94h ;# 
3263:          # 7804 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3264:          T3GCON equ 0F97h ;# 
3265:          # 7883 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3266:          PIR5 equ 0F98h ;# 
3267:          # 7932 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3268:          IPR5 equ 0F99h ;# 
3269:          # 8008 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3270:          T1GCON equ 0F9Ah ;# 
3271:          # 8114 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3272:          OSCTUNE equ 0F9Bh ;# 
3273:          # 8183 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3274:          RCSTA2 equ 0F9Ch ;# 
3275:          # 8318 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3276:          PIE1 equ 0F9Dh ;# 
3277:          # 8394 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3278:          PIR1 equ 0F9Eh ;# 
3279:          # 8470 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3280:          IPR1 equ 0F9Fh ;# 
3281:          # 8546 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3282:          PIE2 equ 0FA0h ;# 
3283:          # 8626 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3284:          PIR2 equ 0FA1h ;# 
3285:          # 8706 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3286:          IPR2 equ 0FA2h ;# 
3287:          # 8786 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3288:          PIE3 equ 0FA3h ;# 
3289:          # 8895 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3290:          PIR3 equ 0FA4h ;# 
3291:          # 8972 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3292:          IPR3 equ 0FA5h ;# 
3293:          # 9049 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3294:          EECON1 equ 0FA6h ;# 
3295:          # 9093 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3296:          EECON2 equ 0FA7h ;# 
3297:          # 9112 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3298:          TXSTA2 equ 0FA8h ;# 
3299:          # 9238 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3300:          TXREG2 equ 0FA9h ;# 
3301:          # 9257 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3302:          RCREG2 equ 0FAAh ;# 
3303:          # 9276 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3304:          SPBRG2 equ 0FABh ;# 
3305:          # 9295 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3306:          RCSTA1 equ 0FACh ;# 
3307:          # 9300 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3308:          RCSTA equ 0FACh ;# 
3309:          # 9632 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3310:          TXSTA1 equ 0FADh ;# 
3311:          # 9637 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3312:          TXSTA equ 0FADh ;# 
3313:          # 9919 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3314:          TXREG1 equ 0FAEh ;# 
3315:          # 9924 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3316:          TXREG equ 0FAEh ;# 
3317:          # 9956 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3318:          RCREG1 equ 0FAFh ;# 
3319:          # 9961 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3320:          RCREG equ 0FAFh ;# 
3321:          # 9993 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3322:          SPBRG1 equ 0FB0h ;# 
3323:          # 9998 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3324:          SPBRG equ 0FB0h ;# 
3325:          # 10030 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3326:          CTMUICON equ 0FB1h ;# 
3327:          # 10105 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3328:          CTMUCONL equ 0FB2h ;# 
3329:          # 10166 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3330:          CTMUCONH equ 0FB3h ;# 
3331:          # 10222 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3332:          CCP2CON equ 0FB4h ;# 
3333:          # 10227 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3334:          ECCP2CON equ 0FB4h ;# 
3335:          # 10413 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3336:          CCPR2 equ 0FB5h ;# 
3337:          # 10419 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3338:          CCPR2L equ 0FB5h ;# 
3339:          # 10438 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3340:          CCPR2H equ 0FB6h ;# 
3341:          # 10457 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3342:          ECCP2DEL equ 0FB7h ;# 
3343:          # 10462 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3344:          PWM2CON equ 0FB7h ;# 
3345:          # 10594 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3346:          ECCP2AS equ 0FB8h ;# 
3347:          # 10675 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3348:          PSTR2CON equ 0FB9h ;# 
3349:          # 10916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3350:          CCP1CON equ 0FBAh ;# 
3351:          # 10921 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3352:          ECCP1CON equ 0FBAh ;# 
3353:          # 11107 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3354:          CCPR1 equ 0FBBh ;# 
3355:          # 11113 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3356:          CCPR1L equ 0FBBh ;# 
3357:          # 11132 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3358:          CCPR1H equ 0FBCh ;# 
3359:          # 11151 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3360:          ECCP1DEL equ 0FBDh ;# 
3361:          # 11156 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3362:          PWM1CON equ 0FBDh ;# 
3363:          # 11288 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3364:          ECCP1AS equ 0FBEh ;# 
3365:          # 11369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3366:          PSTR1CON equ 0FBFh ;# 
3367:          # 11425 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3368:          WDTCON equ 0FC0h ;# 
3369:          # 11494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3370:          ADCON1 equ 0FC1h ;# 
3371:          # 11590 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3372:          ADCON0 equ 0FC2h ;# 
3373:          # 11733 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3374:          ADRES equ 0FC3h ;# 
3375:          # 11739 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3376:          ADRESL equ 0FC3h ;# 
3377:          # 11758 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3378:          ADRESH equ 0FC4h ;# 
3379:          # 11777 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3380:          SSP1CON2 equ 0FC5h ;# 
3381:          # 11782 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3382:          SSPCON2 equ 0FC5h ;# 
3383:          # 12130 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3384:          SSP1CON1 equ 0FC6h ;# 
3385:          # 12135 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3386:          SSPCON1 equ 0FC6h ;# 
3387:          # 12367 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3388:          SSP1STAT equ 0FC7h ;# 
3389:          # 12372 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3390:          SSPSTAT equ 0FC7h ;# 
3391:          # 12964 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3392:          SSP1ADD equ 0FC8h ;# 
3393:          # 12969 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3394:          SSPADD equ 0FC8h ;# 
3395:          # 13201 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3396:          SSP1MSK equ 0FC8h ;# 
3397:          # 13262 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3398:          SSP1BUF equ 0FC9h ;# 
3399:          # 13267 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3400:          SSPBUF equ 0FC9h ;# 
3401:          # 13299 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3402:          T2CON equ 0FCAh ;# 
3403:          # 13369 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3404:          PR2 equ 0FCBh ;# 
3405:          # 13374 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3406:          MEMCON equ 0FCBh ;# 
3407:          # 13494 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3408:          TMR2 equ 0FCCh ;# 
3409:          # 13513 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3410:          T1CON equ 0FCDh ;# 
3411:          # 13614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3412:          TMR1 equ 0FCEh ;# 
3413:          # 13620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3414:          TMR1L equ 0FCEh ;# 
3415:          # 13639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3416:          TMR1H equ 0FCFh ;# 
3417:          # 13658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3418:          RCON equ 0FD0h ;# 
3419:          # 13805 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3420:          CM2CON equ 0FD1h ;# 
3421:          # 13810 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3422:          CM2CON1 equ 0FD1h ;# 
3423:          # 14056 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3424:          CM1CON equ 0FD2h ;# 
3425:          # 14061 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3426:          CM1CON1 equ 0FD2h ;# 
3427:          # 14335 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3428:          OSCCON equ 0FD3h ;# 
3429:          # 14406 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3430:          T0CON equ 0FD5h ;# 
3431:          # 14475 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3432:          TMR0 equ 0FD6h ;# 
3433:          # 14481 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3434:          TMR0L equ 0FD6h ;# 
3435:          # 14500 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3436:          TMR0H equ 0FD7h ;# 
3437:          # 14519 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3438:          STATUS equ 0FD8h ;# 
3439:          # 14589 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3440:          FSR2 equ 0FD9h ;# 
3441:          # 14595 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3442:          FSR2L equ 0FD9h ;# 
3443:          # 14614 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3444:          FSR2H equ 0FDAh ;# 
3445:          # 14620 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3446:          PLUSW2 equ 0FDBh ;# 
3447:          # 14639 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3448:          PREINC2 equ 0FDCh ;# 
3449:          # 14658 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3450:          POSTDEC2 equ 0FDDh ;# 
3451:          # 14677 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3452:          POSTINC2 equ 0FDEh ;# 
3453:          # 14696 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3454:          INDF2 equ 0FDFh ;# 
3455:          # 14715 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3456:          BSR equ 0FE0h ;# 
3457:          # 14721 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3458:          FSR1 equ 0FE1h ;# 
3459:          # 14727 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3460:          FSR1L equ 0FE1h ;# 
3461:          # 14746 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3462:          FSR1H equ 0FE2h ;# 
3463:          # 14752 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3464:          PLUSW1 equ 0FE3h ;# 
3465:          # 14771 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3466:          PREINC1 equ 0FE4h ;# 
3467:          # 14790 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3468:          POSTDEC1 equ 0FE5h ;# 
3469:          # 14809 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3470:          POSTINC1 equ 0FE6h ;# 
3471:          # 14828 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3472:          INDF1 equ 0FE7h ;# 
3473:          # 14847 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3474:          WREG equ 0FE8h ;# 
3475:          # 14866 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3476:          FSR0 equ 0FE9h ;# 
3477:          # 14872 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3478:          FSR0L equ 0FE9h ;# 
3479:          # 14891 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3480:          FSR0H equ 0FEAh ;# 
3481:          # 14897 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3482:          PLUSW0 equ 0FEBh ;# 
3483:          # 14916 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3484:          PREINC0 equ 0FECh ;# 
3485:          # 14935 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3486:          POSTDEC0 equ 0FEDh ;# 
3487:          # 14954 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3488:          POSTINC0 equ 0FEEh ;# 
3489:          # 14973 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3490:          INDF0 equ 0FEFh ;# 
3491:          # 14992 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3492:          INTCON3 equ 0FF0h ;# 
3493:          # 15103 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3494:          INTCON2 equ 0FF1h ;# 
3495:          # 15195 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3496:          INTCON equ 0FF2h ;# 
3497:          # 15311 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3498:          PROD equ 0FF3h ;# 
3499:          # 15317 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3500:          PRODL equ 0FF3h ;# 
3501:          # 15336 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3502:          PRODH equ 0FF4h ;# 
3503:          # 15355 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3504:          TABLAT equ 0FF5h ;# 
3505:          # 15376 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3506:          TBLPTR equ 0FF6h ;# 
3507:          # 15382 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3508:          TBLPTRL equ 0FF6h ;# 
3509:          # 15401 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3510:          TBLPTRH equ 0FF7h ;# 
3511:          # 15420 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3512:          TBLPTRU equ 0FF8h ;# 
3513:          # 15428 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3514:          PCLAT equ 0FF9h ;# 
3515:          # 15435 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3516:          PC equ 0FF9h ;# 
3517:          # 15441 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3518:          PCL equ 0FF9h ;# 
3519:          # 15460 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3520:          PCLATH equ 0FFAh ;# 
3521:          # 15479 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3522:          PCLATU equ 0FFBh ;# 
3523:          # 15485 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3524:          STKPTR equ 0FFCh ;# 
3525:          # 15558 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3526:          TOS equ 0FFDh ;# 
3527:          # 15564 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3528:          TOSL equ 0FFDh ;# 
3529:          # 15583 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3530:          TOSH equ 0FFEh ;# 
3531:          # 15602 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\pic18f27j13.h"
3532:          TOSU equ 0FFFh ;# 
3533:          	FNCALL	_main,_ButtonInfoCreate
3534:          	FNCALL	_main,_CheckButton
3535:          	FNCALL	_main,_CheckFlowControlRx1
3536:          	FNCALL	_main,_CheckFlowControlRx2
3537:          	FNCALL	_main,_InitializeInterrupts
3538:          	FNCALL	_main,_InitializeOscillator
3539:          	FNCALL	_main,_InitializePorts
3540:          	FNCALL	_main,_InitializeSpi
3541:          	FNCALL	_main,_InitializeTimers
3542:          	FNCALL	_main,_InitializeUSART
3543:          	FNCALL	_main,_InitializeWDT
3544:          	FNCALL	_main,_RingBufferCreate
3545:          	FNCALL	_main,_SramFill
3546:          	FNCALL	_main,_SramFillNext
3547:          	FNCALL	_main,_SramSetMode
3548:          	FNCALL	_main,_getch1
3549:          	FNCALL	_main,_getch2
3550:          	FNCALL	_main,_ltoa
3551:          	FNCALL	_main,_printf
3552:          	FNCALL	_main,_putch1
3553:          	FNCALL	_main,_putch2
3554:          	FNCALL	_printf,_putch
3555:          	FNCALL	_putch,_putch1
3556:          	FNCALL	_putch,_putch2
3557:          	FNCALL	_putch2,_RingBufferDequeue
3558:          	FNCALL	_putch2,_RingBufferEnqueue
3559:          	FNCALL	_putch1,_RingBufferDequeue
3560:          	FNCALL	_putch1,_RingBufferEnqueue
3561:          	FNCALL	_RingBufferEnqueue,___awmod
3562:          	FNCALL	_ltoa,_ultoa
3563:          	FNCALL	_ultoa,___lldiv
3564:          	FNCALL	_ultoa,___llmod
3565:          	FNCALL	_getch2,_RingBufferDequeue
3566:          	FNCALL	_getch1,_RingBufferDequeue
3567:          	FNCALL	_RingBufferDequeue,___awmod
3568:          	FNCALL	_CheckButton,_ButtonHold
3569:          	FNCALL	_CheckButton,_ButtonPress
3570:          	FNCALL	_CheckButton,_ButtonRelease
3571:          	FNROOT	_main
3572:          	FNCALL	_isrLowPriority,i1_RingBufferDequeue
3573:          	FNCALL	_isrLowPriority,i1_RingBufferEnqueue
3574:          	FNCALL	i1_RingBufferEnqueue,i1___awmod
3575:          	FNCALL	i1_RingBufferDequeue,i1___awmod
3576:          	FNCALL	intlevel1,_isrLowPriority
3577:          	global	intlevel1
3578:          	FNROOT	intlevel1
3579:          	FNCALL	_isrHighPriority,_UpdateButtonState
3580:          	FNCALL	intlevel2,_isrHighPriority
3581:          	global	intlevel2
3582:          	FNROOT	intlevel2
3583:          	global	__txBuffer2
3584:          	global	__txBuffer1
3585:          	global	__sramBuffer
3586:          	global	__sramStatus
3587:          	global	__tick
3588:          	global	__wifiConnectStatus
3589:          	global	__commStatus2
3590:          	global	__commStatus1
3591:          	global	__button
3592:          	global	__rxBuffer2
3593:          	global	__rxBuffer1
3594:          	global	_RPOR11
3595:          _RPOR11	set	0xECB
3596:          	global	_RPOR8
3597:          _RPOR8	set	0xEC8
3598:          	global	_RPOR7
3599:          _RPOR7	set	0xEC7
3600:          	global	_RPINR16
3601:          _RPINR16	set	0xEF7
3602:          	global	_RPINR22
3603:          _RPINR22	set	0xEFD
3604:          	global	_RPINR21
3605:          _RPINR21	set	0xEFC
3606:          	global	_RPINR1
3607:          _RPINR1	set	0xEE1
3608:          	global	_PPSCONbits
3609:          _PPSCONbits	set	0xEBF
3610:          	global	_ODCON3bits
3611:          _ODCON3bits	set	0xF40
3612:          	global	_ANCON1bits
3613:          _ANCON1bits	set	0xF49
3614:          	global	_ANCON1
3615:          _ANCON1	set	0xF49
3616:          	global	_ANCON0
3617:          _ANCON0	set	0xF48
3618:          	global	_REFOCONbits
3619:          _REFOCONbits	set	0xF3D
3620:          	global	_DMABCL
3621:          _DMABCL	set	0xF67
3622:          	global	_DMABCH
3623:          _DMABCH	set	0xF66
3624:          	global	_RXADDRL
3625:          _RXADDRL	set	0xF69
3626:          	global	_RXADDRH
3627:          _RXADDRH	set	0xF68
3628:          	global	_TXADDRL
3629:          _TXADDRL	set	0xF6B
3630:          	global	_TXADDRH
3631:          _TXADDRH	set	0xF6A
3632:          	global	_TXREG2
3633:          _TXREG2	set	0xFA9
3634:          	global	_TXREG1
3635:          _TXREG1	set	0xFAE
3636:          	global	_RCREG2
3637:          _RCREG2	set	0xFAA
3638:          	global	_RCREG1
3639:          _RCREG1	set	0xFAF
3640:          	global	_PIR1bits
3641:          _PIR1bits	set	0xF9E
3642:          	global	_LATBbits
3643:          _LATBbits	set	0xF8A
3644:          	global	_PORTAbits
3645:          _PORTAbits	set	0xF80
3646:          	global	_PIR3bits
3647:          _PIR3bits	set	0xFA4
3648:          	global	_INTCONbits
3649:          _INTCONbits	set	0xFF2
3650:          	global	_RCONbits
3651:          _RCONbits	set	0xFD0
3652:          	global	_PIE1bits
3653:          _PIE1bits	set	0xF9D
3654:          	global	_IPR1bits
3655:          _IPR1bits	set	0xF9F
3656:          	global	_PIE3bits
3657:          _PIE3bits	set	0xFA3
3658:          	global	_IPR3bits
3659:          _IPR3bits	set	0xFA5
3660:          	global	_INTCON3bits
3661:          _INTCON3bits	set	0xFF0
3662:          	global	_RCSTA2bits
3663:          _RCSTA2bits	set	0xF9C
3664:          	global	_BAUDCON2bits
3665:          _BAUDCON2bits	set	0xF7C
3666:          	global	_TXSTA2bits
3667:          _TXSTA2bits	set	0xFA8
3668:          	global	_SPBRG2
3669:          _SPBRG2	set	0xFAB
3670:          	global	_SPBRGH2
3671:          _SPBRGH2	set	0xF7D
3672:          	global	_BAUDCON1bits
3673:          _BAUDCON1bits	set	0xF7E
3674:          	global	_TXSTA1bits
3675:          _TXSTA1bits	set	0xFAD
3676:          	global	_SPBRG1
3677:          _SPBRG1	set	0xFB0
3678:          	global	_SPBRGH1
3679:          _SPBRGH1	set	0xF7F
3680:          	global	_DMACON2bits
3681:          _DMACON2bits	set	0xF86
3682:          	global	_DMACON1bits
3683:          _DMACON1bits	set	0xF88
3684:          	global	_SSP2STATbits
3685:          _SSP2STATbits	set	0xF73
3686:          	global	_SSP2CON1bits
3687:          _SSP2CON1bits	set	0xF72
3688:          	global	_PR4
3689:          _PR4	set	0xF77
3690:          	global	_EECON2
3691:          _EECON2	set	0xFA7
3692:          	global	_TRISC
3693:          _TRISC	set	0xF94
3694:          	global	_LATC
3695:          _LATC	set	0xF8B
3696:          	global	_TRISB
3697:          _TRISB	set	0xF93
3698:          	global	_LATB
3699:          _LATB	set	0xF8A
3700:          	global	_INTCON2bits
3701:          _INTCON2bits	set	0xFF1
3702:          	global	_TRISA
3703:          _TRISA	set	0xF92
3704:          	global	_LATA
3705:          _LATA	set	0xF89
3706:          	global	_WDTCONbits
3707:          _WDTCONbits	set	0xFC0
3708:          	global	_OSCCONbits
3709:          _OSCCONbits	set	0xFD3
3710:          	global	_RCSTA1bits
3711:          _RCSTA1bits	set	0xFAC
3712:          	global	_LATAbits
3713:          _LATAbits	set	0xF89
3714:          	global	_T4CONbits
3715:          _T4CONbits	set	0xF76
3716:          psect	smallconst,class=SMALLCONST,space=0,reloc=2,noexec
3717:          global __psmallconst
3718:          __psmallconst:
3719:          	db	0
3720:          	
3721:          STR_1:
3722:          	db	82	;'R'
3723:          	db	69	;'E'
3724:          	db	65	;'A'
3725:          	db	68	;'D'
3726:          	db	32
3727:          	db	65	;'A'
3728:          	db	68	;'D'
3729:          	db	68	;'D'
3730:          	db	82	;'R'
3731:          	db	69	;'E'
3732:          	db	83	;'S'
3733:          	db	83	;'S'
3734:          	db	32
3735:          	db	61	;'='
3736:          	db	32
3737:          	db	48	;'0'
3738:          	db	120	;'x'
3739:          	db	37
3740:          	db	115	;'s'
3741:          	db	10
3742:          	db	13
3743:          	db	0
3744:          	
3745:          STR_2:
3746:          	db	40
3747:          	db	110	;'n'
3748:          	db	117	;'u'
3749:          	db	108	;'l'
3750:          	db	108	;'l'
3751:          	db	41
3752:          	db	0
3753:          ; #config settings
3754:          global __CFG_WDTEN$OFF
3755:          __CFG_WDTEN$OFF equ 0x0
3756:          global __CFG_PLLDIV$2
3757:          __CFG_PLLDIV$2 equ 0x0
3758:          global __CFG_CFGPLLEN$ON
3759:          __CFG_CFGPLLEN$ON equ 0x0
3760:          global __CFG_STVREN$ON
3761:          __CFG_STVREN$ON equ 0x0
3762:          global __CFG_XINST$OFF
3763:          __CFG_XINST$OFF equ 0x0
3764:          global __CFG_CP0$OFF
3765:          __CFG_CP0$OFF equ 0x0
3766:          global __CFG_OSC$INTOSCPLL
3767:          __CFG_OSC$INTOSCPLL equ 0x0
3768:          global __CFG_SOSCSEL$DIG
3769:          __CFG_SOSCSEL$DIG equ 0x0
3770:          global __CFG_CLKOEC$OFF
3771:          __CFG_CLKOEC$OFF equ 0x0
3772:          global __CFG_FCMEN$ON
3773:          __CFG_FCMEN$ON equ 0x0
3774:          global __CFG_IESO$OFF
3775:          __CFG_IESO$OFF equ 0x0
3776:          global __CFG_WDTPS$32768
3777:          __CFG_WDTPS$32768 equ 0x0
3778:          global __CFG_DSWDTOSC$T1OSCREF
3779:          __CFG_DSWDTOSC$T1OSCREF equ 0x0
3780:          global __CFG_RTCOSC$T1OSCREF
3781:          __CFG_RTCOSC$T1OSCREF equ 0x0
3782:          global __CFG_DSBOREN$ON
3783:          __CFG_DSBOREN$ON equ 0x0
3784:          global __CFG_DSWDTEN$ON
3785:          __CFG_DSWDTEN$ON equ 0x0
3786:          global __CFG_DSWDTPS$G2
3787:          __CFG_DSWDTPS$G2 equ 0x0
3788:          global __CFG_IOL1WAY$ON
3789:          __CFG_IOL1WAY$ON equ 0x0
3790:          global __CFG_ADCSEL$BIT12
3791:          __CFG_ADCSEL$BIT12 equ 0x0
3792:          global __CFG_PLLSEL$PLL96
3793:          __CFG_PLLSEL$PLL96 equ 0x0
3794:          global __CFG_MSSP7B_EN$MSK7
3795:          __CFG_MSSP7B_EN$MSK7 equ 0x0
3796:          global __CFG_WPFP$PAGE_127
3797:          __CFG_WPFP$PAGE_127 equ 0x0
3798:          global __CFG_WPCFG$OFF
3799:          __CFG_WPCFG$OFF equ 0x0
3800:          global __CFG_WPDIS$OFF
3801:          __CFG_WPDIS$OFF equ 0x0
3802:          global __CFG_WPEND$PAGE_WPFP
3803:          __CFG_WPEND$PAGE_WPFP equ 0x0
3804:          	file	"dist/default/debug\SmartModule.X.debug.as"
3805:          	line	#
3806:          psect	cinit,class=CODE,delta=1,reloc=2
3807:          global __pcinit
3808:          __pcinit:
3809:          global start_initialization
3810:          start_initialization:
3811:          
3812:          global __initialization
3813:          __initialization:
3814:          psect	bssCOMRAM,class=COMRAM,space=1,noexec
3815:          global __pbssCOMRAM
3816:          __pbssCOMRAM:
3817:          	global	__txBuffer2
3818:          __txBuffer2:
3819:                 ds      6
3820:          	global	__txBuffer1
3821:          __txBuffer1:
3822:                 ds      6
3823:          psect	bssBANK0,class=BANK0,space=1,noexec,lowdata
3824:          global __pbssBANK0
3825:          __pbssBANK0:
3826:          	global	__sramStatus
3827:          __sramStatus:
3828:                 ds      10
3829:          	global	__tick
3830:          __tick:
3831:                 ds      4
3832:          	global	__wifiConnectStatus
3833:          __wifiConnectStatus:
3834:                 ds      1
3835:          	global	__commStatus2
3836:          __commStatus2:
3837:                 ds      1
3838:          	global	__commStatus1
3839:          __commStatus1:
3840:                 ds      1
3841:          	global	__button
3842:          __button:
3843:                 ds      15
3844:          	global	__rxBuffer2
3845:          __rxBuffer2:
3846:                 ds      6
3847:          	global	__rxBuffer1
3848:          __rxBuffer1:
3849:                 ds      6
3850:          psect	bssBIGRAM,class=BIGRAM,space=1,noexec,lowdata
3851:          global __pbssBIGRAM
3852:          __pbssBIGRAM:
3853:          	global	__sramBuffer
2108  EE03     LFSR 0, 0x300
3854:          __sramBuffer:
210C  EE11     LFSR 1, 0x108
3855:                 ds      264
3856:          	file	"dist/default/debug\SmartModule.X.debug.as"
2110  6AEE     CLRF POSTINC0, ACCESS
3857:          	line	#
2112  50E5     MOVF POSTDEC1, W, ACCESS
3858:          psect	cinit
2114  50E1     MOVF FSR1, W, ACCESS
3859:          ; Clear objects allocated to BIGRAM (264 bytes)
2116  E1FC     BNZ 0x2110
3860:          	global __pbssBIGRAM
2118  50E2     MOVF FSR1H, W, ACCESS
3861:          lfsr	0,__pbssBIGRAM
211A  E1FA     BNZ 0x2110
3862:          lfsr	1,264
3863:          clear_0:
3864:          clrf	postinc0,c
211C  EE00     LFSR 0, 0xA3
3865:          movf	postdec1,w
2120  0E2C     MOVLW 0x2C
3866:          movf	fsr1l,w
3867:          bnz	clear_0
2122  6AEE     CLRF POSTINC0, ACCESS
3868:          movf	fsr1h,w
2124  06E8     DECF WREG, F, ACCESS
3869:          bnz	clear_0
2126  E1FD     BNZ 0x2122
3870:          ; Clear objects allocated to BANK0 (44 bytes)
3871:          	global __pbssBANK0
3872:          lfsr	0,__pbssBANK0
2128  EE00     LFSR 0, 0x46
3873:          movlw	44
212C  0E0C     MOVLW 0xC
3874:          clear_1:
3875:          clrf	postinc0,c
212E  6AEE     CLRF POSTINC0, ACCESS
3876:          decf	wreg
2130  06E8     DECF WREG, F, ACCESS
3877:          bnz	clear_1
2132  E1FD     BNZ 0x212E
3878:          ; Clear objects allocated to COMRAM (12 bytes)
3879:          	global __pbssCOMRAM
3880:          lfsr	0,__pbssCOMRAM
3881:          movlw	12
3882:          clear_2:
3883:          clrf	postinc0,c
3884:          decf	wreg
3885:          bnz	clear_2
2134  9052     BCF btemp, 0, ACCESS
3886:          psect cinit,class=CODE,delta=1
2136  9252     BCF btemp, 1, ACCESS
3887:          global end_of_initialization,__end_of__initialization
2138  0100     MOVLB 0x0
3888:          
213A  EF90     GOTO 0xF20
3889:          ;End of C runtime variable initialization code
3890:          
3891:          end_of_initialization:
3892:          __end_of__initialization:
3893:          	bcf int$flags,0,c ;clear compiler interrupt flag (level 1)
3894:          	bcf int$flags,1,c ;clear compiler interrupt flag (level 2)
3895:          movlb 0
3896:          goto _main	;jump to C main() function
3897:          psect	cstackBANK2,class=BANK2,space=1,noexec
3898:          global __pcstackBANK2
3899:          __pcstackBANK2:
3900:          	global	main@rxBufferData2
3901:          main@rxBufferData2:	; 256 bytes @ 0x0
3902:          	ds   256
3903:          psect	cstackBANK1,class=BANK1,space=1,noexec
3904:          global __pcstackBANK1
3905:          __pcstackBANK1:
3906:          	global	main@rxBufferData1
3907:          main@rxBufferData1:	; 256 bytes @ 0x0
3908:          	ds   256
3909:          psect	cstackBANK0,class=BANK0,space=1,noexec
3910:          global __pcstackBANK0
3911:          __pcstackBANK0:
3912:          	global	main@txBufferData1
3913:          main@txBufferData1:	; 32 bytes @ 0x0
3914:          	ds   32
3915:          	global	main@txBufferData2
3916:          main@txBufferData2:	; 32 bytes @ 0x20
3917:          	ds   32
3918:          	global	main@mode
3919:          main@mode:	; 1 bytes @ 0x40
3920:          	ds   1
3921:          	global	main@i
3922:          main@i:	; 2 bytes @ 0x41
3923:          	ds   2
3924:          psect	cstackCOMRAM,class=COMRAM,space=1,noexec
3925:          global __pcstackCOMRAM
3926:          __pcstackCOMRAM:
3927:          ?_InitializeOscillator:	; 1 bytes @ 0x0
3928:          ?_InitializeWDT:	; 1 bytes @ 0x0
3929:          ?_InitializePorts:	; 1 bytes @ 0x0
3930:          ?_InitializeTimers:	; 1 bytes @ 0x0
3931:          ?_InitializeSpi:	; 1 bytes @ 0x0
3932:          ?_InitializeUSART:	; 1 bytes @ 0x0
3933:          ?_InitializeInterrupts:	; 1 bytes @ 0x0
3934:          ?_ButtonPress:	; 1 bytes @ 0x0
3935:          ?_ButtonHold:	; 1 bytes @ 0x0
3936:          ?_ButtonRelease:	; 1 bytes @ 0x0
3937:          ?_SramSetMode:	; 1 bytes @ 0x0
3938:          ?_CheckFlowControlRx1:	; 1 bytes @ 0x0
3939:          ?_putch2:	; 1 bytes @ 0x0
3940:          ?_getch1:	; 1 bytes @ 0x0
3941:          ?_CheckFlowControlRx2:	; 1 bytes @ 0x0
3942:          ?_putch1:	; 1 bytes @ 0x0
3943:          ?_getch2:	; 1 bytes @ 0x0
3944:          ?_SramFillNext:	; 1 bytes @ 0x0
3945:          ?_UpdateButtonState:	; 1 bytes @ 0x0
3946:          ?_main:	; 1 bytes @ 0x0
3947:          ?_isrHighPriority:	; 1 bytes @ 0x0
3948:          ?_isrLowPriority:	; 1 bytes @ 0x0
3949:          ?_putch:	; 1 bytes @ 0x0
3950:          	global	UpdateButtonState@buttonInfo
3951:          UpdateButtonState@buttonInfo:	; 1 bytes @ 0x0
3952:          	ds   1
3953:          	global	UpdateButtonState@currentLogicLevel
3954:          UpdateButtonState@currentLogicLevel:	; 1 bytes @ 0x1
3955:          	ds   1
3956:          ??_UpdateButtonState:	; 1 bytes @ 0x2
3957:          	ds   1
3958:          ??_isrHighPriority:	; 1 bytes @ 0x3
3959:          	ds   4
3960:          	global	?i1___awmod
3961:          ?i1___awmod:	; 2 bytes @ 0x7
3962:          	global	i1___awmod@dividend
3963:          i1___awmod@dividend:	; 2 bytes @ 0x7
3964:          	ds   2
3965:          	global	i1___awmod@divisor
3966:          i1___awmod@divisor:	; 2 bytes @ 0x9
3967:          	ds   2
3968:          ??i1___awmod:	; 1 bytes @ 0xB
3969:          	global	i1___awmod@counter
3970:          i1___awmod@counter:	; 1 bytes @ 0xB
3971:          	ds   1
3972:          	global	i1___awmod@sign
3973:          i1___awmod@sign:	; 1 bytes @ 0xC
3974:          	ds   1
3975:          ?i1_RingBufferEnqueue:	; 1 bytes @ 0xD
3976:          ?i1_RingBufferDequeue:	; 1 bytes @ 0xD
3977:          	global	i1RingBufferEnqueue@buffer
3978:          i1RingBufferEnqueue@buffer:	; 1 bytes @ 0xD
3979:          	global	i1RingBufferDequeue@buffer
3980:          i1RingBufferDequeue@buffer:	; 1 bytes @ 0xD
3981:          	ds   1
3982:          ??i1_RingBufferDequeue:	; 1 bytes @ 0xE
3983:          	global	i1RingBufferEnqueue@data
3984:          i1RingBufferEnqueue@data:	; 1 bytes @ 0xE
3985:          	ds   1
3986:          ??i1_RingBufferEnqueue:	; 1 bytes @ 0xF
3987:          	ds   2
3988:          	global	i1RingBufferDequeue@data
3989:          i1RingBufferDequeue@data:	; 1 bytes @ 0x11
3990:          	ds   1
3991:          ??_isrLowPriority:	; 1 bytes @ 0x12
3992:          	ds   7
3993:          ??_InitializeOscillator:	; 1 bytes @ 0x19
3994:          ??_InitializeWDT:	; 1 bytes @ 0x19
3995:          ??_InitializePorts:	; 1 bytes @ 0x19
3996:          ??_InitializeTimers:	; 1 bytes @ 0x19
3997:          ??_InitializeSpi:	; 1 bytes @ 0x19
3998:          ??_InitializeUSART:	; 1 bytes @ 0x19
3999:          ??_InitializeInterrupts:	; 1 bytes @ 0x19
4000:          ??_ButtonPress:	; 1 bytes @ 0x19
4001:          ??_ButtonHold:	; 1 bytes @ 0x19
4002:          ??_ButtonRelease:	; 1 bytes @ 0x19
4003:          ??_SramSetMode:	; 1 bytes @ 0x19
4004:          ?_SramFill:	; 1 bytes @ 0x19
4005:          ?_CheckButton:	; 1 bytes @ 0x19
4006:          ??_CheckFlowControlRx1:	; 1 bytes @ 0x19
4007:          ??_CheckFlowControlRx2:	; 1 bytes @ 0x19
4008:          ??_SramFillNext:	; 1 bytes @ 0x19
4009:          	global	?___awmod
4010:          ?___awmod:	; 2 bytes @ 0x19
4011:          	global	?___lldiv
4012:          ?___lldiv:	; 4 bytes @ 0x19
4013:          	global	?___llmod
4014:          ?___llmod:	; 4 bytes @ 0x19
4015:          	global	?_RingBufferCreate
4016:          ?_RingBufferCreate:	; 6 bytes @ 0x19
4017:          	global	?_ButtonInfoCreate
4018:          ?_ButtonInfoCreate:	; 15 bytes @ 0x19
4019:          	global	CheckButton@buttonInfo
4020:          CheckButton@buttonInfo:	; 1 bytes @ 0x19
4021:          	global	SramSetMode@mode
4022:          SramSetMode@mode:	; 1 bytes @ 0x19
4023:          	global	RingBufferCreate@bufferSize
4024:          RingBufferCreate@bufferSize:	; 2 bytes @ 0x19
4025:          	global	___awmod@dividend
4026:          ___awmod@dividend:	; 2 bytes @ 0x19
4027:          	global	ButtonInfoCreate@pressAction
4028:          ButtonInfoCreate@pressAction:	; 3 bytes @ 0x19
4029:          	global	SramFill@address
4030:          SramFill@address:	; 3 bytes @ 0x19
4031:          	global	___lldiv@dividend
4032:          ___lldiv@dividend:	; 4 bytes @ 0x19
4033:          	global	___llmod@dividend
4034:          ___llmod@dividend:	; 4 bytes @ 0x19
4035:          	ds   1
4036:          ??_CheckButton:	; 1 bytes @ 0x1A
4037:          	ds   1
4038:          	global	RingBufferCreate@dataBuffer
4039:          RingBufferCreate@dataBuffer:	; 2 bytes @ 0x1B
4040:          	global	___awmod@divisor
4041:          ___awmod@divisor:	; 2 bytes @ 0x1B
4042:          	ds   1
4043:          	global	ButtonInfoCreate@holdAction
4044:          ButtonInfoCreate@holdAction:	; 3 bytes @ 0x1C
4045:          	global	SramFill@length
4046:          SramFill@length:	; 3 bytes @ 0x1C
4047:          	global	_SramFillNext$2409
4048:          _SramFillNext$2409:	; 3 bytes @ 0x1C
4049:          	ds   1
4050:          ??___awmod:	; 1 bytes @ 0x1D
4051:          	global	___awmod@counter
4052:          ___awmod@counter:	; 1 bytes @ 0x1D
4053:          	global	___lldiv@divisor
4054:          ___lldiv@divisor:	; 4 bytes @ 0x1D
4055:          	global	___llmod@divisor
4056:          ___llmod@divisor:	; 4 bytes @ 0x1D
4057:          	ds   1
4058:          	global	___awmod@sign
4059:          ___awmod@sign:	; 1 bytes @ 0x1E
4060:          	ds   1
4061:          ??_RingBufferCreate:	; 1 bytes @ 0x1F
4062:          ?_RingBufferEnqueue:	; 1 bytes @ 0x1F
4063:          ?_RingBufferDequeue:	; 1 bytes @ 0x1F
4064:          	global	SramFill@value
4065:          SramFill@value:	; 1 bytes @ 0x1F
4066:          	global	RingBufferEnqueue@buffer
4067:          RingBufferEnqueue@buffer:	; 1 bytes @ 0x1F
4068:          	global	RingBufferDequeue@buffer
4069:          RingBufferDequeue@buffer:	; 1 bytes @ 0x1F
4070:          	global	ButtonInfoCreate@releaseAction
4071:          ButtonInfoCreate@releaseAction:	; 3 bytes @ 0x1F
4072:          	global	RingBufferCreate@ringBuffer
4073:          RingBufferCreate@ringBuffer:	; 6 bytes @ 0x1F
4074:          	ds   1
4075:          ??_SramFill:	; 1 bytes @ 0x20
4076:          ??_RingBufferDequeue:	; 1 bytes @ 0x20
4077:          	global	RingBufferEnqueue@data
4078:          RingBufferEnqueue@data:	; 1 bytes @ 0x20
4079:          	ds   1
4080:          ??_RingBufferEnqueue:	; 1 bytes @ 0x21
4081:          ??___lldiv:	; 1 bytes @ 0x21
4082:          ??___llmod:	; 1 bytes @ 0x21
4083:          	global	___llmod@counter
4084:          ___llmod@counter:	; 1 bytes @ 0x21
4085:          	global	___lldiv@quotient
4086:          ___lldiv@quotient:	; 4 bytes @ 0x21
4087:          	ds   1
4088:          	global	ButtonInfoCreate@activeLogicLevel
4089:          ButtonInfoCreate@activeLogicLevel:	; 1 bytes @ 0x22
4090:          	ds   1
4091:          	global	RingBufferDequeue@data
4092:          RingBufferDequeue@data:	; 1 bytes @ 0x23
4093:          	ds   1
4094:          ??_putch2:	; 1 bytes @ 0x24
4095:          ??_getch1:	; 1 bytes @ 0x24
4096:          ??_putch1:	; 1 bytes @ 0x24
4097:          ??_getch2:	; 1 bytes @ 0x24
4098:          	global	putch1@data
4099:          putch1@data:	; 1 bytes @ 0x24
4100:          	global	putch2@data
4101:          putch2@data:	; 1 bytes @ 0x24
4102:          	ds   1
4103:          	global	putch1@character
4104:          putch1@character:	; 1 bytes @ 0x25
4105:          	global	putch2@character
4106:          putch2@character:	; 1 bytes @ 0x25
4107:          	global	___lldiv@counter
4108:          ___lldiv@counter:	; 1 bytes @ 0x25
4109:          	ds   1
4110:          ?_ultoa:	; 1 bytes @ 0x26
4111:          ??_putch:	; 1 bytes @ 0x26
4112:          	global	putch@data
4113:          putch@data:	; 1 bytes @ 0x26
4114:          	global	ultoa@buf
4115:          ultoa@buf:	; 1 bytes @ 0x26
4116:          	ds   1
4117:          	global	?_printf
4118:          ?_printf:	; 2 bytes @ 0x27
4119:          	global	printf@f
4120:          printf@f:	; 1 bytes @ 0x27
4121:          	global	ultoa@val
4122:          ultoa@val:	; 4 bytes @ 0x27
4123:          	ds   1
4124:          ??_ButtonInfoCreate:	; 1 bytes @ 0x28
4125:          	ds   1
4126:          ??_printf:	; 1 bytes @ 0x29
4127:          	global	ButtonInfoCreate@button
4128:          ButtonInfoCreate@button:	; 15 bytes @ 0x29
4129:          	ds   1
4130:          	global	printf@ap
4131:          printf@ap:	; 1 bytes @ 0x2A
4132:          	ds   1
4133:          	global	printf@c
4134:          printf@c:	; 1 bytes @ 0x2B
4135:          	global	ultoa@base
4136:          ultoa@base:	; 2 bytes @ 0x2B
4137:          	ds   1
4138:          	global	printf@cp
4139:          printf@cp:	; 2 bytes @ 0x2C
4140:          	ds   1
4141:          ??_ultoa:	; 1 bytes @ 0x2D
4142:          	global	ultoa@v
4143:          ultoa@v:	; 4 bytes @ 0x2D
4144:          	ds   4
4145:          	global	ultoa@c
4146:          ultoa@c:	; 1 bytes @ 0x31
4147:          	ds   1
4148:          ?_ltoa:	; 1 bytes @ 0x32
4149:          	global	ltoa@buf
4150:          ltoa@buf:	; 1 bytes @ 0x32
4151:          	ds   1
4152:          	global	ltoa@val
4153:          ltoa@val:	; 4 bytes @ 0x33
4154:          	ds   4
4155:          	global	ltoa@base
4156:          ltoa@base:	; 2 bytes @ 0x37
4157:          	ds   2
4158:          ??_ltoa:	; 1 bytes @ 0x39
4159:          	ds   1
4160:          ??_main:	; 1 bytes @ 0x3A
4161:          	ds   3
4162:          	global	main@number
4163:          main@number:	; 8 bytes @ 0x3D
4164:          	ds   8
4165:          ;!
4166:          ;!Data Sizes:
4167:          ;!    Strings     29
4168:          ;!    Constant    0
4169:          ;!    Data        0
4170:          ;!    BSS         320
4171:          ;!    Persistent  0
4172:          ;!    Stack       0
4173:          ;!
4174:          ;!Auto Spaces:
4175:          ;!    Space          Size  Autos    Used
4176:          ;!    COMRAM           94     69      81
4177:          ;!    BANK0           160     67     111
4178:          ;!    BANK1           256    256     256
4179:          ;!    BANK2           256    256     256
4180:          ;!    BANK3           256      0       0
4181:          ;!    BANK4           256      0       0
4182:          ;!    BANK5           256      0       0
4183:          ;!    BANK6           256      0       0
4184:          ;!    BANK7           256      0       0
4185:          ;!    BANK8           256      0       0
4186:          ;!    BANK9           256      0       0
4187:          ;!    BANK10          256      0       0
4188:          ;!    BANK11          256      0       0
4189:          ;!    BANK12          256      0       0
4190:          ;!    BANK13          256      0       0
4191:          ;!    BANK14          176      0       0
4192:          
4193:          ;!
4194:          ;!Pointer List with Targets:
4195:          ;!
4196:          ;!    ?_RingBufferCreate.data	PTR unsigned char  size(2) Largest target is 256
4197:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4198:          ;!
4199:          ;!    ?_ButtonInfoCreate.releaseAction	PTR FTN()void  size(3) Largest target is 1
4200:          ;!		 -> ButtonRelease(), 
4201:          ;!
4202:          ;!    ?_ButtonInfoCreate.holdAction	PTR FTN()void  size(3) Largest target is 1
4203:          ;!		 -> ButtonHold(), 
4204:          ;!
4205:          ;!    ?_ButtonInfoCreate.pressAction	PTR FTN()void  size(3) Largest target is 1
4206:          ;!		 -> ButtonPress(), 
4207:          ;!
4208:          ;!    ultoa@buf	PTR unsigned char  size(1) Largest target is 8
4209:          ;!		 -> main@number(COMRAM[8]), 
4210:          ;!
4211:          ;!    sp__ultoa	PTR unsigned char  size(1) Largest target is 8
4212:          ;!		 -> main@number(COMRAM[8]), 
4213:          ;!
4214:          ;!    ltoa@buf	PTR unsigned char  size(1) Largest target is 8
4215:          ;!		 -> main@number(COMRAM[8]), 
4216:          ;!
4217:          ;!    ltoa@cp	PTR unsigned char  size(1) Largest target is 8
4218:          ;!		 -> main@number(COMRAM[8]), 
4219:          ;!
4220:          ;!    printf@f	PTR const unsigned char  size(1) Largest target is 22
4221:          ;!		 -> STR_1(CODE[22]), 
4222:          ;!
4223:          ;!    printf@cp	PTR const unsigned char  size(2) Largest target is 8
4224:          ;!		 -> STR_2(CODE[7]), main@number(COMRAM[8]), 
4225:          ;!
4226:          ;!    printf@ap	PTR void [1] size(1) Largest target is 2
4227:          ;!		 -> ?_printf(COMRAM[2]), 
4228:          ;!
4229:          ;!    RingBufferDequeue@buffer.data	PTR unsigned char  size(2) Largest target is 256
4230:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4231:          ;!
4232:          ;!    RingBufferDequeue@buffer	PTR volatile struct _RingBuffer size(1) Largest target is 7
4233:          ;!		 -> _rxBuffer2(BANK0[6]), _rxBuffer1(BANK0[6]), _txBuffer2(COMRAM[6]), _txBuffer1(COMRAM[6]), 
4234:          ;!
4235:          ;!    RingBufferEnqueue@buffer.data	PTR unsigned char  size(2) Largest target is 256
4236:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4237:          ;!
4238:          ;!    RingBufferEnqueue@buffer	PTR volatile struct _RingBuffer size(1) Largest target is 7
4239:          ;!		 -> _rxBuffer2(BANK0[6]), _rxBuffer1(BANK0[6]), _txBuffer2(COMRAM[6]), _txBuffer1(COMRAM[6]), 
4240:          ;!
4241:          ;!    RingBufferCreate@dataBuffer	PTR unsigned char  size(2) Largest target is 256
4242:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4243:          ;!
4244:          ;!    ringBuffer.data	PTR unsigned char  size(2) Largest target is 256
4245:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4246:          ;!
4247:          ;!    sp__strcpy	PTR unsigned char  size(2) Largest target is 132
4248:          ;!		 -> _sramBuffer.transmit.txData(BIGRAM[128]), _sramBuffer.transmit(BIGRAM[132]), 
4249:          ;!
4250:          ;!    CheckButton@buttonInfo.releaseAction	PTR FTN()void  size(3) Largest target is 1
4251:          ;!		 -> ButtonRelease(), 
4252:          ;!
4253:          ;!    CheckButton@buttonInfo.holdAction	PTR FTN()void  size(3) Largest target is 1
4254:          ;!		 -> ButtonHold(), 
4255:          ;!
4256:          ;!    CheckButton@buttonInfo.pressAction	PTR FTN()void  size(3) Largest target is 1
4257:          ;!		 -> ButtonPress(), 
4258:          ;!
4259:          ;!    CheckButton@buttonInfo	PTR volatile struct _ButtonInfo size(1) Largest target is 15
4260:          ;!		 -> _button(BANK0[15]), 
4261:          ;!
4262:          ;!    UpdateButtonState@buttonInfo.releaseAction	PTR FTN()void  size(3) Largest target is 1
4263:          ;!		 -> ButtonRelease(), 
4264:          ;!
4265:          ;!    UpdateButtonState@buttonInfo.holdAction	PTR FTN()void  size(3) Largest target is 1
4266:          ;!		 -> ButtonHold(), 
4267:          ;!
4268:          ;!    UpdateButtonState@buttonInfo.pressAction	PTR FTN()void  size(3) Largest target is 1
4269:          ;!		 -> ButtonPress(), 
4270:          ;!
4271:          ;!    UpdateButtonState@buttonInfo	PTR volatile struct _ButtonInfo size(1) Largest target is 15
4272:          ;!		 -> _button(BANK0[15]), 
4273:          ;!
4274:          ;!    ButtonInfoCreate@releaseAction	PTR FTN()void  size(3) Largest target is 1
4275:          ;!		 -> ButtonRelease(), 
4276:          ;!
4277:          ;!    ButtonInfoCreate@holdAction	PTR FTN()void  size(3) Largest target is 1
4278:          ;!		 -> ButtonHold(), 
4279:          ;!
4280:          ;!    ButtonInfoCreate@pressAction	PTR FTN()void  size(3) Largest target is 1
4281:          ;!		 -> ButtonPress(), 
4282:          ;!
4283:          ;!    button.releaseAction	PTR FTN()void  size(3) Largest target is 1
4284:          ;!		 -> ButtonRelease(), 
4285:          ;!
4286:          ;!    button.holdAction	PTR FTN()void  size(3) Largest target is 1
4287:          ;!		 -> ButtonHold(), 
4288:          ;!
4289:          ;!    button.pressAction	PTR FTN()void  size(3) Largest target is 1
4290:          ;!		 -> ButtonPress(), 
4291:          ;!
4292:          ;!    sp__ltoa	PTR unsigned char  size(1) Largest target is 8
4293:          ;!		 -> main@number(COMRAM[8]), 
4294:          ;!
4295:          ;!    _rxBuffer2.data	PTR unsigned char  size(2) Largest target is 256
4296:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4297:          ;!
4298:          ;!    _rxBuffer1.data	PTR unsigned char  size(2) Largest target is 256
4299:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4300:          ;!
4301:          ;!    _txBuffer2.data	PTR unsigned char  size(2) Largest target is 256
4302:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4303:          ;!
4304:          ;!    S94_RingBuffer$data	PTR unsigned char  size(2) Largest target is 256
4305:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4306:          ;!
4307:          ;!    _txBuffer1.data	PTR unsigned char  size(2) Largest target is 256
4308:          ;!		 -> main@rxBufferData2(BANK2[256]), main@rxBufferData1(BANK1[256]), main@txBufferData2(BANK0[32]), main@txBufferData1(BANK0[32]), 
4309:          ;!
4310:          ;!    S54_ButtonInfo$releaseAction	PTR FTN()void  size(3) Largest target is 1
4311:          ;!		 -> ButtonRelease(), 
4312:          ;!
4313:          ;!    _button.releaseAction	PTR FTN()void  size(3) Largest target is 1
4314:          ;!		 -> ButtonRelease(), 
4315:          ;!
4316:          ;!    S54_ButtonInfo$holdAction	PTR FTN()void  size(3) Largest target is 1
4317:          ;!		 -> ButtonHold(), 
4318:          ;!
4319:          ;!    _button.holdAction	PTR FTN()void  size(3) Largest target is 1
4320:          ;!		 -> ButtonHold(), 
4321:          ;!
4322:          ;!    S54_ButtonInfo$pressAction	PTR FTN()void  size(3) Largest target is 1
4323:          ;!		 -> ButtonPress(), 
4324:          ;!
4325:          ;!    _button.pressAction	PTR FTN()void  size(3) Largest target is 1
4326:          ;!		 -> ButtonPress(), 
4327:          ;!
4328:          
4329:          
4330:          ;!
4331:          ;!Critical Paths under _main in COMRAM
4332:          ;!
4333:          ;!    _main->_ltoa
4334:          ;!    _printf->_putch
4335:          ;!    _putch->_putch1
4336:          ;!    _putch->_putch2
4337:          ;!    _putch2->_RingBufferDequeue
4338:          ;!    _putch2->_RingBufferEnqueue
4339:          ;!    _putch1->_RingBufferDequeue
4340:          ;!    _putch1->_RingBufferEnqueue
4341:          ;!    _RingBufferEnqueue->___awmod
4342:          ;!    _ltoa->_ultoa
4343:          ;!    _ultoa->___lldiv
4344:          ;!    _getch2->_RingBufferDequeue
4345:          ;!    _getch1->_RingBufferDequeue
4346:          ;!    _RingBufferDequeue->___awmod
4347:          ;!
4348:          ;!Critical Paths under _isrLowPriority in COMRAM
4349:          ;!
4350:          ;!    _isrLowPriority->i1_RingBufferDequeue
4351:          ;!    _isrLowPriority->i1_RingBufferEnqueue
4352:          ;!    i1_RingBufferEnqueue->i1___awmod
4353:          ;!    i1_RingBufferDequeue->i1___awmod
4354:          ;!
4355:          ;!Critical Paths under _isrHighPriority in COMRAM
4356:          ;!
4357:          ;!    _isrHighPriority->_UpdateButtonState
4358:          ;!
4359:          ;!Critical Paths under _main in BANK0
4360:          ;!
4361:          ;!    None.
4362:          ;!
4363:          ;!Critical Paths under _isrLowPriority in BANK0
4364:          ;!
4365:          ;!    None.
4366:          ;!
4367:          ;!Critical Paths under _isrHighPriority in BANK0
4368:          ;!
4369:          ;!    None.
4370:          ;!
4371:          ;!Critical Paths under _main in BANK1
4372:          ;!
4373:          ;!    None.
4374:          ;!
4375:          ;!Critical Paths under _isrLowPriority in BANK1
4376:          ;!
4377:          ;!    None.
4378:          ;!
4379:          ;!Critical Paths under _isrHighPriority in BANK1
4380:          ;!
4381:          ;!    None.
4382:          ;!
4383:          ;!Critical Paths under _main in BANK2
4384:          ;!
4385:          ;!    None.
4386:          ;!
4387:          ;!Critical Paths under _isrLowPriority in BANK2
4388:          ;!
4389:          ;!    None.
4390:          ;!
4391:          ;!Critical Paths under _isrHighPriority in BANK2
4392:          ;!
4393:          ;!    None.
4394:          ;!
4395:          ;!Critical Paths under _main in BANK3
4396:          ;!
4397:          ;!    None.
4398:          ;!
4399:          ;!Critical Paths under _isrLowPriority in BANK3
4400:          ;!
4401:          ;!    None.
4402:          ;!
4403:          ;!Critical Paths under _isrHighPriority in BANK3
4404:          ;!
4405:          ;!    None.
4406:          ;!
4407:          ;!Critical Paths under _main in BANK4
4408:          ;!
4409:          ;!    None.
4410:          ;!
4411:          ;!Critical Paths under _isrLowPriority in BANK4
4412:          ;!
4413:          ;!    None.
4414:          ;!
4415:          ;!Critical Paths under _isrHighPriority in BANK4
4416:          ;!
4417:          ;!    None.
4418:          ;!
4419:          ;!Critical Paths under _main in BANK5
4420:          ;!
4421:          ;!    None.
4422:          ;!
4423:          ;!Critical Paths under _isrLowPriority in BANK5
4424:          ;!
4425:          ;!    None.
4426:          ;!
4427:          ;!Critical Paths under _isrHighPriority in BANK5
4428:          ;!
4429:          ;!    None.
4430:          ;!
4431:          ;!Critical Paths under _main in BANK6
4432:          ;!
4433:          ;!    None.
4434:          ;!
4435:          ;!Critical Paths under _isrLowPriority in BANK6
4436:          ;!
4437:          ;!    None.
4438:          ;!
4439:          ;!Critical Paths under _isrHighPriority in BANK6
4440:          ;!
4441:          ;!    None.
4442:          ;!
4443:          ;!Critical Paths under _main in BANK7
4444:          ;!
4445:          ;!    None.
4446:          ;!
4447:          ;!Critical Paths under _isrLowPriority in BANK7
4448:          ;!
4449:          ;!    None.
4450:          ;!
4451:          ;!Critical Paths under _isrHighPriority in BANK7
4452:          ;!
4453:          ;!    None.
4454:          ;!
4455:          ;!Critical Paths under _main in BANK8
4456:          ;!
4457:          ;!    None.
4458:          ;!
4459:          ;!Critical Paths under _isrLowPriority in BANK8
4460:          ;!
4461:          ;!    None.
4462:          ;!
4463:          ;!Critical Paths under _isrHighPriority in BANK8
4464:          ;!
4465:          ;!    None.
4466:          ;!
4467:          ;!Critical Paths under _main in BANK9
4468:          ;!
4469:          ;!    None.
4470:          ;!
4471:          ;!Critical Paths under _isrLowPriority in BANK9
4472:          ;!
4473:          ;!    None.
4474:          ;!
4475:          ;!Critical Paths under _isrHighPriority in BANK9
4476:          ;!
4477:          ;!    None.
4478:          ;!
4479:          ;!Critical Paths under _main in BANK10
4480:          ;!
4481:          ;!    None.
4482:          ;!
4483:          ;!Critical Paths under _isrLowPriority in BANK10
4484:          ;!
4485:          ;!    None.
4486:          ;!
4487:          ;!Critical Paths under _isrHighPriority in BANK10
4488:          ;!
4489:          ;!    None.
4490:          ;!
4491:          ;!Critical Paths under _main in BANK11
4492:          ;!
4493:          ;!    None.
4494:          ;!
4495:          ;!Critical Paths under _isrLowPriority in BANK11
4496:          ;!
4497:          ;!    None.
4498:          ;!
4499:          ;!Critical Paths under _isrHighPriority in BANK11
4500:          ;!
4501:          ;!    None.
4502:          ;!
4503:          ;!Critical Paths under _main in BANK12
4504:          ;!
4505:          ;!    None.
4506:          ;!
4507:          ;!Critical Paths under _isrLowPriority in BANK12
4508:          ;!
4509:          ;!    None.
4510:          ;!
4511:          ;!Critical Paths under _isrHighPriority in BANK12
4512:          ;!
4513:          ;!    None.
4514:          ;!
4515:          ;!Critical Paths under _main in BANK13
4516:          ;!
4517:          ;!    None.
4518:          ;!
4519:          ;!Critical Paths under _isrLowPriority in BANK13
4520:          ;!
4521:          ;!    None.
4522:          ;!
4523:          ;!Critical Paths under _isrHighPriority in BANK13
4524:          ;!
4525:          ;!    None.
4526:          ;!
4527:          ;!Critical Paths under _main in BANK14
4528:          ;!
4529:          ;!    None.
4530:          ;!
4531:          ;!Critical Paths under _isrLowPriority in BANK14
4532:          ;!
4533:          ;!    None.
4534:          ;!
4535:          ;!Critical Paths under _isrHighPriority in BANK14
4536:          ;!
4537:          ;!    None.
4538:          
4539:          ;;
4540:          ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
4541:          ;;
4542:          
4543:          ;!
4544:          ;!Call Graph Tables:
4545:          ;!
4546:          ;! ---------------------------------------------------------------------------------
4547:          ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
4548:          ;! ---------------------------------------------------------------------------------
4549:          ;! (0) _main                                               594   594      0   16266
4550:          ;!                                             58 COMRAM    11    11      0
4551:          ;!                                              0 BANK0     67    67      0
4552:          ;!                                              0 BANK1    256   256      0
4553:          ;!                                              0 BANK2    256   256      0
4554:          ;!                   _ButtonInfoCreate
4555:          ;!                        _CheckButton
4556:          ;!                _CheckFlowControlRx1
4557:          ;!                _CheckFlowControlRx2
4558:          ;!               _InitializeInterrupts
4559:          ;!               _InitializeOscillator
4560:          ;!                    _InitializePorts
4561:          ;!                      _InitializeSpi
4562:          ;!                   _InitializeTimers
4563:          ;!                    _InitializeUSART
4564:          ;!                      _InitializeWDT
4565:          ;!                   _RingBufferCreate
4566:          ;!                           _SramFill
4567:          ;!                       _SramFillNext
4568:          ;!                        _SramSetMode
4569:          ;!                             _getch1
4570:          ;!                             _getch2
4571:          ;!                               _ltoa
4572:          ;!                             _printf
4573:          ;!                             _putch1
4574:          ;!                             _putch2
4575:          ;! ---------------------------------------------------------------------------------
4576:          ;! (1) _printf                                              17    15      2    5223
4577:          ;!                                             39 COMRAM     7     5      2
4578:          ;!                              _putch
4579:          ;! ---------------------------------------------------------------------------------
4580:          ;! (2) _putch                                                1     1      0    4976
4581:          ;!                                             38 COMRAM     1     1      0
4582:          ;!                             _putch1
4583:          ;!                             _putch2
4584:          ;! ---------------------------------------------------------------------------------
4585:          ;! (1) _putch2                                               2     2      0    2466
4586:          ;!                                             36 COMRAM     2     2      0
4587:          ;!                  _RingBufferDequeue
4588:          ;!                  _RingBufferEnqueue
4589:          ;! ---------------------------------------------------------------------------------
4590:          ;! (1) _putch1                                               2     2      0    2466
4591:          ;!                                             36 COMRAM     2     2      0
4592:          ;!                  _RingBufferDequeue
4593:          ;!                  _RingBufferEnqueue
4594:          ;! ---------------------------------------------------------------------------------
4595:          ;! (2) _RingBufferEnqueue                                    5     3      2    1292
4596:          ;!                                             31 COMRAM     5     3      2
4597:          ;!                            ___awmod
4598:          ;! ---------------------------------------------------------------------------------
4599:          ;! (1) _ltoa                                                 8     1      7    1553
4600:          ;!                                             50 COMRAM     8     1      7
4601:          ;!                              _ultoa
4602:          ;! ---------------------------------------------------------------------------------
4603:          ;! (2) _ultoa                                               12     5      7    1198
4604:          ;!                                             38 COMRAM    12     5      7
4605:          ;!                            ___lldiv
4606:          ;!                            ___llmod
4607:          ;! ---------------------------------------------------------------------------------
4608:          ;! (3) ___llmod                                              9     1      8     287
4609:          ;!                                             25 COMRAM     9     1      8
4610:          ;! ---------------------------------------------------------------------------------
4611:          ;! (3) ___lldiv                                             13     5      8     418
4612:          ;!                                             25 COMRAM    13     5      8
4613:          ;! ---------------------------------------------------------------------------------
4614:          ;! (1) _getch2                                               0     0      0    1129
4615:          ;!                  _RingBufferDequeue
4616:          ;! ---------------------------------------------------------------------------------
4617:          ;! (1) _getch1                                               0     0      0    1129
4618:          ;!                  _RingBufferDequeue
4619:          ;! ---------------------------------------------------------------------------------
4620:          ;! (2) _RingBufferDequeue                                    5     4      1    1129
4621:          ;!                                             31 COMRAM     5     4      1
4622:          ;!                            ___awmod
4623:          ;! ---------------------------------------------------------------------------------
4624:          ;! (3) ___awmod                                              6     2      4     620
4625:          ;!                                             25 COMRAM     6     2      4
4626:          ;! ---------------------------------------------------------------------------------
4627:          ;! (1) _SramSetMode                                          1     1      0      22
4628:          ;!                                             25 COMRAM     1     1      0
4629:          ;! ---------------------------------------------------------------------------------
4630:          ;! (1) _SramFillNext                                         6     6      0      24
4631:          ;!                                             25 COMRAM     6     6      0
4632:          ;! ---------------------------------------------------------------------------------
4633:          ;! (1) _SramFill                                            10     3      7     348
4634:          ;!                                             25 COMRAM    10     3      7
4635:          ;! ---------------------------------------------------------------------------------
4636:          ;! (1) _RingBufferCreate                                    12     6      6     697
4637:          ;!                                             25 COMRAM    12     6      6
4638:          ;! ---------------------------------------------------------------------------------
4639:          ;! (1) _InitializeWDT                                        0     0      0       0
4640:          ;! ---------------------------------------------------------------------------------
4641:          ;! (1) _InitializeUSART                                      0     0      0       0
4642:          ;! ---------------------------------------------------------------------------------
4643:          ;! (1) _InitializeTimers                                     0     0      0       0
4644:          ;! ---------------------------------------------------------------------------------
4645:          ;! (1) _InitializeSpi                                        0     0      0       0
4646:          ;! ---------------------------------------------------------------------------------
4647:          ;! (1) _InitializePorts                                      0     0      0       0
4648:          ;! ---------------------------------------------------------------------------------
4649:          ;! (1) _InitializeOscillator                                 0     0      0       0
4650:          ;! ---------------------------------------------------------------------------------
4651:          ;! (1) _InitializeInterrupts                                 0     0      0       0
4652:          ;! ---------------------------------------------------------------------------------
4653:          ;! (1) _CheckFlowControlRx2                                  0     0      0       0
4654:          ;! ---------------------------------------------------------------------------------
4655:          ;! (1) _CheckFlowControlRx1                                  0     0      0       0
4656:          ;! ---------------------------------------------------------------------------------
4657:          ;! (1) _CheckButton                                          9     8      1     394
4658:          ;!                                             25 COMRAM     9     8      1
4659:          ;!                         _ButtonHold *
4660:          ;!                        _ButtonPress *
4661:          ;!                      _ButtonRelease *
4662:          ;! ---------------------------------------------------------------------------------
4663:          ;! (2) _ButtonRelease                                        0     0      0       0
4664:          ;! ---------------------------------------------------------------------------------
4665:          ;! (2) _ButtonPress                                          0     0      0       0
4666:          ;! ---------------------------------------------------------------------------------
4667:          ;! (2) _ButtonHold                                           0     0      0       0
4668:          ;! ---------------------------------------------------------------------------------
4669:          ;! (1) _ButtonInfoCreate                                    31    16     15     577
4670:          ;!                                             25 COMRAM    31    16     15
4671:          ;! ---------------------------------------------------------------------------------
4672:          ;! Estimated maximum stack depth 3
4673:          ;! ---------------------------------------------------------------------------------
4674:          ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
4675:          ;! ---------------------------------------------------------------------------------
4676:          ;! (6) _isrLowPriority                                       7     7      0    1261
4677:          ;!                                             18 COMRAM     7     7      0
4678:          ;!                i1_RingBufferDequeue
4679:          ;!                i1_RingBufferEnqueue
4680:          ;! ---------------------------------------------------------------------------------
4681:          ;! (7) i1_RingBufferEnqueue                                  5     3      2     700
4682:          ;!                                             13 COMRAM     5     3      2
4683:          ;!                          i1___awmod
4684:          ;! ---------------------------------------------------------------------------------
4685:          ;! (7) i1_RingBufferDequeue                                  5     4      1     561
4686:          ;!                                             13 COMRAM     5     4      1
4687:          ;!                          i1___awmod
4688:          ;! ---------------------------------------------------------------------------------
4689:          ;! (8) i1___awmod                                            6     2      4     332
4690:          ;!                                              7 COMRAM     6     2      4
4691:          ;! ---------------------------------------------------------------------------------
4692:          ;! Estimated maximum stack depth 8
4693:          ;! ---------------------------------------------------------------------------------
4694:          ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
4695:          ;! ---------------------------------------------------------------------------------
4696:          ;! (9) _isrHighPriority                                      4     4      0     480
4697:          ;!                                              3 COMRAM     4     4      0
4698:          ;!                  _UpdateButtonState
4699:          ;! ---------------------------------------------------------------------------------
4700:          ;! (10) _UpdateButtonState                                   3     1      2     480
4701:          ;!                                              0 COMRAM     3     1      2
4702:          ;! ---------------------------------------------------------------------------------
4703:          ;! Estimated maximum stack depth 10
4704:          ;! ---------------------------------------------------------------------------------
4705:          ;!
4706:          ;! Call Graph Graphs:
4707:          ;!
4708:          ;! _main (ROOT)
4709:          ;!   _ButtonInfoCreate
4710:          ;!   _CheckButton
4711:          ;!     _ButtonHold *
4712:          ;!     _ButtonPress *
4713:          ;!     _ButtonRelease *
4714:          ;!   _CheckFlowControlRx1
4715:          ;!   _CheckFlowControlRx2
4716:          ;!   _InitializeInterrupts
4717:          ;!   _InitializeOscillator
4718:          ;!   _InitializePorts
4719:          ;!   _InitializeSpi
4720:          ;!   _InitializeTimers
4721:          ;!   _InitializeUSART
4722:          ;!   _InitializeWDT
4723:          ;!   _RingBufferCreate
4724:          ;!   _SramFill
4725:          ;!   _SramFillNext
4726:          ;!   _SramSetMode
4727:          ;!   _getch1
4728:          ;!     _RingBufferDequeue
4729:          ;!       ___awmod
4730:          ;!   _getch2
4731:          ;!     _RingBufferDequeue
4732:          ;!       ___awmod
4733:          ;!   _ltoa
4734:          ;!     _ultoa
4735:          ;!       ___lldiv
4736:          ;!       ___llmod
4737:          ;!   _printf
4738:          ;!     _putch
4739:          ;!       _putch1
4740:          ;!         _RingBufferDequeue
4741:          ;!           ___awmod
4742:          ;!         _RingBufferEnqueue
4743:          ;!           ___awmod
4744:          ;!       _putch2
4745:          ;!         _RingBufferDequeue
4746:          ;!           ___awmod
4747:          ;!         _RingBufferEnqueue
4748:          ;!           ___awmod
4749:          ;!   _putch1
4750:          ;!     _RingBufferDequeue
4751:          ;!       ___awmod
4752:          ;!     _RingBufferEnqueue
4753:          ;!       ___awmod
4754:          ;!   _putch2
4755:          ;!     _RingBufferDequeue
4756:          ;!       ___awmod
4757:          ;!     _RingBufferEnqueue
4758:          ;!       ___awmod
4759:          ;!
4760:          ;! _isrLowPriority (ROOT)
4761:          ;!   i1_RingBufferDequeue
4762:          ;!     i1___awmod
4763:          ;!   i1_RingBufferEnqueue
4764:          ;!     i1___awmod
4765:          ;!
4766:          ;! _isrHighPriority (ROOT)
4767:          ;!   _UpdateButtonState
4768:          ;!
4769:          
4770:          ;! Address spaces:
4771:          
4772:          ;!Name               Size   Autos  Total    Cost      Usage
4773:          ;!BIGRAM             EAF      0     108      35        7.0%
4774:          ;!BITBANK13          100      0       0      31        0.0%
4775:          ;!BANK13             100      0       0      32        0.0%
4776:          ;!BITBANK12          100      0       0      29        0.0%
4777:          ;!BANK12             100      0       0      30        0.0%
4778:          ;!BITBANK11          100      0       0      27        0.0%
4779:          ;!BANK11             100      0       0      28        0.0%
4780:          ;!BITBANK10          100      0       0      25        0.0%
4781:          ;!BANK10             100      0       0      26        0.0%
4782:          ;!BITBANK9           100      0       0      23        0.0%
4783:          ;!BANK9              100      0       0      24        0.0%
4784:          ;!BITBANK8           100      0       0      21        0.0%
4785:          ;!BANK8              100      0       0      22        0.0%
4786:          ;!BITBANK7           100      0       0      19        0.0%
4787:          ;!BANK7              100      0       0      20        0.0%
4788:          ;!BITBANK6           100      0       0      17        0.0%
4789:          ;!BANK6              100      0       0      18        0.0%
4790:          ;!BITBANK5           100      0       0      15        0.0%
4791:          ;!BANK5              100      0       0      16        0.0%
4792:          ;!BITBANK4           100      0       0      13        0.0%
4793:          ;!BANK4              100      0       0      14        0.0%
4794:          ;!BITBANK3           100      0       0      11        0.0%
4795:          ;!BANK3              100      0       0      12        0.0%
4796:          ;!BITBANK2           100      0       0       9        0.0%
4797:          ;!BANK2              100    100     100      10      100.0%
4798:          ;!BITBANK1           100      0       0       7        0.0%
4799:          ;!BANK1              100    100     100       8      100.0%
4800:          ;!BITBANK14           B0      0       0      33        0.0%
4801:          ;!BANK14              B0      0       0      34        0.0%
4802:          ;!BITBANK0            A0      0       0       4        0.0%
4803:          ;!BANK0               A0     43      6F       5       69.4%
4804:          ;!BITCOMRAM           5E      0       0       0        0.0%
4805:          ;!COMRAM              5E     45      51       1       86.2%
4806:          ;!BITSFR_2             0      0       0     200        0.0%
4807:          ;!SFR_2                0      0       0     200        0.0%
4808:          ;!BITSFR_1             0      0       0     200        0.0%
4809:          ;!SFR_1                0      0       0     200        0.0%
4810:          ;!BITSFR               0      0       0     200        0.0%
4811:          ;!SFR                  0      0       0     200        0.0%
4812:          ;!STACK                0      0       0       2        0.0%
4813:          ;!NULL                 0      0       0       0        0.0%
4814:          ;!ABS                  0      0     2C0       6        0.0%
4815:          ;!DATA                 0      0     3C8       3        0.0%
4816:          ;!CODE                 0      0       0       0        0.0%
4817:          
4818:          	global	_main
4819:          
4820:          ;; *************** function _main *****************
4821:          ;; Defined at:
4822:          ;;		line 26 in file "main.c"
4823:          ;; Parameters:    Size  Location     Type
4824:          ;;		None
4825:          ;; Auto vars:     Size  Location     Type
4826:          ;;  number          8   61[COMRAM] unsigned char [8]
4827:          ;;  i               2   65[BANK0 ] int 
4828:          ;;  rxBufferData  256    0[BANK2 ] unsigned char [256]
4829:          ;;  rxBufferData  256    0[BANK1 ] unsigned char [256]
4830:          ;;  txBufferData   32   32[BANK0 ] unsigned char [32]
4831:          ;;  txBufferData   32    0[BANK0 ] unsigned char [32]
4832:          ;;  prevTick        4    0        unsigned long 
4833:          ;;  mode            1   64[BANK0 ] struct _SramMode
4834:          ;; Return value:  Size  Location     Type
4835:          ;;                  1    wreg      void 
4836:          ;; Registers used:
4837:          ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, cstack
4838:          ;; Tracked objects:
4839:          ;;		On entry : 0/0
4840:          ;;		On exit  : 3F/0
4841:          ;;		Unchanged: 0/0
4842:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
4843:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
4844:          ;;      Locals:         8      67     256     256       0       0       0       0       0       0       0       0       0       0       0       0
4845:          ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
4846:          ;;      Totals:        11      67     256     256       0       0       0       0       0       0       0       0       0       0       0       0
4847:          ;;Total ram usage:      590 bytes
4848:          ;; Hardware stack levels required when called:   10
4849:          ;; This function calls:
4850:          ;;		_ButtonInfoCreate
4851:          ;;		_CheckButton
4852:          ;;		_CheckFlowControlRx1
4853:          ;;		_CheckFlowControlRx2
4854:          ;;		_InitializeInterrupts
4855:          ;;		_InitializeOscillator
4856:          ;;		_InitializePorts
4857:          ;;		_InitializeSpi
4858:          ;;		_InitializeTimers
4859:          ;;		_InitializeUSART
4860:          ;;		_InitializeWDT
4861:          ;;		_RingBufferCreate
4862:          ;;		_SramFill
4863:          ;;		_SramFillNext
4864:          ;;		_SramSetMode
4865:          ;;		_getch1
4866:          ;;		_getch2
4867:          ;;		_ltoa
4868:          ;;		_printf
4869:          ;;		_putch1
4870:          ;;		_putch2
4871:          ;; This function is called by:
4872:          ;;		Startup code after reset
4873:          ;; This function uses a non-reentrant model
4874:          ;;
4875:          psect	text0,class=CODE,space=0,reloc=2,group=0
4876:          	file	"main.c"
4877:          	line	26
4878:          global __ptext0
4879:          __ptext0:
4880:          psect	text0
4881:          	file	"main.c"
4882:          	line	26
4883:          	global	__size_of_main
4884:          	__size_of_main	equ	__end_of_main-_main
4885:          	
4886:          _main:
4887:          ;incstack = 0
4888:          	opt	stack 21
4889:          	line	29
4890:          	
4891:          l2440:
4892:          ;main.c: 29: InitializeOscillator();
4893:          	call	_InitializeOscillator	;wreg free
4894:          	line	30
4895:          	
4896:          l2442:; BSR set to: 15
4897:          
4898:          ;main.c: 30: InitializeWDT();
4899:          	call	_InitializeWDT	;wreg free
4900:          	line	31
4901:          	
4902:          l2444:; BSR set to: 15
4903:          
4904:          ;main.c: 31: InitializePorts();
4905:          	call	_InitializePorts	;wreg free
4906:          	line	32
4907:          	
4908:          l2446:; BSR set to: 14
4909:          
4910:          ;main.c: 32: InitializeTimers();
4911:          	call	_InitializeTimers	;wreg free
4912:          	line	33
4913:          	
4914:          l2448:; BSR set to: 14
4915:          
4916:          ;main.c: 33: InitializeSpi();
4917:          	call	_InitializeSpi	;wreg free
4918:          	line	34
4919:          	
4920:          l2450:; BSR set to: 15
4921:          
4922:          ;main.c: 34: InitializeUSART();
4923:          	call	_InitializeUSART	;wreg free
4924:          	line	35
4925:          	
4926:          l2452:; BSR set to: 15
4927:          
4928:          ;main.c: 38: uint32_t prevTick = 0;
4929:          	call	_InitializeInterrupts	;wreg free
4930:          	line	39
4931:          	
4932:          l2454:; BSR set to: 15
4933:          
4934:          ;main.c: 39: _button = ButtonInfoCreate(ButtonPress, ButtonHold, ButtonRelease, 0);
4935:          		movlw	low(_ButtonPress)
4936:          	movwf	((c:ButtonInfoCreate@pressAction)),c
4937:          	movlw	high(_ButtonPress)
4938:          	movwf	((c:ButtonInfoCreate@pressAction+1)),c
4939:          	movlw	low highword(_ButtonPress)
4940:          	movwf	((c:ButtonInfoCreate@pressAction+2)),c
4941:          
4942:          		movlw	low(_ButtonHold)
4943:          	movwf	((c:ButtonInfoCreate@holdAction)),c
4944:          	movlw	high(_ButtonHold)
4945:          	movwf	((c:ButtonInfoCreate@holdAction+1)),c
4946:          	movlw	low highword(_ButtonHold)
4947:          	movwf	((c:ButtonInfoCreate@holdAction+2)),c
4948:          
4949:          		movlw	low(_ButtonRelease)
4950:          	movwf	((c:ButtonInfoCreate@releaseAction)),c
4951:          	movlw	high(_ButtonRelease)
4952:          	movwf	((c:ButtonInfoCreate@releaseAction+1)),c
4953:          	movlw	low highword(_ButtonRelease)
4954:          	movwf	((c:ButtonInfoCreate@releaseAction+2)),c
4955:          
4956:          	movlw	low(0)
4957:          	movwf	((c:ButtonInfoCreate@activeLogicLevel)),c
4958:          	call	_ButtonInfoCreate	;wreg free
4959:          	lfsr	2,(__button)	;volatile
4960:          	movlw	15-1
4961:          u2021:
4962:          	movff	plusw0,plusw2
4963:          	decf	wreg
4964:          	bc	u2021
4965:          
4966:          	line	40
4967:          	
4968:          l2456:
4969:          ;main.c: 40: char txBufferData1[32] = {0};
4970:          	lfsr	2,(main@txBufferData1)
4971:          	movlw	32-1
4972:          u2031:
4973:          	clrf	postinc2
4974:          	decf	wreg
4975:          	bc	u2031
4976:          	line	41
4977:          	
4978:          l2458:
4979:          ;main.c: 41: char txBufferData2[32] = {0};
4980:          	lfsr	2,(main@txBufferData2)
4981:          	movlw	32-1
4982:          u2041:
4983:          	clrf	postinc2
4984:          	decf	wreg
4985:          	bc	u2041
4986:          	line	42
4987:          	
4988:          l2460:
4989:          ;main.c: 42: char rxBufferData1[256] = {0};
4990:          	lfsr	2,(main@rxBufferData1)
4991:          	movlw	256-1
4992:          u2051:
4993:          	clrf	postinc2
4994:          	decf	wreg
4995:          	bc	u2051
4996:          	line	43
4997:          	
4998:          l2462:
4999:          ;main.c: 43: char rxBufferData2[256] = {0};
5000:          	lfsr	2,(main@rxBufferData2)
5001:          	movlw	256-1
5002:          u2061:
5003:          	clrf	postinc2
5004:          	decf	wreg
5005:          	bc	u2061
5006:          	line	44
5007:          	
5008:          l2464:
5009:          ;main.c: 44: _txBuffer1 = RingBufferCreate(32, txBufferData1);
5010:          	movlw	high(020h)
5011:          	movwf	((c:RingBufferCreate@bufferSize+1)),c
5012:          	movlw	low(020h)
5013:          	movwf	((c:RingBufferCreate@bufferSize)),c
5014:          		movlw	low(main@txBufferData1)
5015:          	movwf	((c:RingBufferCreate@dataBuffer)),c
5016:          	clrf	((c:RingBufferCreate@dataBuffer+1)),c
5017:          
5018:          	call	_RingBufferCreate	;wreg free
5019:          	lfsr	2,(__txBuffer1)	;volatile
5020:          	movlw	6-1
5021:          u2071:
5022:          	movff	plusw0,plusw2
5023:          	decf	wreg
5024:          	bc	u2071
5025:          
5026:          	line	45
5027:          	
5028:          l2466:
5029:          ;main.c: 45: _txBuffer2 = RingBufferCreate(32, txBufferData2);
5030:          	movlw	high(020h)
5031:          	movwf	((c:RingBufferCreate@bufferSize+1)),c
5032:          	movlw	low(020h)
5033:          	movwf	((c:RingBufferCreate@bufferSize)),c
5034:          		movlw	low(main@txBufferData2)
5035:          	movwf	((c:RingBufferCreate@dataBuffer)),c
5036:          	clrf	((c:RingBufferCreate@dataBuffer+1)),c
5037:          
5038:          	call	_RingBufferCreate	;wreg free
5039:          	lfsr	2,(__txBuffer2)	;volatile
5040:          	movlw	6-1
5041:          u2081:
5042:          	movff	plusw0,plusw2
5043:          	decf	wreg
5044:          	bc	u2081
5045:          
5046:          	line	46
5047:          	
5048:          l2468:
5049:          ;main.c: 46: _rxBuffer1 = RingBufferCreate(256, rxBufferData1);
5050:          	movlw	high(0100h)
5051:          	movwf	((c:RingBufferCreate@bufferSize+1)),c
5052:          	movlw	low(0100h)
5053:          	movwf	((c:RingBufferCreate@bufferSize)),c
5054:          		movlw	low(main@rxBufferData1)
5055:          	movwf	((c:RingBufferCreate@dataBuffer)),c
5056:          	movlw	high(main@rxBufferData1)
5057:          	movwf	((c:RingBufferCreate@dataBuffer+1)),c
5058:          
5059:          	call	_RingBufferCreate	;wreg free
5060:          	lfsr	2,(__rxBuffer1)	;volatile
5061:          	movlw	6-1
5062:          u2091:
5063:          	movff	plusw0,plusw2
5064:          	decf	wreg
5065:          	bc	u2091
5066:          
5067:          	line	47
5068:          	
5069:          l2470:
5070:          ;main.c: 47: _rxBuffer2 = RingBufferCreate(256, rxBufferData2);
5071:          	movlw	high(0100h)
5072:          	movwf	((c:RingBufferCreate@bufferSize+1)),c
5073:          	movlw	low(0100h)
5074:          	movwf	((c:RingBufferCreate@bufferSize)),c
5075:          		movlw	low(main@rxBufferData2)
5076:          	movwf	((c:RingBufferCreate@dataBuffer)),c
5077:          	movlw	high(main@rxBufferData2)
5078:          	movwf	((c:RingBufferCreate@dataBuffer+1)),c
5079:          
5080:          	call	_RingBufferCreate	;wreg free
5081:          	lfsr	2,(__rxBuffer2)	;volatile
5082:          	movlw	6-1
5083:          u2101:
5084:          	movff	plusw0,plusw2
5085:          	decf	wreg
5086:          	bc	u2101
5087:          
5088:          	line	48
5089:          	
5090:          l2472:
5091:          ;main.c: 48: _commStatus1.status = 0;
5092:          	movlb	0	; () banked
5093:          	clrf	((__commStatus1))&0ffh	;volatile
5094:          	line	49
5095:          	
5096:          l2474:; BSR set to: 0
5097:          
5098:          ;main.c: 49: _commStatus2.status = 0;
5099:          	clrf	((__commStatus2))&0ffh	;volatile
5100:          	line	50
5101:          	
5102:          l2476:; BSR set to: 0
5103:          
5104:          ;main.c: 50: _commStatus1.statusBits.isRxFlowControl = 0;
5105:          	bcf	((__commStatus1))&0ffh,4	;volatile
5106:          	line	51
5107:          	
5108:          l2478:; BSR set to: 0
5109:          
5110:          ;main.c: 51: _commStatus2.statusBits.isRxFlowControl = 1;
5111:          	bsf	((__commStatus2))&0ffh,4	;volatile
5112:          	line	52
5113:          	
5114:          l2480:; BSR set to: 0
5115:          
5116:          ;main.c: 52: _sramStatus.dataLength = 0;
5117:          	clrf	(0+(__sramStatus+01h))&0ffh	;volatile
5118:          	clrf	(1+(__sramStatus+01h))&0ffh	;volatile
5119:          	clrf	(2+(__sramStatus+01h))&0ffh	;volatile
5120:          
5121:          	line	53
5122:          	
5123:          l2482:; BSR set to: 0
5124:          
5125:          ;main.c: 53: _sramStatus.readAddress = 0;
5126:          	clrf	(0+(__sramStatus+04h))&0ffh	;volatile
5127:          	clrf	(1+(__sramStatus+04h))&0ffh	;volatile
5128:          	clrf	(2+(__sramStatus+04h))&0ffh	;volatile
5129:          
5130:          	line	54
5131:          	
5132:          l2484:; BSR set to: 0
5133:          
5134:          ;main.c: 54: _sramStatus.writeAddress = 0;
5135:          	clrf	(0+(__sramStatus+07h))&0ffh	;volatile
5136:          	clrf	(1+(__sramStatus+07h))&0ffh	;volatile
5137:          	clrf	(2+(__sramStatus+07h))&0ffh	;volatile
5138:          
5139:          	line	55
5140:          	
5141:          l2486:; BSR set to: 0
5142:          
5143:          ;main.c: 55: _sramStatus.status = 0;
5144:          	clrf	((__sramStatus))&0ffh	;volatile
5145:          	line	58
5146:          	
5147:          l2488:; BSR set to: 0
5148:          
5149:          ;main.c: 58: T4CONbits.TMR4ON = 1;
5150:          	bsf	((c:3958)),c,2	;volatile
5151:          	line	62
5152:          	
5153:          l2490:; BSR set to: 0
5154:          
5155:          ;main.c: 61: SramMode mode;
5156:          ;main.c: 62: mode.holdDisabled = 1;
5157:          	bsf	((main@mode))&0ffh,0
5158:          	line	63
5159:          	
5160:          l2492:; BSR set to: 0
5161:          
5162:          ;main.c: 63: mode.mode = 0b01;
5163:          	movf	((main@mode))&0ffh,w
5164:          	andlw	not (((1<<2)-1)<<6)
5165:          	iorlw	(01h & ((1<<2)-1))<<6
5166:          	movwf	((main@mode))&0ffh
5167:          	line	64
5168:          	
5169:          l2494:; BSR set to: 0
5170:          
5171:          ;main.c: 64: SramSetMode(mode);
5172:          	movf	((main@mode))&0ffh,w
5173:          	
5174:          	call	_SramSetMode
5175:          	line	67
5176:          	
5177:          l2496:; BSR set to: 0
5178:          
5179:          ;main.c: 67: SramFill(0x000000, 0x20000, 0x00);
5180:          	movlw	low(0)
5181:          	movwf	((c:SramFill@address)),c
5182:          	movlw	high(0)
5183:          	movwf	((c:SramFill@address+1)),c
5184:          	movlw	low highword(0)
5185:          	movwf	((c:SramFill@address+2)),c
5186:          
5187:          	movlw	low(020000h)
5188:          	movwf	((c:SramFill@length)),c
5189:          	movlw	high(020000h)
5190:          	movwf	((c:SramFill@length+1)),c
5191:          	movlw	low highword(020000h)
5192:          	movwf	((c:SramFill@length+2)),c
5193:          
5194:          	movlw	low(0)
5195:          	movwf	((c:SramFill@value)),c
5196:          	call	_SramFill	;wreg free
5197:          	line	73
5198:          	
5199:          l2498:; BSR set to: 0
5200:          
5201:          ;main.c: 71: {
5202:          ;main.c: 73: CheckButton(&_button);
5203:          		movlw	low(__button)
5204:          	movwf	((c:CheckButton@buttonInfo)),c
5205:          
5206:          	call	_CheckButton	;wreg free
5207:          	line	76
5208:          	
5209:          l2500:
5210:          ;main.c: 76: if(_commStatus1.statusBits.isRxFlowControl)
5211:          	movlb	0	; () banked
5212:          	btfss	((__commStatus1))&0ffh,4	;volatile
5213:          	goto	u2111
5214:          	goto	u2110
5215:          u2111:
5216:          	goto	l2504
5217:          u2110:
5218:          	line	77
5219:          	
5220:          l2502:; BSR set to: 0
5221:          
5222:          ;main.c: 77: CheckFlowControlRx1();
5223:          	call	_CheckFlowControlRx1	;wreg free
5224:          	line	78
5225:          	
5226:          l2504:; BSR set to: 0
5227:          
5228:          ;main.c: 78: if(_rxBuffer1.length > 0)
5229:          	movf	(0+(__rxBuffer1+01h))&0ffh,w	;volatile
5230:          	btfsc	status,2
5231:          	goto	u2121
5232:          	goto	u2120
5233:          u2121:
5234:          	goto	l2508
5235:          u2120:
5236:          	line	79
5237:          	
5238:          l2506:; BSR set to: 0
5239:          
5240:          ;main.c: 79: putch2(getch1());
5241:          	call	_getch1	;wreg free
5242:          	
5243:          	call	_putch2
5244:          	line	81
5245:          	
5246:          l2508:
5247:          ;main.c: 81: if(_commStatus2.statusBits.isRxFlowControl)
5248:          	movlb	0	; () banked
5249:          	btfss	((__commStatus2))&0ffh,4	;volatile
5250:          	goto	u2131
5251:          	goto	u2130
5252:          u2131:
5253:          	goto	l2512
5254:          u2130:
5255:          	line	82
5256:          	
5257:          l2510:; BSR set to: 0
5258:          
5259:          ;main.c: 82: CheckFlowControlRx2();
5260:          	call	_CheckFlowControlRx2	;wreg free
5261:          	line	83
5262:          	
5263:          l2512:; BSR set to: 0
5264:          
5265:          ;main.c: 83: if(_rxBuffer2.length > 0)
5266:          	movf	(0+(__rxBuffer2+01h))&0ffh,w	;volatile
5267:          	btfsc	status,2
5268:          	goto	u2141
5269:          	goto	u2140
5270:          u2141:
5271:          	goto	l2516
5272:          u2140:
5273:          	line	84
5274:          	
5275:          l2514:; BSR set to: 0
5276:          
5277:          ;main.c: 84: putch1(getch2());
5278:          	call	_getch2	;wreg free
5279:          	
5280:          	call	_putch1
5281:          	line	87
5282:          	
5283:          l2516:
5284:          ;main.c: 87: if(_sramStatus.statusBits.isContinuousFill && !_sramStatus.statusBits.isBusyFill)
5285:          	movlb	0	; () banked
5286:          	btfss	((__sramStatus))&0ffh,6	;volatile
5287:          	goto	u2151
5288:          	goto	u2150
5289:          u2151:
5290:          	goto	l2522
5291:          u2150:
5292:          	
5293:          l2518:; BSR set to: 0
5294:          
5295:          	btfsc	((__sramStatus))&0ffh,2	;volatile
5296:          	goto	u2161
5297:          	goto	u2160
5298:          u2161:
5299:          	goto	l2522
5300:          u2160:
5301:          	line	88
5302:          	
5303:          l2520:; BSR set to: 0
5304:          
5305:          ;main.c: 88: SramFillNext();
5306:          	call	_SramFillNext	;wreg free
5307:          	line	90
5308:          	
5309:          l2522:; BSR set to: 0
5310:          
5311:          ;main.c: 90: if(!_sramStatus.statusBits.isBusyRead && _sramStatus.statusBits.hasUnreadData)
5312:          	btfsc	((__sramStatus))&0ffh,0	;volatile
5313:          	goto	u2171
5314:          	goto	u2170
5315:          u2171:
5316:          	goto	l2538
5317:          u2170:
5318:          	
5319:          l2524:; BSR set to: 0
5320:          
5321:          	btfss	((__sramStatus))&0ffh,7	;volatile
5322:          	goto	u2181
5323:          	goto	u2180
5324:          u2181:
5325:          	goto	l2538
5326:          u2180:
5327:          	line	93
5328:          	
5329:          l2526:; BSR set to: 0
5330:          
5331:          ;main.c: 91: {
5332:          ;main.c: 92: char number[8];
5333:          ;main.c: 93: ltoa(number, _sramStatus.readAddress - _sramStatus.dataLength, 16);
5334:          		movlw	low(main@number)
5335:          	movwf	((c:ltoa@buf)),c
5336:          
5337:          	movf	(0+(__sramStatus+01h))&0ffh,w	;volatile
5338:          	subwf	(0+(__sramStatus+04h))&0ffh,w	;volatile
5339:          	movwf	(??_main+0+0)&0ffh,c
5340:          	movf	(1+(__sramStatus+01h))&0ffh,w	;volatile
5341:          	subwfb	(1+(__sramStatus+04h))&0ffh,w	;volatile
5342:          	movwf	1+(??_main+0+0)&0ffh,c
5343:          	
5344:          	movf	(2+(__sramStatus+01h))&0ffh,w	;volatile
5345:          	subwfb	(2+(__sramStatus+04h))&0ffh,w	;volatile
5346:          	movwf	2+(??_main+0+0)&0ffh,c
5347:          
5348:          	movf	(??_main+0+0),c,w
5349:          	movwf	((c:ltoa@val)),c
5350:          	movf	(??_main+0+1),c,w
5351:          	movwf	1+((c:ltoa@val)),c
5352:          	
5353:          	movf	(??_main+0+2),c,w
5354:          	movwf	2+((c:ltoa@val)),c
5355:          	
5356:          	clrf	3+((c:ltoa@val)),c
5357:          	movlw	high(010h)
5358:          	movwf	((c:ltoa@base+1)),c
5359:          	movlw	low(010h)
5360:          	movwf	((c:ltoa@base)),c
5361:          	call	_ltoa	;wreg free
5362:          	line	94
5363:          	
5364:          l2528:
5365:          ;main.c: 94: printf("READ ADDRESS = 0x%s\n\r", number);
5366:          		movlw	low(STR_1)
5367:          	movwf	((c:printf@f)),c
5368:          
5369:          		movlw	low(main@number)
5370:          	movwf	(0+((c:?_printf)+01h)),c
5371:          
5372:          	call	_printf	;wreg free
5373:          	line	96
5374:          	
5375:          l2530:
5376:          ;main.c: 95: int i;
5377:          ;main.c: 96: for(i = 0; i < _sramStatus.dataLength; i++)
5378:          	movlb	0	; () banked
5379:          	clrf	((main@i))&0ffh
5380:          	clrf	((main@i+1))&0ffh
5381:          	goto	l2536
5382:          	line	98
5383:          	
5384:          l2532:; BSR set to: 0
5385:          
5386:          ;main.c: 97: {
5387:          ;main.c: 98: putch2(_sramBuffer.receive.rxData[i]);
5388:          	movlw	low(__sramBuffer+088h)
5389:          	addwf	((main@i))&0ffh,w
5390:          	movwf	c:fsr2l
5391:          	movlw	high(__sramBuffer+088h)
5392:          	addwfc	((main@i+1))&0ffh,w
5393:          	movwf	1+c:fsr2l
5394:          	movf	indf2,w
5395:          	
5396:          	call	_putch2
5397:          	line	96
5398:          	
5399:          l2534:
5400:          	movlb	0	; () banked
5401:          	infsnz	((main@i))&0ffh
5402:          	incf	((main@i+1))&0ffh
5403:          	
5404:          l2536:; BSR set to: 0
5405:          
5406:          	movff	(main@i),??_main+0+0
5407:          	movff	(main@i+1),??_main+0+0+1
5408:          	clrf	(??_main+0+0+2)&0ffh,c
5409:          	btfsc	(??_main+0+0+1)&0ffh,c,7
5410:          	setf	(??_main+0+0+2)&0ffh,c
5411:          		movf	(0+(__sramStatus+01h))&0ffh,w	;volatile
5412:          	subwf	(??_main+0+0),c,w
5413:          	movf	(1+(__sramStatus+01h))&0ffh,w	;volatile
5414:          	subwfb	(??_main+0+1),c,w
5415:          	movf	(2+(__sramStatus+01h))&0ffh,w	;volatile
5416:          	subwfb	(??_main+0+2),c,w
5417:          	btfss	status,0
5418:          	goto	u2191
5419:          	goto	u2190
5420:          
5421:          u2191:
5422:          	goto	l2532
5423:          u2190:
5424:          	
5425:          l184:; BSR set to: 0
5426:          
5427:          	line	100
5428:          ;main.c: 99: }
5429:          ;main.c: 100: _sramStatus.statusBits.hasUnreadData = 0;
5430:          	bcf	((__sramStatus))&0ffh,7	;volatile
5431:          	line	105
5432:          	
5433:          l2538:; BSR set to: 0
5434:          
5435:          ;main.c: 101: }
5436:          ;main.c: 105: if(_wifiConnectStatus == 0 && _tick > 5000)
5437:          	movf	((__wifiConnectStatus))&0ffh,w
5438:          	btfss	status,2
5439:          	goto	u2201
5440:          	goto	u2200
5441:          u2201:
5442:          	goto	l2548
5443:          u2200:
5444:          	
5445:          l2540:; BSR set to: 0
5446:          
5447:          		movf	((__tick+3))&0ffh,w	;volatile
5448:          	iorwf	((__tick+2))&0ffh,w	;volatile
5449:          	bnz	u2210
5450:          	movlw	137
5451:          	subwf	 ((__tick))&0ffh,w	;volatile
5452:          	movlw	19
5453:          	subwfb	((__tick+1))&0ffh,w	;volatile
5454:          	btfss	status,0
5455:          	goto	u2211
5456:          	goto	u2210
5457:          
5458:          u2211:
5459:          	goto	l2548
5460:          u2210:
5461:          	line	107
5462:          	
5463:          l2542:; BSR set to: 0
5464:          
5465:          ;main.c: 106: {
5466:          ;main.c: 107: LATAbits.LATA7 = 1;
5467:          	bsf	((c:3977)),c,7	;volatile
5468:          	line	108
5469:          	
5470:          l2544:; BSR set to: 0
5471:          
5472:          ;main.c: 108: _wifiConnectStatus = 1;
5473:          	movlw	low(01h)
5474:          	movwf	((__wifiConnectStatus))&0ffh
5475:          	line	109
5476:          	
5477:          l2546:; BSR set to: 0
5478:          
5479:          ;main.c: 109: RCSTA1bits.SPEN = 1;
5480:          	bsf	((c:4012)),c,7	;volatile
5481:          	line	113
5482:          	
5483:          l2548:; BSR set to: 0
5484:          
5485:          ;main.c: 110: }
5486:          ;main.c: 113: if(_wifiConnectStatus == 1 && _tick > 6000)
5487:          		decf	((__wifiConnectStatus))&0ffh,w
5488:          	btfss	status,2
5489:          	goto	u2221
5490:          	goto	u2220
5491:          
5492:          u2221:
5493:          	goto	l2498
5494:          u2220:
5495:          	
5496:          l2550:; BSR set to: 0
5497:          
5498:          		movf	((__tick+3))&0ffh,w	;volatile
5499:          	iorwf	((__tick+2))&0ffh,w	;volatile
5500:          	bnz	u2230
5501:          	movlw	113
5502:          	subwf	 ((__tick))&0ffh,w	;volatile
5503:          	movlw	23
5504:          	subwfb	((__tick+1))&0ffh,w	;volatile
5505:          	btfss	status,0
5506:          	goto	u2231
5507:          	goto	u2230
5508:          
5509:          u2231:
5510:          	goto	l2498
5511:          u2230:
5512:          	line	115
5513:          	
5514:          l2552:; BSR set to: 0
5515:          
5516:          ;main.c: 114: {
5517:          ;main.c: 115: putch1('A');
5518:          	movlw	(041h)&0ffh
5519:          	
5520:          	call	_putch1
5521:          	line	116
5522:          ;main.c: 116: putch1('T');
5523:          	movlw	(054h)&0ffh
5524:          	
5525:          	call	_putch1
5526:          	line	117
5527:          ;main.c: 117: putch1('\r');
5528:          	movlw	(0Dh)&0ffh
5529:          	
5530:          	call	_putch1
5531:          	line	118
5532:          ;main.c: 118: putch1('\n');
5533:          	movlw	(0Ah)&0ffh
5534:          	
5535:          	call	_putch1
5536:          	line	119
5537:          	
5538:          l2554:
5539:          ;main.c: 119: _wifiConnectStatus = 2;
5540:          	movlw	low(02h)
5541:          	movlb	0	; () banked
5542:          	movwf	((__wifiConnectStatus))&0ffh
5543:          	goto	l2498
5544:          	global	start
5545:          	goto	start
5546:          	opt stack 0
5547:          	line	123
5548:          GLOBAL	__end_of_main
5549:          	__end_of_main:
5550:          	signat	_main,89
5551:          	global	_printf
5552:          
5553:          ;; *************** function _printf *****************
5554:          ;; Defined at:
5555:          ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
5556:          ;; Parameters:    Size  Location     Type
5557:          ;;  f               1   39[COMRAM] PTR const unsigned char 
5558:          ;;		 -> STR_1(22), 
5559:          ;; Auto vars:     Size  Location     Type
5560:          ;;  tmpval          4    0        struct .
5561:          ;;  cp              2   44[COMRAM] PTR const unsigned char 
5562:          ;;		 -> STR_2(7), main@number(8), 
5563:          ;;  len             2    0        unsigned int 
5564:          ;;  val             2    0        unsigned int 
5565:          ;;  c               1   43[COMRAM] char 
5566:          ;;  ap              1   42[COMRAM] PTR void [1]
5567:          ;;		 -> ?_printf(2), 
5568:          ;;  flag            1    0        unsigned char 
5569:          ;;  prec            1    0        char 
5570:          ;; Return value:  Size  Location     Type
5571:          ;;                  2   39[COMRAM] int 
5572:          ;; Registers used:
5573:          ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
5574:          ;; Tracked objects:
5575:          ;;		On entry : 0/0
5576:          ;;		On exit  : 0/0
5577:          ;;		Unchanged: 0/0
5578:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
5579:          ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5580:          ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5581:          ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5582:          ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5583:          ;;Total ram usage:        7 bytes
5584:          ;; Hardware stack levels used:    1
5585:          ;; Hardware stack levels required when called:    9
5586:          ;; This function calls:
5587:          ;;		_putch
5588:          ;; This function is called by:
5589:          ;;		_main
5590:          ;; This function uses a non-reentrant model
5591:          ;;
5592:          psect	text1,class=CODE,space=0,reloc=2,group=0
5593:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
5594:          	line	464
5595:          global __ptext1
5596:          __ptext1:
5597:          psect	text1
5598:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
5599:          	line	464
5600:          	global	__size_of_printf
5601:          	__size_of_printf	equ	__end_of_printf-_printf
5602:          	
5603:          _printf:; BSR set to: 0
5604:          
5605:          ;incstack = 0
5606:          	opt	stack 21
5607:          	line	533
5608:          	
5609:          l2364:
5610:          ;doprnt.c: 466: va_list ap;
5611:          ;doprnt.c: 499: signed char c;
5612:          ;doprnt.c: 506: signed char prec;
5613:          ;doprnt.c: 508: unsigned char flag;
5614:          ;doprnt.c: 523: union {
5615:          ;doprnt.c: 524: unsigned long vd;
5616:          ;doprnt.c: 525: double integ;
5617:          ;doprnt.c: 526: } tmpval;
5618:          ;doprnt.c: 528: unsigned int val;
5619:          ;doprnt.c: 529: unsigned len;
5620:          ;doprnt.c: 530: const char * cp;
5621:          ;doprnt.c: 533: *ap = __va_start();
5622:          		movlw	low(?_printf+01h)
5623:          	movwf	((c:printf@ap)),c
5624:          
5625:          	line	536
5626:          ;doprnt.c: 536: while(c = *f++) {
5627:          	goto	l2388
5628:          	line	538
5629:          	
5630:          l2366:
5631:          ;doprnt.c: 538: if(c != '%')
5632:          		movlw	37
5633:          	xorwf	((c:printf@c)),c,w
5634:          	btfsc	status,2
5635:          	goto	u1841
5636:          	goto	u1840
5637:          
5638:          u1841:
5639:          	goto	l2386
5640:          u1840:
5641:          	line	541
5642:          	
5643:          l2368:
5644:          ;doprnt.c: 540: {
5645:          ;doprnt.c: 541: (putch(c) );
5646:          	movf	((c:printf@c)),c,w
5647:          	
5648:          	call	_putch
5649:          	line	542
5650:          ;doprnt.c: 542: continue;
5651:          	goto	l2388
5652:          	line	734
5653:          	
5654:          l2370:
5655:          ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0));
5656:          	movf	((c:printf@ap)),c,w
5657:          	movwf	fsr2l
5658:          	clrf	fsr2h
5659:          	movf	indf2,w
5660:          	movwf	(??_printf+0+0)&0ffh,c
5661:          		movff	(??_printf+0+0),(c:printf@cp)
5662:          	clrf	((c:printf@cp+1)),c
5663:          
5664:          	
5665:          l2372:
5666:          	incf	((c:printf@ap)),c
5667:          	line	740
5668:          	
5669:          l2374:
5670:          ;doprnt.c: 740: if(!cp)
5671:          	movf	((c:printf@cp)),c,w
5672:          iorwf	((c:printf@cp+1)),c,w
5673:          	btfss	status,2
5674:          	goto	u1851
5675:          	goto	u1850
5676:          
5677:          u1851:
5678:          	goto	l2382
5679:          u1850:
5680:          	line	741
5681:          	
5682:          l2376:
5683:          ;doprnt.c: 741: cp = "(null)";
5684:          		movlw	low(STR_2)
5685:          	movwf	((c:printf@cp)),c
5686:          	movf	((c:printf@cp)),c,w
5687:          	btfss	status,2
5688:          	movlw	high(__smallconst)
5689:          	movwf	((c:printf@cp+1)),c
5690:          
5691:          	goto	l2382
5692:          	line	778
5693:          	
5694:          l2378:
5695:          ;doprnt.c: 778: (putch(*cp++) );
5696:          	movff	(c:printf@cp),tblptrl
5697:          	movff	(c:printf@cp+1),tblptrh
5698:          	movlw	low highword(__smallconst)
5699:          	movwf	tblptru
5700:          	
5701:          	movlw	high __ramtop-1
5702:          	cpfsgt	tblptrh
5703:          	bra	u1867
5704:          	tblrd	*
5705:          	
5706:          	movf	tablat,w
5707:          	bra	u1860
5708:          u1867:
5709:          	movff	tblptrl,fsr0l
5710:          	movff	tblptrh,fsr0h
5711:          	movf	indf0,w
5712:          u1860:
5713:          	
5714:          	call	_putch
5715:          	
5716:          l2380:
5717:          	infsnz	((c:printf@cp)),c
5718:          	incf	((c:printf@cp+1)),c
5719:          	line	777
5720:          	
5721:          l2382:
5722:          	movff	(c:printf@cp),tblptrl
5723:          	movff	(c:printf@cp+1),tblptrh
5724:          	movlw	low highword(__smallconst)
5725:          	movwf	tblptru
5726:          	
5727:          	movlw	high __ramtop-1
5728:          	cpfsgt	tblptrh
5729:          	bra	u1877
5730:          	tblrd	*
5731:          	
5732:          	movf	tablat,w
5733:          	bra	u1870
5734:          u1877:
5735:          	movff	tblptrl,fsr0l
5736:          	movff	tblptrh,fsr0h
5737:          	movf	indf0,w
5738:          u1870:
5739:          	iorlw	0
5740:          	btfss	status,2
5741:          	goto	u1881
5742:          	goto	u1880
5743:          u1881:
5744:          	goto	l2378
5745:          u1880:
5746:          	goto	l2388
5747:          	line	635
5748:          	
5749:          l2386:
5750:          	incf	((c:printf@f)),c
5751:          	decf	((c:printf@f)),c,w
5752:          	movwf	(??_printf+0+0)&0ffh,c
5753:          	movff	(??_printf+0+0),tblptrl
5754:          	if	1	;There is more than 1 active tblptr byte
5755:          	global __smallconst
5756:          movlw	high(__smallconst)
5757:          	movwf	tblptrh
5758:          	endif
5759:          	if	0	;tblptru may be non-zero
5760:          	clrf	tblptru
5761:          	endif
5762:          	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
5763:          	movlw	low highword(__smallconst)
5764:          	movwf	tblptru
5765:          	endif
5766:          	tblrd	*
5767:          	
5768:          	movff	tablat,(c:printf@c)
5769:          	movf	((c:printf@c)),c,w
5770:          	; Switch size 1, requested type "space"
5771:          ; Number of cases is 2, Range of values is 0 to 115
5772:          ; switch strategies available:
5773:          ; Name         Instructions Cycles
5774:          ; simple_byte            7     4 (average)
5775:          ;	Chosen strategy is simple_byte
5776:          
5777:          	xorlw	0^0	; case 0
5778:          	skipnz
5779:          	goto	l508
5780:          	xorlw	115^0	; case 115
5781:          	skipnz
5782:          	goto	l2370
5783:          	goto	l2388
5784:          
5785:          	line	536
5786:          	
5787:          l2388:
5788:          	incf	((c:printf@f)),c
5789:          	decf	((c:printf@f)),c,w
5790:          	movwf	(??_printf+0+0)&0ffh,c
5791:          	movff	(??_printf+0+0),tblptrl
5792:          	if	1	;There is more than 1 active tblptr byte
5793:          	global __smallconst
5794:          movlw	high(__smallconst)
5795:          	movwf	tblptrh
5796:          	endif
5797:          	if	0	;tblptru may be non-zero
5798:          	clrf	tblptru
5799:          	endif
5800:          	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
5801:          	movlw	low highword(__smallconst)
5802:          	movwf	tblptru
5803:          	endif
5804:          	tblrd	*
5805:          	
5806:          	movff	tablat,(c:printf@c)
5807:          	movf	((c:printf@c)),c,w
5808:          	btfss	status,2
5809:          	goto	u1891
5810:          	goto	u1890
5811:          u1891:
5812:          	goto	l2366
5813:          u1890:
5814:          	line	1541
5815:          	
5816:          l508:
5817:          	return	;funcret
5818:          	opt stack 0
5819:          GLOBAL	__end_of_printf
5820:          	__end_of_printf:
5821:          	signat	_printf,602
5822:          	global	_putch
5823:          
5824:          ;; *************** function _putch *****************
5825:          ;; Defined at:
5826:          ;;		line 62 in file "serial_comm.c"
5827:          ;; Parameters:    Size  Location     Type
5828:          ;;  data            1    wreg     unsigned char 
5829:          ;; Auto vars:     Size  Location     Type
5830:          ;;  data            1   38[COMRAM] unsigned char 
5831:          ;; Return value:  Size  Location     Type
5832:          ;;                  1    wreg      void 
5833:          ;; Registers used:
5834:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
5835:          ;; Tracked objects:
5836:          ;;		On entry : 0/0
5837:          ;;		On exit  : 0/0
5838:          ;;		Unchanged: 0/0
5839:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
5840:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5841:          ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5842:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5843:          ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5844:          ;;Total ram usage:        1 bytes
5845:          ;; Hardware stack levels used:    1
5846:          ;; Hardware stack levels required when called:    8
5847:          ;; This function calls:
5848:          ;;		_putch1
5849:          ;;		_putch2
5850:          ;; This function is called by:
5851:          ;;		_printf
5852:          ;; This function uses a non-reentrant model
5853:          ;;
5854:          psect	text2,class=CODE,space=0,reloc=2,group=0
5855:          	file	"serial_comm.c"
5856:          	line	62
5857:          global __ptext2
5858:          __ptext2:
5859:          psect	text2
5860:          	file	"serial_comm.c"
5861:          	line	62
5862:          	global	__size_of_putch
5863:          	__size_of_putch	equ	__end_of_putch-_putch
5864:          	
5865:          _putch:
5866:          ;incstack = 0
5867:          	opt	stack 21
5868:          ;putch@data stored from wreg
5869:          	movwf	((c:putch@data)),c
5870:          	line	64
5871:          	
5872:          l2004:
5873:          ;serial_comm.c: 64: if(_commStatus1.statusBits.isTxTarget)
5874:          	movlb	0	; () banked
5875:          	btfss	((__commStatus1))&0ffh,1	;volatile
5876:          	goto	u1411
5877:          	goto	u1410
5878:          u1411:
5879:          	goto	l2008
5880:          u1410:
5881:          	line	65
5882:          	
5883:          l2006:; BSR set to: 0
5884:          
5885:          ;serial_comm.c: 65: putch1(data);
5886:          	movf	((c:putch@data)),c,w
5887:          	
5888:          	call	_putch1
5889:          	line	66
5890:          	
5891:          l2008:
5892:          ;serial_comm.c: 66: if(_commStatus2.statusBits.isTxTarget)
5893:          	movlb	0	; () banked
5894:          	btfss	((__commStatus2))&0ffh,1	;volatile
5895:          	goto	u1421
5896:          	goto	u1420
5897:          u1421:
5898:          	goto	l433
5899:          u1420:
5900:          	line	67
5901:          	
5902:          l2010:; BSR set to: 0
5903:          
5904:          ;serial_comm.c: 67: putch2(data);
5905:          	movf	((c:putch@data)),c,w
5906:          	
5907:          	call	_putch2
5908:          	line	68
5909:          	
5910:          l433:
5911:          	return	;funcret
5912:          	opt stack 0
5913:          GLOBAL	__end_of_putch
5914:          	__end_of_putch:
5915:          	signat	_putch,4217
5916:          	global	_putch2
5917:          
5918:          ;; *************** function _putch2 *****************
5919:          ;; Defined at:
5920:          ;;		line 99 in file "serial_comm.c"
5921:          ;; Parameters:    Size  Location     Type
5922:          ;;  data            1    wreg     unsigned char 
5923:          ;; Auto vars:     Size  Location     Type
5924:          ;;  data            1   36[COMRAM] unsigned char 
5925:          ;;  character       1   37[COMRAM] unsigned char 
5926:          ;; Return value:  Size  Location     Type
5927:          ;;                  1    wreg      void 
5928:          ;; Registers used:
5929:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
5930:          ;; Tracked objects:
5931:          ;;		On entry : 0/0
5932:          ;;		On exit  : 0/0
5933:          ;;		Unchanged: 0/0
5934:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
5935:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5936:          ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5937:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5938:          ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
5939:          ;;Total ram usage:        2 bytes
5940:          ;; Hardware stack levels used:    1
5941:          ;; Hardware stack levels required when called:    7
5942:          ;; This function calls:
5943:          ;;		_RingBufferDequeue
5944:          ;;		_RingBufferEnqueue
5945:          ;; This function is called by:
5946:          ;;		_main
5947:          ;;		_putch
5948:          ;; This function uses a non-reentrant model
5949:          ;;
5950:          psect	text3,class=CODE,space=0,reloc=2,group=0
5951:          	line	99
5952:          global __ptext3
5953:          __ptext3:
5954:          psect	text3
5955:          	file	"serial_comm.c"
5956:          	line	99
5957:          	global	__size_of_putch2
5958:          	__size_of_putch2	equ	__end_of_putch2-_putch2
5959:          	
5960:          _putch2:
5961:          ;incstack = 0
5962:          	opt	stack 23
5963:          ;putch2@data stored from wreg
5964:          	movwf	((c:putch2@data)),c
5965:          	line	101
5966:          	
5967:          l1942:
5968:          ;serial_comm.c: 101: RingBufferEnqueue(&_txBuffer2, data);
5969:          		movlw	low(__txBuffer2)
5970:          	movwf	((c:RingBufferEnqueue@buffer)),c
5971:          
5972:          	movff	(c:putch2@data),(c:RingBufferEnqueue@data)
5973:          	call	_RingBufferEnqueue	;wreg free
5974:          	line	102
5975:          	
5976:          l1944:
5977:          ;serial_comm.c: 102: if(_txBuffer2.length == 32)
5978:          		movlw	32
5979:          	xorwf	(0+((c:__txBuffer2)+01h)),c,w	;volatile
5980:          	btfss	status,2
5981:          	goto	u1291
5982:          	goto	u1290
5983:          
5984:          u1291:
5985:          	goto	l452
5986:          u1290:
5987:          	line	104
5988:          	
5989:          l1946:
5990:          ;serial_comm.c: 103: {
5991:          ;serial_comm.c: 104: PIE3bits.TX2IE = 0;
5992:          	bcf	((c:4003)),c,4	;volatile
5993:          	line	105
5994:          ;serial_comm.c: 105: while(_txBuffer2.length > 0)
5995:          	goto	l1952
5996:          	line	110
5997:          	
5998:          l455:
5999:          	line	107
6000:          	btfss	((c:4004)),c,4	;volatile
6001:          	goto	u1301
6002:          	goto	u1300
6003:          u1301:
6004:          	goto	l455
6005:          u1300:
6006:          	line	111
6007:          	
6008:          l1948:
6009:          ;serial_comm.c: 110: }
6010:          ;serial_comm.c: 111: char character = RingBufferDequeue(&_txBuffer2);
6011:          		movlw	low(__txBuffer2)
6012:          	movwf	((c:RingBufferDequeue@buffer)),c
6013:          
6014:          	call	_RingBufferDequeue	;wreg free
6015:          	movwf	((c:putch2@character)),c
6016:          	line	112
6017:          	
6018:          l1950:
6019:          ;serial_comm.c: 112: TXREG2 = character;
6020:          	movff	(c:putch2@character),(c:4009)	;volatile
6021:          	line	105
6022:          	
6023:          l1952:
6024:          	movf	(0+((c:__txBuffer2)+01h)),c,w	;volatile
6025:          	btfss	status,2
6026:          	goto	u1311
6027:          	goto	u1310
6028:          u1311:
6029:          	goto	l455
6030:          u1310:
6031:          	line	114
6032:          	
6033:          l452:
6034:          	line	115
6035:          ;serial_comm.c: 113: }
6036:          ;serial_comm.c: 114: }
6037:          ;serial_comm.c: 115: PIE3bits.TX2IE = 1;
6038:          	bsf	((c:4003)),c,4	;volatile
6039:          	line	116
6040:          	
6041:          l459:
6042:          	return	;funcret
6043:          	opt stack 0
6044:          GLOBAL	__end_of_putch2
6045:          	__end_of_putch2:
6046:          	signat	_putch2,4217
6047:          	global	_putch1
6048:          
6049:          ;; *************** function _putch1 *****************
6050:          ;; Defined at:
6051:          ;;		line 80 in file "serial_comm.c"
6052:          ;; Parameters:    Size  Location     Type
6053:          ;;  data            1    wreg     unsigned char 
6054:          ;; Auto vars:     Size  Location     Type
6055:          ;;  data            1   36[COMRAM] unsigned char 
6056:          ;;  character       1   37[COMRAM] unsigned char 
6057:          ;; Return value:  Size  Location     Type
6058:          ;;                  1    wreg      void 
6059:          ;; Registers used:
6060:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
6061:          ;; Tracked objects:
6062:          ;;		On entry : 0/0
6063:          ;;		On exit  : 0/0
6064:          ;;		Unchanged: 0/0
6065:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
6066:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6067:          ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6068:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6069:          ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6070:          ;;Total ram usage:        2 bytes
6071:          ;; Hardware stack levels used:    1
6072:          ;; Hardware stack levels required when called:    7
6073:          ;; This function calls:
6074:          ;;		_RingBufferDequeue
6075:          ;;		_RingBufferEnqueue
6076:          ;; This function is called by:
6077:          ;;		_main
6078:          ;;		_putch
6079:          ;; This function uses a non-reentrant model
6080:          ;;
6081:          psect	text4,class=CODE,space=0,reloc=2,group=0
6082:          	line	80
6083:          global __ptext4
6084:          __ptext4:
6085:          psect	text4
6086:          	file	"serial_comm.c"
6087:          	line	80
6088:          	global	__size_of_putch1
6089:          	__size_of_putch1	equ	__end_of_putch1-_putch1
6090:          	
6091:          _putch1:
6092:          ;incstack = 0
6093:          	opt	stack 23
6094:          ;putch1@data stored from wreg
6095:          	movwf	((c:putch1@data)),c
6096:          	line	82
6097:          	
6098:          l1954:
6099:          ;serial_comm.c: 82: RingBufferEnqueue(&_txBuffer1, data);
6100:          		movlw	low(__txBuffer1)
6101:          	movwf	((c:RingBufferEnqueue@buffer)),c
6102:          
6103:          	movff	(c:putch1@data),(c:RingBufferEnqueue@data)
6104:          	call	_RingBufferEnqueue	;wreg free
6105:          	line	83
6106:          	
6107:          l1956:
6108:          ;serial_comm.c: 83: if(_txBuffer1.length == 32)
6109:          		movlw	32
6110:          	xorwf	(0+((c:__txBuffer1)+01h)),c,w	;volatile
6111:          	btfss	status,2
6112:          	goto	u1321
6113:          	goto	u1320
6114:          
6115:          u1321:
6116:          	goto	l442
6117:          u1320:
6118:          	line	85
6119:          	
6120:          l1958:
6121:          ;serial_comm.c: 84: {
6122:          ;serial_comm.c: 85: PIE1bits.TX1IE = 0;
6123:          	bcf	((c:3997)),c,4	;volatile
6124:          	line	86
6125:          ;serial_comm.c: 86: while(_txBuffer1.length > 0)
6126:          	goto	l1964
6127:          	line	91
6128:          	
6129:          l445:
6130:          	line	88
6131:          	btfss	((c:3998)),c,4	;volatile
6132:          	goto	u1331
6133:          	goto	u1330
6134:          u1331:
6135:          	goto	l445
6136:          u1330:
6137:          	line	92
6138:          	
6139:          l1960:
6140:          ;serial_comm.c: 91: }
6141:          ;serial_comm.c: 92: char character = RingBufferDequeue(&_txBuffer1);
6142:          		movlw	low(__txBuffer1)
6143:          	movwf	((c:RingBufferDequeue@buffer)),c
6144:          
6145:          	call	_RingBufferDequeue	;wreg free
6146:          	movwf	((c:putch1@character)),c
6147:          	line	93
6148:          	
6149:          l1962:
6150:          ;serial_comm.c: 93: TXREG1 = character;
6151:          	movff	(c:putch1@character),(c:4014)	;volatile
6152:          	line	86
6153:          	
6154:          l1964:
6155:          	movf	(0+((c:__txBuffer1)+01h)),c,w	;volatile
6156:          	btfss	status,2
6157:          	goto	u1341
6158:          	goto	u1340
6159:          u1341:
6160:          	goto	l445
6161:          u1340:
6162:          	line	95
6163:          	
6164:          l442:
6165:          	line	96
6166:          ;serial_comm.c: 94: }
6167:          ;serial_comm.c: 95: }
6168:          ;serial_comm.c: 96: PIE1bits.TX1IE = 1;
6169:          	bsf	((c:3997)),c,4	;volatile
6170:          	line	97
6171:          	
6172:          l449:
6173:          	return	;funcret
6174:          	opt stack 0
6175:          GLOBAL	__end_of_putch1
6176:          	__end_of_putch1:
6177:          	signat	_putch1,4217
6178:          	global	_RingBufferEnqueue
6179:          
6180:          ;; *************** function _RingBufferEnqueue *****************
6181:          ;; Defined at:
6182:          ;;		line 30 in file "serial_comm.c"
6183:          ;; Parameters:    Size  Location     Type
6184:          ;;  buffer          1   31[COMRAM] PTR volatile struct _Rin
6185:          ;;		 -> _rxBuffer2(6), _rxBuffer1(6), _txBuffer2(6), _txBuffer1(6), 
6186:          ;;  data            1   32[COMRAM] unsigned char 
6187:          ;; Auto vars:     Size  Location     Type
6188:          ;;		None
6189:          ;; Return value:  Size  Location     Type
6190:          ;;                  1    wreg      void 
6191:          ;; Registers used:
6192:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
6193:          ;; Tracked objects:
6194:          ;;		On entry : 0/0
6195:          ;;		On exit  : 0/0
6196:          ;;		Unchanged: 0/0
6197:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
6198:          ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6199:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6200:          ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6201:          ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6202:          ;;Total ram usage:        5 bytes
6203:          ;; Hardware stack levels used:    1
6204:          ;; Hardware stack levels required when called:    6
6205:          ;; This function calls:
6206:          ;;		___awmod
6207:          ;; This function is called by:
6208:          ;;		_putch1
6209:          ;;		_putch2
6210:          ;; This function uses a non-reentrant model
6211:          ;;
6212:          psect	text5,class=CODE,space=0,reloc=2,group=0
6213:          	line	30
6214:          global __ptext5
6215:          __ptext5:
6216:          psect	text5
6217:          	file	"serial_comm.c"
6218:          	line	30
6219:          	global	__size_of_RingBufferEnqueue
6220:          	__size_of_RingBufferEnqueue	equ	__end_of_RingBufferEnqueue-_RingBufferEnqueue
6221:          	
6222:          _RingBufferEnqueue:
6223:          ;incstack = 0
6224:          	opt	stack 23
6225:          	line	32
6226:          	
6227:          l1916:
6228:          ;serial_comm.c: 32: buffer->head = (buffer->head + 1) % buffer->bufferSize;
6229:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6230:          	movwf	fsr2l
6231:          	clrf	fsr2h
6232:          	movlw	low(02h)
6233:          	addwf	fsr2l
6234:          
6235:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6236:          	movwf	fsr1l
6237:          	clrf	fsr1h
6238:          	movlw	low(02h)
6239:          	addwf	fsr1l
6240:          
6241:          	movf	indf1,w
6242:          	movwf	(??_RingBufferEnqueue+0+0)&0ffh,c
6243:          	movlw	low(01h)
6244:          	addwf	((??_RingBufferEnqueue+0+0)),c,w
6245:          	movwf	((c:___awmod@dividend)),c
6246:          	clrf	1+((c:___awmod@dividend)),c
6247:          	movlw	high(01h)
6248:          	addwfc	1+((c:___awmod@dividend)),c
6249:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6250:          	movwf	fsr1l
6251:          	clrf	fsr1h
6252:          	movf	indf1,w
6253:          	movwf	((c:___awmod@divisor)),c
6254:          	clrf	((c:___awmod@divisor+1)),c
6255:          	call	___awmod	;wreg free
6256:          	movf	(0+?___awmod),c,w
6257:          	movwf	indf2,c
6258:          
6259:          	line	33
6260:          	
6261:          l1918:
6262:          ;serial_comm.c: 33: buffer->data[buffer->head] = data;
6263:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6264:          	movwf	fsr2l
6265:          	clrf	fsr2h
6266:          	movlw	low(02h)
6267:          	addwf	fsr2l
6268:          
6269:          	movf	indf2,w
6270:          	movwf	(??_RingBufferEnqueue+0+0)&0ffh,c
6271:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6272:          	movwf	fsr2l
6273:          	clrf	fsr2h
6274:          	movlw	low(04h)
6275:          	addwf	fsr2l
6276:          
6277:          	movff	postinc2,??_RingBufferEnqueue+1+0
6278:          	movff	postdec2,??_RingBufferEnqueue+1+0+1
6279:          	movf	((??_RingBufferEnqueue+0+0)),c,w
6280:          	addwf	(??_RingBufferEnqueue+1+0),c,w
6281:          	movwf	c:fsr2l
6282:          	movlw	0
6283:          	addwfc	(??_RingBufferEnqueue+1+1),c,w
6284:          	movwf	1+c:fsr2l
6285:          	movff	(c:RingBufferEnqueue@data),indf2
6286:          
6287:          	line	34
6288:          	
6289:          l1920:
6290:          ;serial_comm.c: 34: if(buffer->length == buffer->bufferSize)
6291:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6292:          	movwf	fsr2l
6293:          	clrf	fsr2h
6294:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6295:          	movwf	fsr1l
6296:          	clrf	fsr1h
6297:          	movlw	low(01h)
6298:          	addwf	fsr1l
6299:          
6300:          	movf	postinc2,w
6301:          xorwf	postinc1,w
6302:          	btfss	status,2
6303:          	goto	u1271
6304:          	goto	u1270
6305:          
6306:          u1271:
6307:          	goto	l1924
6308:          u1270:
6309:          	line	35
6310:          	
6311:          l1922:
6312:          ;serial_comm.c: 35: buffer->tail = (buffer->tail + 1) % buffer->bufferSize;
6313:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6314:          	movwf	fsr2l
6315:          	clrf	fsr2h
6316:          	movlw	low(03h)
6317:          	addwf	fsr2l
6318:          
6319:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6320:          	movwf	fsr1l
6321:          	clrf	fsr1h
6322:          	movlw	low(03h)
6323:          	addwf	fsr1l
6324:          
6325:          	movf	indf1,w
6326:          	movwf	(??_RingBufferEnqueue+0+0)&0ffh,c
6327:          	movlw	low(01h)
6328:          	addwf	((??_RingBufferEnqueue+0+0)),c,w
6329:          	movwf	((c:___awmod@dividend)),c
6330:          	clrf	1+((c:___awmod@dividend)),c
6331:          	movlw	high(01h)
6332:          	addwfc	1+((c:___awmod@dividend)),c
6333:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6334:          	movwf	fsr1l
6335:          	clrf	fsr1h
6336:          	movf	indf1,w
6337:          	movwf	((c:___awmod@divisor)),c
6338:          	clrf	((c:___awmod@divisor+1)),c
6339:          	call	___awmod	;wreg free
6340:          	movf	(0+?___awmod),c,w
6341:          	movwf	indf2,c
6342:          
6343:          	goto	l419
6344:          	line	37
6345:          	
6346:          l1924:
6347:          ;serial_comm.c: 36: else
6348:          ;serial_comm.c: 37: buffer->length++;
6349:          	movf	((c:RingBufferEnqueue@buffer)),c,w
6350:          	movwf	fsr2l
6351:          	clrf	fsr2h
6352:          	movlw	low(01h)
6353:          	addwf	fsr2l
6354:          
6355:          	incf	indf2
6356:          
6357:          	line	38
6358:          	
6359:          l419:
6360:          	return	;funcret
6361:          	opt stack 0
6362:          GLOBAL	__end_of_RingBufferEnqueue
6363:          	__end_of_RingBufferEnqueue:
6364:          	signat	_RingBufferEnqueue,8313
6365:          	global	_ltoa
6366:          
6367:          ;; *************** function _ltoa *****************
6368:          ;; Defined at:
6369:          ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ltoa.c"
6370:          ;; Parameters:    Size  Location     Type
6371:          ;;  buf             1   50[COMRAM] PTR unsigned char 
6372:          ;;		 -> main@number(8), 
6373:          ;;  val             4   51[COMRAM] long 
6374:          ;;  base            2   55[COMRAM] int 
6375:          ;; Auto vars:     Size  Location     Type
6376:          ;;  cp              1    0        PTR unsigned char 
6377:          ;;		 -> main@number(8), 
6378:          ;; Return value:  Size  Location     Type
6379:          ;;                  1    wreg      PTR unsigned char 
6380:          ;; Registers used:
6381:          ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
6382:          ;; Tracked objects:
6383:          ;;		On entry : 3F/0
6384:          ;;		On exit  : 0/0
6385:          ;;		Unchanged: 0/0
6386:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
6387:          ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6388:          ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6389:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6390:          ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6391:          ;;Total ram usage:        8 bytes
6392:          ;; Hardware stack levels used:    1
6393:          ;; Hardware stack levels required when called:    7
6394:          ;; This function calls:
6395:          ;;		_ultoa
6396:          ;; This function is called by:
6397:          ;;		_main
6398:          ;; This function uses a non-reentrant model
6399:          ;;
6400:          psect	text6,class=CODE,space=0,reloc=2,group=2
6401:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ltoa.c"
6402:          	line	7
6403:          global __ptext6
6404:          __ptext6:
6405:          psect	text6
6406:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ltoa.c"
6407:          	line	7
6408:          	global	__size_of_ltoa
6409:          	__size_of_ltoa	equ	__end_of_ltoa-_ltoa
6410:          	
6411:          _ltoa:
6412:          ;incstack = 0
6413:          	opt	stack 23
6414:          	line	10
6415:          	
6416:          l2352:; BSR set to: 0
6417:          
6418:          	line	12
6419:          	btfsc	((c:ltoa@val+3)),c,7
6420:          	goto	u1830
6421:          	goto	u1831
6422:          
6423:          u1831:
6424:          	goto	l2360
6425:          u1830:
6426:          	line	13
6427:          	
6428:          l2354:; BSR set to: 0
6429:          
6430:          	movf	((c:ltoa@buf)),c,w
6431:          	movwf	fsr2l
6432:          	clrf	fsr2h
6433:          	movlw	low(02Dh)
6434:          	movwf	indf2
6435:          	
6436:          l2356:; BSR set to: 0
6437:          
6438:          	incf	((c:ltoa@buf)),c
6439:          	line	14
6440:          	
6441:          l2358:; BSR set to: 0
6442:          
6443:          	comf	((c:ltoa@val+3)),c
6444:          	comf	((c:ltoa@val+2)),c
6445:          	comf	((c:ltoa@val+1)),c
6446:          	negf	((c:ltoa@val)),c
6447:          	movlw	0
6448:          	addwfc	((c:ltoa@val+1)),c
6449:          	addwfc	((c:ltoa@val+2)),c
6450:          	addwfc	((c:ltoa@val+3)),c
6451:          	line	19
6452:          	
6453:          l2360:; BSR set to: 0
6454:          
6455:          		movff	(c:ltoa@buf),(c:ultoa@buf)
6456:          
6457:          	movff	(c:ltoa@val),(c:ultoa@val)
6458:          	movff	(c:ltoa@val+1),(c:ultoa@val+1)
6459:          	movff	(c:ltoa@val+2),(c:ultoa@val+2)
6460:          	movff	(c:ltoa@val+3),(c:ultoa@val+3)
6461:          	movff	(c:ltoa@base),(c:ultoa@base)
6462:          	movff	(c:ltoa@base+1),(c:ultoa@base+1)
6463:          	call	_ultoa	;wreg free
6464:          	line	22
6465:          	
6466:          l909:
6467:          	return	;funcret
6468:          	opt stack 0
6469:          GLOBAL	__end_of_ltoa
6470:          	__end_of_ltoa:
6471:          	signat	_ltoa,12410
6472:          	global	_ultoa
6473:          
6474:          ;; *************** function _ultoa *****************
6475:          ;; Defined at:
6476:          ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ltoa.c"
6477:          ;; Parameters:    Size  Location     Type
6478:          ;;  buf             1   38[COMRAM] PTR unsigned char 
6479:          ;;		 -> main@number(8), 
6480:          ;;  val             4   39[COMRAM] unsigned long 
6481:          ;;  base            2   43[COMRAM] int 
6482:          ;; Auto vars:     Size  Location     Type
6483:          ;;  v               4   45[COMRAM] unsigned long 
6484:          ;;  c               1   49[COMRAM] unsigned char 
6485:          ;; Return value:  Size  Location     Type
6486:          ;;                  1    wreg      PTR unsigned char 
6487:          ;; Registers used:
6488:          ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
6489:          ;; Tracked objects:
6490:          ;;		On entry : 3F/0
6491:          ;;		On exit  : 0/0
6492:          ;;		Unchanged: 0/0
6493:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
6494:          ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6495:          ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6496:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6497:          ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6498:          ;;Total ram usage:       12 bytes
6499:          ;; Hardware stack levels used:    1
6500:          ;; Hardware stack levels required when called:    6
6501:          ;; This function calls:
6502:          ;;		___lldiv
6503:          ;;		___llmod
6504:          ;; This function is called by:
6505:          ;;		_ltoa
6506:          ;; This function uses a non-reentrant model
6507:          ;;
6508:          psect	text7,class=CODE,space=0,reloc=2,group=2
6509:          	line	32
6510:          global __ptext7
6511:          __ptext7:
6512:          psect	text7
6513:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ltoa.c"
6514:          	line	32
6515:          	global	__size_of_ultoa
6516:          	__size_of_ultoa	equ	__end_of_ultoa-_ultoa
6517:          	
6518:          _ultoa:
6519:          ;incstack = 0
6520:          	opt	stack 23
6521:          	line	38
6522:          	
6523:          l2012:; BSR set to: 0
6524:          
6525:          	movff	(c:ultoa@val),(c:ultoa@v)
6526:          	movff	(c:ultoa@val+1),(c:ultoa@v+1)
6527:          	movff	(c:ultoa@val+2),(c:ultoa@v+2)
6528:          	movff	(c:ultoa@val+3),(c:ultoa@v+3)
6529:          	line	40
6530:          	
6531:          l2014:
6532:          	movff	(c:ultoa@v),(c:___lldiv@dividend)
6533:          	movff	(c:ultoa@v+1),(c:___lldiv@dividend+1)
6534:          	movff	(c:ultoa@v+2),(c:___lldiv@dividend+2)
6535:          	movff	(c:ultoa@v+3),(c:___lldiv@dividend+3)
6536:          	movff	(c:ultoa@base),(c:___lldiv@divisor)
6537:          	movff	(c:ultoa@base+1),(c:___lldiv@divisor+1)
6538:          	movlw	0
6539:          	btfsc	((c:___lldiv@divisor+1)),c,7
6540:          	movlw	-1
6541:          	movwf	((c:___lldiv@divisor+2)),c
6542:          	movwf	((c:___lldiv@divisor+3)),c
6543:          	call	___lldiv	;wreg free
6544:          	movff	0+?___lldiv,(c:ultoa@v)
6545:          	movff	1+?___lldiv,(c:ultoa@v+1)
6546:          	movff	2+?___lldiv,(c:ultoa@v+2)
6547:          	movff	3+?___lldiv,(c:ultoa@v+3)
6548:          	
6549:          	line	41
6550:          	
6551:          l2016:
6552:          	incf	((c:ultoa@buf)),c
6553:          	line	42
6554:          	
6555:          l2018:
6556:          	movf	((c:ultoa@v)),c,w
6557:          iorwf	((c:ultoa@v+1)),c,w
6558:          iorwf	((c:ultoa@v+2)),c,w
6559:          iorwf	((c:ultoa@v+3)),c,w
6560:          	btfss	status,2
6561:          	goto	u1431
6562:          	goto	u1430
6563:          
6564:          u1431:
6565:          	goto	l2014
6566:          u1430:
6567:          	line	43
6568:          	
6569:          l2020:
6570:          	movf	((c:ultoa@buf)),c,w
6571:          	movwf	fsr2l
6572:          	clrf	fsr2h
6573:          	movlw	low(0)
6574:          	movwf	indf2
6575:          	
6576:          l2022:
6577:          	decf	((c:ultoa@buf)),c
6578:          	line	45
6579:          	
6580:          l2024:
6581:          	movff	(c:ultoa@val),(c:___llmod@dividend)
6582:          	movff	(c:ultoa@val+1),(c:___llmod@dividend+1)
6583:          	movff	(c:ultoa@val+2),(c:___llmod@dividend+2)
6584:          	movff	(c:ultoa@val+3),(c:___llmod@dividend+3)
6585:          	movff	(c:ultoa@base),(c:___llmod@divisor)
6586:          	movff	(c:ultoa@base+1),(c:___llmod@divisor+1)
6587:          	movlw	0
6588:          	btfsc	((c:___llmod@divisor+1)),c,7
6589:          	movlw	-1
6590:          	movwf	((c:___llmod@divisor+2)),c
6591:          	movwf	((c:___llmod@divisor+3)),c
6592:          	call	___llmod	;wreg free
6593:          	movf	(0+?___llmod),c,w
6594:          	movwf	((c:ultoa@c)),c
6595:          	line	46
6596:          	
6597:          l2026:
6598:          	movff	(c:ultoa@val),(c:___lldiv@dividend)
6599:          	movff	(c:ultoa@val+1),(c:___lldiv@dividend+1)
6600:          	movff	(c:ultoa@val+2),(c:___lldiv@dividend+2)
6601:          	movff	(c:ultoa@val+3),(c:___lldiv@dividend+3)
6602:          	movff	(c:ultoa@base),(c:___lldiv@divisor)
6603:          	movff	(c:ultoa@base+1),(c:___lldiv@divisor+1)
6604:          	movlw	0
6605:          	btfsc	((c:___lldiv@divisor+1)),c,7
6606:          	movlw	-1
6607:          	movwf	((c:___lldiv@divisor+2)),c
6608:          	movwf	((c:___lldiv@divisor+3)),c
6609:          	call	___lldiv	;wreg free
6610:          	movff	0+?___lldiv,(c:ultoa@val)
6611:          	movff	1+?___lldiv,(c:ultoa@val+1)
6612:          	movff	2+?___lldiv,(c:ultoa@val+2)
6613:          	movff	3+?___lldiv,(c:ultoa@val+3)
6614:          	
6615:          	line	47
6616:          	
6617:          l2028:
6618:          		movlw	0Ah-1
6619:          	cpfsgt	((c:ultoa@c)),c
6620:          	goto	u1441
6621:          	goto	u1440
6622:          
6623:          u1441:
6624:          	goto	l915
6625:          u1440:
6626:          	line	48
6627:          	
6628:          l2030:
6629:          	movlw	(07h)&0ffh
6630:          	addwf	((c:ultoa@c)),c
6631:          	
6632:          l915:
6633:          	line	49
6634:          	movlw	(030h)&0ffh
6635:          	addwf	((c:ultoa@c)),c
6636:          	line	50
6637:          	
6638:          l2032:
6639:          	movf	((c:ultoa@buf)),c,w
6640:          	movwf	fsr2l
6641:          	clrf	fsr2h
6642:          	movff	(c:ultoa@c),indf2
6643:          
6644:          	
6645:          l2034:
6646:          	decf	((c:ultoa@buf)),c
6647:          	line	51
6648:          	
6649:          l2036:
6650:          	movf	((c:ultoa@val)),c,w
6651:          iorwf	((c:ultoa@val+1)),c,w
6652:          iorwf	((c:ultoa@val+2)),c,w
6653:          iorwf	((c:ultoa@val+3)),c,w
6654:          	btfss	status,2
6655:          	goto	u1451
6656:          	goto	u1450
6657:          
6658:          u1451:
6659:          	goto	l2024
6660:          u1450:
6661:          	line	53
6662:          	
6663:          l917:
6664:          	return	;funcret
6665:          	opt stack 0
6666:          GLOBAL	__end_of_ultoa
6667:          	__end_of_ultoa:
6668:          	signat	_ultoa,12410
6669:          	global	___llmod
6670:          
6671:          ;; *************** function ___llmod *****************
6672:          ;; Defined at:
6673:          ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
6674:          ;; Parameters:    Size  Location     Type
6675:          ;;  dividend        4   25[COMRAM] unsigned long 
6676:          ;;  divisor         4   29[COMRAM] unsigned long 
6677:          ;; Auto vars:     Size  Location     Type
6678:          ;;  counter         1   33[COMRAM] unsigned char 
6679:          ;; Return value:  Size  Location     Type
6680:          ;;                  4   25[COMRAM] unsigned long 
6681:          ;; Registers used:
6682:          ;;		wreg, status,2, status,0
6683:          ;; Tracked objects:
6684:          ;;		On entry : 0/0
6685:          ;;		On exit  : 0/0
6686:          ;;		Unchanged: 0/0
6687:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
6688:          ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6689:          ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6690:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6691:          ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6692:          ;;Total ram usage:        9 bytes
6693:          ;; Hardware stack levels used:    1
6694:          ;; Hardware stack levels required when called:    5
6695:          ;; This function calls:
6696:          ;;		Nothing
6697:          ;; This function is called by:
6698:          ;;		_ultoa
6699:          ;; This function uses a non-reentrant model
6700:          ;;
6701:          psect	text8,class=CODE,space=0,reloc=2,group=2
6702:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
6703:          	line	8
6704:          global __ptext8
6705:          __ptext8:
6706:          psect	text8
6707:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
6708:          	line	8
6709:          	global	__size_of___llmod
6710:          	__size_of___llmod	equ	__end_of___llmod-___llmod
6711:          	
6712:          ___llmod:
6713:          ;incstack = 0
6714:          	opt	stack 23
6715:          	line	13
6716:          	
6717:          l1988:
6718:          	movf	((c:___llmod@divisor)),c,w
6719:          iorwf	((c:___llmod@divisor+1)),c,w
6720:          iorwf	((c:___llmod@divisor+2)),c,w
6721:          iorwf	((c:___llmod@divisor+3)),c,w
6722:          	btfsc	status,2
6723:          	goto	u1381
6724:          	goto	u1380
6725:          
6726:          u1381:
6727:          	goto	l868
6728:          u1380:
6729:          	line	14
6730:          	
6731:          l1990:
6732:          	movlw	low(01h)
6733:          	movwf	((c:___llmod@counter)),c
6734:          	line	15
6735:          	goto	l1994
6736:          	line	16
6737:          	
6738:          l1992:
6739:          	bcf	status,0
6740:          	rlcf	((c:___llmod@divisor)),c
6741:          	rlcf	((c:___llmod@divisor+1)),c
6742:          	rlcf	((c:___llmod@divisor+2)),c
6743:          	rlcf	((c:___llmod@divisor+3)),c
6744:          	line	17
6745:          	incf	((c:___llmod@counter)),c
6746:          	line	15
6747:          	
6748:          l1994:
6749:          	
6750:          	btfss	((c:___llmod@divisor+3)),c,(31)&7
6751:          	goto	u1391
6752:          	goto	u1390
6753:          u1391:
6754:          	goto	l1992
6755:          u1390:
6756:          	line	20
6757:          	
6758:          l1996:
6759:          		movf	((c:___llmod@divisor)),c,w
6760:          	subwf	((c:___llmod@dividend)),c,w
6761:          	movf	((c:___llmod@divisor+1)),c,w
6762:          	subwfb	((c:___llmod@dividend+1)),c,w
6763:          	movf	((c:___llmod@divisor+2)),c,w
6764:          	subwfb	((c:___llmod@dividend+2)),c,w
6765:          	movf	((c:___llmod@divisor+3)),c,w
6766:          	subwfb	((c:___llmod@dividend+3)),c,w
6767:          	btfss	status,0
6768:          	goto	u1401
6769:          	goto	u1400
6770:          
6771:          u1401:
6772:          	goto	l2000
6773:          u1400:
6774:          	line	21
6775:          	
6776:          l1998:
6777:          	movf	((c:___llmod@divisor)),c,w
6778:          	subwf	((c:___llmod@dividend)),c
6779:          	movf	((c:___llmod@divisor+1)),c,w
6780:          	subwfb	((c:___llmod@dividend+1)),c
6781:          	movf	((c:___llmod@divisor+2)),c,w
6782:          	subwfb	((c:___llmod@dividend+2)),c
6783:          	movf	((c:___llmod@divisor+3)),c,w
6784:          	subwfb	((c:___llmod@dividend+3)),c
6785:          	line	22
6786:          	
6787:          l2000:
6788:          	bcf	status,0
6789:          	rrcf	((c:___llmod@divisor+3)),c
6790:          	rrcf	((c:___llmod@divisor+2)),c
6791:          	rrcf	((c:___llmod@divisor+1)),c
6792:          	rrcf	((c:___llmod@divisor)),c
6793:          	line	23
6794:          	
6795:          l2002:
6796:          	decfsz	((c:___llmod@counter)),c
6797:          	
6798:          	goto	l1996
6799:          	line	24
6800:          	
6801:          l868:
6802:          	line	25
6803:          	movff	(c:___llmod@dividend),(c:?___llmod)
6804:          	movff	(c:___llmod@dividend+1),(c:?___llmod+1)
6805:          	movff	(c:___llmod@dividend+2),(c:?___llmod+2)
6806:          	movff	(c:___llmod@dividend+3),(c:?___llmod+3)
6807:          	line	26
6808:          	
6809:          l875:
6810:          	return	;funcret
6811:          	opt stack 0
6812:          GLOBAL	__end_of___llmod
6813:          	__end_of___llmod:
6814:          	signat	___llmod,8316
6815:          	global	___lldiv
6816:          
6817:          ;; *************** function ___lldiv *****************
6818:          ;; Defined at:
6819:          ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
6820:          ;; Parameters:    Size  Location     Type
6821:          ;;  dividend        4   25[COMRAM] unsigned long 
6822:          ;;  divisor         4   29[COMRAM] unsigned long 
6823:          ;; Auto vars:     Size  Location     Type
6824:          ;;  quotient        4   33[COMRAM] unsigned long 
6825:          ;;  counter         1   37[COMRAM] unsigned char 
6826:          ;; Return value:  Size  Location     Type
6827:          ;;                  4   25[COMRAM] unsigned long 
6828:          ;; Registers used:
6829:          ;;		wreg, status,2, status,0
6830:          ;; Tracked objects:
6831:          ;;		On entry : 0/0
6832:          ;;		On exit  : 0/0
6833:          ;;		Unchanged: 0/0
6834:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
6835:          ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6836:          ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6837:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6838:          ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
6839:          ;;Total ram usage:       13 bytes
6840:          ;; Hardware stack levels used:    1
6841:          ;; Hardware stack levels required when called:    5
6842:          ;; This function calls:
6843:          ;;		Nothing
6844:          ;; This function is called by:
6845:          ;;		_ultoa
6846:          ;; This function uses a non-reentrant model
6847:          ;;
6848:          psect	text9,class=CODE,space=0,reloc=2,group=2
6849:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
6850:          	line	8
6851:          global __ptext9
6852:          __ptext9:
6853:          psect	text9
6854:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
6855:          	line	8
6856:          	global	__size_of___lldiv
6857:          	__size_of___lldiv	equ	__end_of___lldiv-___lldiv
6858:          	
6859:          ___lldiv:
6860:          ;incstack = 0
6861:          	opt	stack 23
6862:          	line	14
6863:          	
6864:          l1966:
6865:          	clrf	((c:___lldiv@quotient)),c
6866:          	clrf	((c:___lldiv@quotient+1)),c
6867:          	clrf	((c:___lldiv@quotient+2)),c
6868:          	clrf	((c:___lldiv@quotient+3)),c
6869:          
6870:          	line	15
6871:          	
6872:          l1968:
6873:          	movf	((c:___lldiv@divisor)),c,w
6874:          iorwf	((c:___lldiv@divisor+1)),c,w
6875:          iorwf	((c:___lldiv@divisor+2)),c,w
6876:          iorwf	((c:___lldiv@divisor+3)),c,w
6877:          	btfsc	status,2
6878:          	goto	u1351
6879:          	goto	u1350
6880:          
6881:          u1351:
6882:          	goto	l858
6883:          u1350:
6884:          	line	16
6885:          	
6886:          l1970:
6887:          	movlw	low(01h)
6888:          	movwf	((c:___lldiv@counter)),c
6889:          	line	17
6890:          	goto	l1974
6891:          	line	18
6892:          	
6893:          l1972:
6894:          	bcf	status,0
6895:          	rlcf	((c:___lldiv@divisor)),c
6896:          	rlcf	((c:___lldiv@divisor+1)),c
6897:          	rlcf	((c:___lldiv@divisor+2)),c
6898:          	rlcf	((c:___lldiv@divisor+3)),c
6899:          	line	19
6900:          	incf	((c:___lldiv@counter)),c
6901:          	line	17
6902:          	
6903:          l1974:
6904:          	
6905:          	btfss	((c:___lldiv@divisor+3)),c,(31)&7
6906:          	goto	u1361
6907:          	goto	u1360
6908:          u1361:
6909:          	goto	l1972
6910:          u1360:
6911:          	line	22
6912:          	
6913:          l1976:
6914:          	bcf	status,0
6915:          	rlcf	((c:___lldiv@quotient)),c
6916:          	rlcf	((c:___lldiv@quotient+1)),c
6917:          	rlcf	((c:___lldiv@quotient+2)),c
6918:          	rlcf	((c:___lldiv@quotient+3)),c
6919:          	line	23
6920:          	
6921:          l1978:
6922:          		movf	((c:___lldiv@divisor)),c,w
6923:          	subwf	((c:___lldiv@dividend)),c,w
6924:          	movf	((c:___lldiv@divisor+1)),c,w
6925:          	subwfb	((c:___lldiv@dividend+1)),c,w
6926:          	movf	((c:___lldiv@divisor+2)),c,w
6927:          	subwfb	((c:___lldiv@dividend+2)),c,w
6928:          	movf	((c:___lldiv@divisor+3)),c,w
6929:          	subwfb	((c:___lldiv@dividend+3)),c,w
6930:          	btfss	status,0
6931:          	goto	u1371
6932:          	goto	u1370
6933:          
6934:          u1371:
6935:          	goto	l1984
6936:          u1370:
6937:          	line	24
6938:          	
6939:          l1980:
6940:          	movf	((c:___lldiv@divisor)),c,w
6941:          	subwf	((c:___lldiv@dividend)),c
6942:          	movf	((c:___lldiv@divisor+1)),c,w
6943:          	subwfb	((c:___lldiv@dividend+1)),c
6944:          	movf	((c:___lldiv@divisor+2)),c,w
6945:          	subwfb	((c:___lldiv@dividend+2)),c
6946:          	movf	((c:___lldiv@divisor+3)),c,w
6947:          	subwfb	((c:___lldiv@dividend+3)),c
6948:          	line	25
6949:          	
6950:          l1982:
6951:          	bsf	(0+(0/8)+(c:___lldiv@quotient)),c,(0)&7
6952:          	line	27
6953:          	
6954:          l1984:
6955:          	bcf	status,0
6956:          	rrcf	((c:___lldiv@divisor+3)),c
6957:          	rrcf	((c:___lldiv@divisor+2)),c
6958:          	rrcf	((c:___lldiv@divisor+1)),c
6959:          	rrcf	((c:___lldiv@divisor)),c
6960:          	line	28
6961:          	
6962:          l1986:
6963:          	decfsz	((c:___lldiv@counter)),c
6964:          	
6965:          	goto	l1976
6966:          	line	29
6967:          	
6968:          l858:
6969:          	line	30
6970:          	movff	(c:___lldiv@quotient),(c:?___lldiv)
6971:          	movff	(c:___lldiv@quotient+1),(c:?___lldiv+1)
6972:          	movff	(c:___lldiv@quotient+2),(c:?___lldiv+2)
6973:          	movff	(c:___lldiv@quotient+3),(c:?___lldiv+3)
6974:          	line	31
6975:          	
6976:          l865:
6977:          	return	;funcret
6978:          	opt stack 0
6979:          GLOBAL	__end_of___lldiv
6980:          	__end_of___lldiv:
6981:          	signat	___lldiv,8316
6982:          	global	_getch2
6983:          
6984:          ;; *************** function _getch2 *****************
6985:          ;; Defined at:
6986:          ;;		line 75 in file "serial_comm.c"
6987:          ;; Parameters:    Size  Location     Type
6988:          ;;		None
6989:          ;; Auto vars:     Size  Location     Type
6990:          ;;		None
6991:          ;; Return value:  Size  Location     Type
6992:          ;;                  1    wreg      unsigned char 
6993:          ;; Registers used:
6994:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
6995:          ;; Tracked objects:
6996:          ;;		On entry : 3F/0
6997:          ;;		On exit  : 0/0
6998:          ;;		Unchanged: 0/0
6999:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7000:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7001:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7002:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7003:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7004:          ;;Total ram usage:        0 bytes
7005:          ;; Hardware stack levels used:    1
7006:          ;; Hardware stack levels required when called:    7
7007:          ;; This function calls:
7008:          ;;		_RingBufferDequeue
7009:          ;; This function is called by:
7010:          ;;		_main
7011:          ;; This function uses a non-reentrant model
7012:          ;;
7013:          psect	text10,class=CODE,space=0,reloc=2,group=0
7014:          	file	"serial_comm.c"
7015:          	line	75
7016:          global __ptext10
7017:          __ptext10:
7018:          psect	text10
7019:          	file	"serial_comm.c"
7020:          	line	75
7021:          	global	__size_of_getch2
7022:          	__size_of_getch2	equ	__end_of_getch2-_getch2
7023:          	
7024:          _getch2:
7025:          ;incstack = 0
7026:          	opt	stack 23
7027:          	line	77
7028:          	
7029:          l2324:; BSR set to: 0
7030:          
7031:          ;serial_comm.c: 77: return RingBufferDequeue(&_rxBuffer2);
7032:          		movlw	low(__rxBuffer2)
7033:          	movwf	((c:RingBufferDequeue@buffer)),c
7034:          
7035:          	call	_RingBufferDequeue	;wreg free
7036:          	line	78
7037:          	
7038:          l439:
7039:          	return	;funcret
7040:          	opt stack 0
7041:          GLOBAL	__end_of_getch2
7042:          	__end_of_getch2:
7043:          	signat	_getch2,89
7044:          	global	_getch1
7045:          
7046:          ;; *************** function _getch1 *****************
7047:          ;; Defined at:
7048:          ;;		line 70 in file "serial_comm.c"
7049:          ;; Parameters:    Size  Location     Type
7050:          ;;		None
7051:          ;; Auto vars:     Size  Location     Type
7052:          ;;		None
7053:          ;; Return value:  Size  Location     Type
7054:          ;;                  1    wreg      unsigned char 
7055:          ;; Registers used:
7056:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
7057:          ;; Tracked objects:
7058:          ;;		On entry : 3F/0
7059:          ;;		On exit  : 0/0
7060:          ;;		Unchanged: 0/0
7061:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7062:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7063:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7064:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7065:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7066:          ;;Total ram usage:        0 bytes
7067:          ;; Hardware stack levels used:    1
7068:          ;; Hardware stack levels required when called:    7
7069:          ;; This function calls:
7070:          ;;		_RingBufferDequeue
7071:          ;; This function is called by:
7072:          ;;		_main
7073:          ;; This function uses a non-reentrant model
7074:          ;;
7075:          psect	text11,class=CODE,space=0,reloc=2,group=0
7076:          	line	70
7077:          global __ptext11
7078:          __ptext11:
7079:          psect	text11
7080:          	file	"serial_comm.c"
7081:          	line	70
7082:          	global	__size_of_getch1
7083:          	__size_of_getch1	equ	__end_of_getch1-_getch1
7084:          	
7085:          _getch1:
7086:          ;incstack = 0
7087:          	opt	stack 23
7088:          	line	72
7089:          	
7090:          l2298:; BSR set to: 0
7091:          
7092:          ;serial_comm.c: 72: return RingBufferDequeue(&_rxBuffer1);
7093:          		movlw	low(__rxBuffer1)
7094:          	movwf	((c:RingBufferDequeue@buffer)),c
7095:          
7096:          	call	_RingBufferDequeue	;wreg free
7097:          	line	73
7098:          	
7099:          l436:
7100:          	return	;funcret
7101:          	opt stack 0
7102:          GLOBAL	__end_of_getch1
7103:          	__end_of_getch1:
7104:          	signat	_getch1,89
7105:          	global	_RingBufferDequeue
7106:          
7107:          ;; *************** function _RingBufferDequeue *****************
7108:          ;; Defined at:
7109:          ;;		line 40 in file "serial_comm.c"
7110:          ;; Parameters:    Size  Location     Type
7111:          ;;  buffer          1   31[COMRAM] PTR volatile struct _Rin
7112:          ;;		 -> _rxBuffer2(6), _rxBuffer1(6), _txBuffer2(6), _txBuffer1(6), 
7113:          ;; Auto vars:     Size  Location     Type
7114:          ;;  data            1   35[COMRAM] unsigned char 
7115:          ;; Return value:  Size  Location     Type
7116:          ;;                  1    wreg      unsigned char 
7117:          ;; Registers used:
7118:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
7119:          ;; Tracked objects:
7120:          ;;		On entry : 0/0
7121:          ;;		On exit  : 0/0
7122:          ;;		Unchanged: 0/0
7123:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7124:          ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7125:          ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7126:          ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7127:          ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7128:          ;;Total ram usage:        5 bytes
7129:          ;; Hardware stack levels used:    1
7130:          ;; Hardware stack levels required when called:    6
7131:          ;; This function calls:
7132:          ;;		___awmod
7133:          ;; This function is called by:
7134:          ;;		_getch1
7135:          ;;		_getch2
7136:          ;;		_putch1
7137:          ;;		_putch2
7138:          ;; This function uses a non-reentrant model
7139:          ;;
7140:          psect	text12,class=CODE,space=0,reloc=2,group=0
7141:          	line	40
7142:          global __ptext12
7143:          __ptext12:
7144:          psect	text12
7145:          	file	"serial_comm.c"
7146:          	line	40
7147:          	global	__size_of_RingBufferDequeue
7148:          	__size_of_RingBufferDequeue	equ	__end_of_RingBufferDequeue-_RingBufferDequeue
7149:          	
7150:          _RingBufferDequeue:
7151:          ;incstack = 0
7152:          	opt	stack 23
7153:          	line	42
7154:          	
7155:          l1926:
7156:          ;serial_comm.c: 42: if(buffer->length == 0)
7157:          	movf	((c:RingBufferDequeue@buffer)),c,w
7158:          	movwf	fsr2l
7159:          	clrf	fsr2h
7160:          	movlw	low(01h)
7161:          	addwf	fsr2l
7162:          
7163:          	movf	indf2,w
7164:          	btfss	status,2
7165:          	goto	u1281
7166:          	goto	u1280
7167:          u1281:
7168:          	goto	l1932
7169:          u1280:
7170:          	line	43
7171:          	
7172:          l1928:
7173:          ;serial_comm.c: 43: return -1;
7174:          	movlw	(0FFh)&0ffh
7175:          	goto	l423
7176:          	line	45
7177:          	
7178:          l1932:
7179:          ;serial_comm.c: 45: char data = buffer->data[buffer->tail];
7180:          	movf	((c:RingBufferDequeue@buffer)),c,w
7181:          	movwf	fsr2l
7182:          	clrf	fsr2h
7183:          	movlw	low(03h)
7184:          	addwf	fsr2l
7185:          
7186:          	movf	indf2,w
7187:          	movwf	(??_RingBufferDequeue+0+0)&0ffh,c
7188:          	movf	((c:RingBufferDequeue@buffer)),c,w
7189:          	movwf	fsr2l
7190:          	clrf	fsr2h
7191:          	movlw	low(04h)
7192:          	addwf	fsr2l
7193:          
7194:          	movff	postinc2,??_RingBufferDequeue+1+0
7195:          	movff	postdec2,??_RingBufferDequeue+1+0+1
7196:          	movf	((??_RingBufferDequeue+0+0)),c,w
7197:          	addwf	(??_RingBufferDequeue+1+0),c,w
7198:          	movwf	c:fsr2l
7199:          	movlw	0
7200:          	addwfc	(??_RingBufferDequeue+1+1),c,w
7201:          	movwf	1+c:fsr2l
7202:          	movf	indf2,w
7203:          	movwf	((c:RingBufferDequeue@data)),c
7204:          	line	46
7205:          	
7206:          l1934:
7207:          ;serial_comm.c: 46: buffer->tail = (buffer->tail + 1) % buffer->bufferSize;
7208:          	movf	((c:RingBufferDequeue@buffer)),c,w
7209:          	movwf	fsr2l
7210:          	clrf	fsr2h
7211:          	movlw	low(03h)
7212:          	addwf	fsr2l
7213:          
7214:          	movf	((c:RingBufferDequeue@buffer)),c,w
7215:          	movwf	fsr1l
7216:          	clrf	fsr1h
7217:          	movlw	low(03h)
7218:          	addwf	fsr1l
7219:          
7220:          	movf	indf1,w
7221:          	movwf	(??_RingBufferDequeue+0+0)&0ffh,c
7222:          	movlw	low(01h)
7223:          	addwf	((??_RingBufferDequeue+0+0)),c,w
7224:          	movwf	((c:___awmod@dividend)),c
7225:          	clrf	1+((c:___awmod@dividend)),c
7226:          	movlw	high(01h)
7227:          	addwfc	1+((c:___awmod@dividend)),c
7228:          	movf	((c:RingBufferDequeue@buffer)),c,w
7229:          	movwf	fsr1l
7230:          	clrf	fsr1h
7231:          	movf	indf1,w
7232:          	movwf	((c:___awmod@divisor)),c
7233:          	clrf	((c:___awmod@divisor+1)),c
7234:          	call	___awmod	;wreg free
7235:          	movf	(0+?___awmod),c,w
7236:          	movwf	indf2,c
7237:          
7238:          	line	47
7239:          	
7240:          l1936:
7241:          ;serial_comm.c: 47: buffer->length--;
7242:          	movf	((c:RingBufferDequeue@buffer)),c,w
7243:          	movwf	fsr2l
7244:          	clrf	fsr2h
7245:          	movlw	low(01h)
7246:          	addwf	fsr2l
7247:          
7248:          	decf	indf2
7249:          
7250:          	line	48
7251:          	
7252:          l1938:
7253:          ;serial_comm.c: 48: return data;
7254:          	movf	((c:RingBufferDequeue@data)),c,w
7255:          	line	49
7256:          	
7257:          l423:
7258:          	return	;funcret
7259:          	opt stack 0
7260:          GLOBAL	__end_of_RingBufferDequeue
7261:          	__end_of_RingBufferDequeue:
7262:          	signat	_RingBufferDequeue,4217
7263:          	global	___awmod
7264:          
7265:          ;; *************** function ___awmod *****************
7266:          ;; Defined at:
7267:          ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
7268:          ;; Parameters:    Size  Location     Type
7269:          ;;  dividend        2   25[COMRAM] int 
7270:          ;;  divisor         2   27[COMRAM] int 
7271:          ;; Auto vars:     Size  Location     Type
7272:          ;;  sign            1   30[COMRAM] unsigned char 
7273:          ;;  counter         1   29[COMRAM] unsigned char 
7274:          ;; Return value:  Size  Location     Type
7275:          ;;                  2   25[COMRAM] int 
7276:          ;; Registers used:
7277:          ;;		wreg, status,2, status,0
7278:          ;; Tracked objects:
7279:          ;;		On entry : 0/0
7280:          ;;		On exit  : 0/0
7281:          ;;		Unchanged: 0/0
7282:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7283:          ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7284:          ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7285:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7286:          ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7287:          ;;Total ram usage:        6 bytes
7288:          ;; Hardware stack levels used:    1
7289:          ;; Hardware stack levels required when called:    5
7290:          ;; This function calls:
7291:          ;;		Nothing
7292:          ;; This function is called by:
7293:          ;;		_RingBufferEnqueue
7294:          ;;		_RingBufferDequeue
7295:          ;;		i1_RingBufferEnqueue
7296:          ;;		i1_RingBufferDequeue
7297:          ;; This function uses a non-reentrant model
7298:          ;;
7299:          psect	text13,class=CODE,space=0,reloc=2,group=2
7300:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
7301:          	line	8
7302:          global __ptext13
7303:          __ptext13:
7304:          psect	text13
7305:          	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
7306:          	line	8
7307:          	global	__size_of___awmod
7308:          	__size_of___awmod	equ	__end_of___awmod-___awmod
7309:          	
7310:          ___awmod:
7311:          ;incstack = 0
7312:          	opt	stack 23
7313:          	line	13
7314:          	
7315:          l1880:
7316:          	clrf	((c:___awmod@sign)),c
7317:          	line	14
7318:          	
7319:          l1882:
7320:          	btfsc	((c:___awmod@dividend+1)),c,7
7321:          	goto	u1210
7322:          	goto	u1211
7323:          
7324:          u1211:
7325:          	goto	l1888
7326:          u1210:
7327:          	line	15
7328:          	
7329:          l1884:
7330:          	negf	((c:___awmod@dividend)),c
7331:          	comf	((c:___awmod@dividend+1)),c
7332:          	btfsc	status,0
7333:          	incf	((c:___awmod@dividend+1)),c
7334:          	line	16
7335:          	
7336:          l1886:
7337:          	movlw	low(01h)
7338:          	movwf	((c:___awmod@sign)),c
7339:          	line	18
7340:          	
7341:          l1888:
7342:          	btfsc	((c:___awmod@divisor+1)),c,7
7343:          	goto	u1220
7344:          	goto	u1221
7345:          
7346:          u1221:
7347:          	goto	l1892
7348:          u1220:
7349:          	line	19
7350:          	
7351:          l1890:
7352:          	negf	((c:___awmod@divisor)),c
7353:          	comf	((c:___awmod@divisor+1)),c
7354:          	btfsc	status,0
7355:          	incf	((c:___awmod@divisor+1)),c
7356:          	line	20
7357:          	
7358:          l1892:
7359:          	movf	((c:___awmod@divisor)),c,w
7360:          iorwf	((c:___awmod@divisor+1)),c,w
7361:          	btfsc	status,2
7362:          	goto	u1231
7363:          	goto	u1230
7364:          
7365:          u1231:
7366:          	goto	l1908
7367:          u1230:
7368:          	line	21
7369:          	
7370:          l1894:
7371:          	movlw	low(01h)
7372:          	movwf	((c:___awmod@counter)),c
7373:          	line	22
7374:          	goto	l1898
7375:          	line	23
7376:          	
7377:          l1896:
7378:          	bcf	status,0
7379:          	rlcf	((c:___awmod@divisor)),c
7380:          	rlcf	((c:___awmod@divisor+1)),c
7381:          	line	24
7382:          	incf	((c:___awmod@counter)),c
7383:          	line	22
7384:          	
7385:          l1898:
7386:          	
7387:          	btfss	((c:___awmod@divisor+1)),c,(15)&7
7388:          	goto	u1241
7389:          	goto	u1240
7390:          u1241:
7391:          	goto	l1896
7392:          u1240:
7393:          	line	27
7394:          	
7395:          l1900:
7396:          		movf	((c:___awmod@divisor)),c,w
7397:          	subwf	((c:___awmod@dividend)),c,w
7398:          	movf	((c:___awmod@divisor+1)),c,w
7399:          	subwfb	((c:___awmod@dividend+1)),c,w
7400:          	btfss	status,0
7401:          	goto	u1251
7402:          	goto	u1250
7403:          
7404:          u1251:
7405:          	goto	l1904
7406:          u1250:
7407:          	line	28
7408:          	
7409:          l1902:
7410:          	movf	((c:___awmod@divisor)),c,w
7411:          	subwf	((c:___awmod@dividend)),c
7412:          	movf	((c:___awmod@divisor+1)),c,w
7413:          	subwfb	((c:___awmod@dividend+1)),c
7414:          
7415:          	line	29
7416:          	
7417:          l1904:
7418:          	bcf	status,0
7419:          	rrcf	((c:___awmod@divisor+1)),c
7420:          	rrcf	((c:___awmod@divisor)),c
7421:          	line	30
7422:          	
7423:          l1906:
7424:          	decfsz	((c:___awmod@counter)),c
7425:          	
7426:          	goto	l1900
7427:          	line	32
7428:          	
7429:          l1908:
7430:          	movf	((c:___awmod@sign)),c,w
7431:          	btfsc	status,2
7432:          	goto	u1261
7433:          	goto	u1260
7434:          u1261:
7435:          	goto	l1912
7436:          u1260:
7437:          	line	33
7438:          	
7439:          l1910:
7440:          	negf	((c:___awmod@dividend)),c
7441:          	comf	((c:___awmod@dividend+1)),c
7442:          	btfsc	status,0
7443:          	incf	((c:___awmod@dividend+1)),c
7444:          	line	34
7445:          	
7446:          l1912:
7447:          	movff	(c:___awmod@dividend),(c:?___awmod)
7448:          	movff	(c:___awmod@dividend+1),(c:?___awmod+1)
7449:          	line	35
7450:          	
7451:          l699:
7452:          	return	;funcret
7453:          	opt stack 0
7454:          GLOBAL	__end_of___awmod
7455:          	__end_of___awmod:
7456:          	signat	___awmod,8314
7457:          	global	_SramSetMode
7458:          
7459:          ;; *************** function _SramSetMode *****************
7460:          ;; Defined at:
7461:          ;;		line 20 in file "sram.c"
7462:          ;; Parameters:    Size  Location     Type
7463:          ;;  mode            1    wreg     struct _SramMode
7464:          ;; Auto vars:     Size  Location     Type
7465:          ;;  mode            1   25[COMRAM] struct _SramMode
7466:          ;; Return value:  Size  Location     Type
7467:          ;;                  1    wreg      void 
7468:          ;; Registers used:
7469:          ;;		wreg, fsr2l, fsr2h, status,2
7470:          ;; Tracked objects:
7471:          ;;		On entry : 3F/0
7472:          ;;		On exit  : 3F/0
7473:          ;;		Unchanged: 0/0
7474:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7475:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7476:          ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7477:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7478:          ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7479:          ;;Total ram usage:        1 bytes
7480:          ;; Hardware stack levels used:    1
7481:          ;; Hardware stack levels required when called:    5
7482:          ;; This function calls:
7483:          ;;		Nothing
7484:          ;; This function is called by:
7485:          ;;		_main
7486:          ;; This function uses a non-reentrant model
7487:          ;;
7488:          psect	text14,class=CODE,space=0,reloc=2,group=0
7489:          	file	"sram.c"
7490:          	line	20
7491:          global __ptext14
7492:          __ptext14:
7493:          psect	text14
7494:          	file	"sram.c"
7495:          	line	20
7496:          	global	__size_of_SramSetMode
7497:          	__size_of_SramSetMode	equ	__end_of_SramSetMode-_SramSetMode
7498:          	
7499:          _SramSetMode:
7500:          ;incstack = 0
7501:          	opt	stack 25
7502:          ;SramSetMode@mode stored from wreg
7503:          	movwf	((c:SramSetMode@mode)),c
7504:          	line	22
7505:          	
7506:          l2192:
7507:          ;sram.c: 22: _sramStatus.statusBits.isBusyWrite = 1;
7508:          	movlb	0	; () banked
7509:          	bsf	((__sramStatus))&0ffh,1	;volatile
7510:          	line	23
7511:          ;sram.c: 23: _sramBuffer.transmit.initialization.command = 0x01;
7512:          	movlw	low(01h)
7513:          	movff	wreg,__sramBuffer
7514:          
7515:          	line	24
7516:          	
7517:          l2194:; BSR set to: 0
7518:          
7519:          ;sram.c: 24: _sramBuffer.transmit.initialization.mode = mode;
7520:          	lfsr	2,__sramBuffer+01h
7521:          	movff	(c:SramSetMode@mode),indf2
7522:          
7523:          	line	25
7524:          	
7525:          l2196:; BSR set to: 0
7526:          
7527:          ;sram.c: 25: TXADDRH = (uint8_t)(((unsigned int) &_sramBuffer.transmit>>(8*1))&0xFF);
7528:          	movlw	high(__sramBuffer)
7529:          	movwf	((c:3946)),c	;volatile
7530:          	line	26
7531:          	
7532:          l2198:; BSR set to: 0
7533:          
7534:          ;sram.c: 26: TXADDRL = (uint8_t)(((unsigned int) &_sramBuffer.transmit>>(8*0))&0xFF);
7535:          	movlw	low(__sramBuffer)
7536:          	movwf	((c:3947)),c	;volatile
7537:          	line	27
7538:          	
7539:          l2200:; BSR set to: 0
7540:          
7541:          ;sram.c: 27: RXADDRH = (uint8_t)(((unsigned int) &_sramBuffer.receive>>(8*1))&0xFF);
7542:          	movlw	high(__sramBuffer+084h)
7543:          	movwf	((c:3944)),c	;volatile
7544:          	line	28
7545:          	
7546:          l2202:; BSR set to: 0
7547:          
7548:          ;sram.c: 28: RXADDRL = (uint8_t)(((unsigned int) &_sramBuffer.receive>>(8*0))&0xFF);
7549:          	movlw	low(__sramBuffer+084h)
7550:          	movwf	((c:3945)),c	;volatile
7551:          	line	29
7552:          	
7553:          l2204:; BSR set to: 0
7554:          
7555:          ;sram.c: 29: DMABCH = 0x00;
7556:          	clrf	((c:3942)),c	;volatile
7557:          	line	30
7558:          	
7559:          l2206:; BSR set to: 0
7560:          
7561:          ;sram.c: 30: DMABCL = 0x01;
7562:          	movlw	low(01h)
7563:          	movwf	((c:3943)),c	;volatile
7564:          	line	31
7565:          	
7566:          l2208:; BSR set to: 0
7567:          
7568:          ;sram.c: 31: LATBbits.LATB3 = 0;
7569:          	bcf	((c:3978)),c,3	;volatile
7570:          	line	32
7571:          	
7572:          l2210:; BSR set to: 0
7573:          
7574:          ;sram.c: 32: DMACON1bits.DMAEN = 1;
7575:          	bsf	((c:3976)),c,0	;volatile
7576:          	line	33
7577:          	
7578:          l351:; BSR set to: 0
7579:          
7580:          	return	;funcret
7581:          	opt stack 0
7582:          GLOBAL	__end_of_SramSetMode
7583:          	__end_of_SramSetMode:
7584:          	signat	_SramSetMode,4217
7585:          	global	_SramFillNext
7586:          
7587:          ;; *************** function _SramFillNext *****************
7588:          ;; Defined at:
7589:          ;;		line 110 in file "sram.c"
7590:          ;; Parameters:    Size  Location     Type
7591:          ;;		None
7592:          ;; Auto vars:     Size  Location     Type
7593:          ;;		None
7594:          ;; Return value:  Size  Location     Type
7595:          ;;                  1    wreg      void 
7596:          ;; Registers used:
7597:          ;;		wreg, status,2, status,0
7598:          ;; Tracked objects:
7599:          ;;		On entry : 3F/0
7600:          ;;		On exit  : 3F/0
7601:          ;;		Unchanged: 0/0
7602:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7603:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7604:          ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7605:          ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7606:          ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7607:          ;;Total ram usage:        6 bytes
7608:          ;; Hardware stack levels used:    1
7609:          ;; Hardware stack levels required when called:    5
7610:          ;; This function calls:
7611:          ;;		Nothing
7612:          ;; This function is called by:
7613:          ;;		_main
7614:          ;; This function uses a non-reentrant model
7615:          ;;
7616:          psect	text15,class=CODE,space=0,reloc=2,group=0
7617:          	line	110
7618:          global __ptext15
7619:          __ptext15:
7620:          psect	text15
7621:          	file	"sram.c"
7622:          	line	110
7623:          	global	__size_of_SramFillNext
7624:          	__size_of_SramFillNext	equ	__end_of_SramFillNext-_SramFillNext
7625:          	
7626:          _SramFillNext:; BSR set to: 0
7627:          
7628:          ;incstack = 0
7629:          	opt	stack 25
7630:          	line	112
7631:          	
7632:          l2328:; BSR set to: 0
7633:          
7634:          ;sram.c: 112: _sramStatus.statusBits.isBusyFill = 1;
7635:          	bsf	((__sramStatus))&0ffh,2	;volatile
7636:          	line	113
7637:          	
7638:          l2330:; BSR set to: 0
7639:          
7640:          ;sram.c: 113: TXADDRH = (uint8_t)(((unsigned int) _sramBuffer.transmit.txData>>(8*1))&0xFF);
7641:          	movlw	high(__sramBuffer+04h)
7642:          	movwf	((c:3946)),c	;volatile
7643:          	line	114
7644:          ;sram.c: 114: TXADDRL = (uint8_t)(((unsigned int) _sramBuffer.transmit.txData>>(8*0))&0xFF);
7645:          	movlw	low(__sramBuffer+04h)
7646:          	movwf	((c:3947)),c	;volatile
7647:          	line	115
7648:          	
7649:          l2332:; BSR set to: 0
7650:          
7651:          ;sram.c: 115: DMACON1bits.DUPLEX1 = 0;
7652:          	bcf	((c:3976)),c,3	;volatile
7653:          	line	116
7654:          	
7655:          l2334:; BSR set to: 0
7656:          
7657:          ;sram.c: 116: DMACON1bits.DUPLEX0 = 1;
7658:          	bsf	((c:3976)),c,2	;volatile
7659:          	line	117
7660:          	
7661:          l2336:; BSR set to: 0
7662:          
7663:          ;sram.c: 117: DMACON1bits.TXINC = 0;
7664:          	bcf	((c:3976)),c,5	;volatile
7665:          	line	118
7666:          	
7667:          l2338:; BSR set to: 0
7668:          
7669:          ;sram.c: 118: _sramStatus.dataLength -= _sramStatus.dataLength >= 0x400 ? 0x400 : _sramStatus.dataLength;
7670:          		movf	(2+(__sramStatus+01h))&0ffh,w	;volatile
7671:          	bnz	u1821
7672:          	movlw	4
7673:          	subwf	 (1+(__sramStatus+01h))&0ffh,w	;volatile
7674:          	btfsc	status,0
7675:          	goto	u1821
7676:          	goto	u1820
7677:          
7678:          u1821:
7679:          	goto	l2342
7680:          u1820:
7681:          	
7682:          l2340:; BSR set to: 0
7683:          
7684:          	movff	0+(__sramStatus+01h),(c:_SramFillNext$2409)	;volatile
7685:          	movff	1+(__sramStatus+01h),(c:_SramFillNext$2409+1)	;volatile
7686:          	movff	2+(__sramStatus+01h),(c:_SramFillNext$2409+2)	;volatile
7687:          	goto	l2344
7688:          	
7689:          l2342:; BSR set to: 0
7690:          
7691:          	movlw	low(0400h)
7692:          	movwf	((c:_SramFillNext$2409)),c
7693:          	movlw	high(0400h)
7694:          	movwf	((c:_SramFillNext$2409+1)),c
7695:          	movlw	low highword(0400h)
7696:          	movwf	((c:_SramFillNext$2409+2)),c
7697:          
7698:          	
7699:          l2344:; BSR set to: 0
7700:          
7701:          	movf	((c:_SramFillNext$2409)),c,w
7702:          	subwf	(0+(__sramStatus+01h))&0ffh	;volatile
7703:          	movf	((c:_SramFillNext$2409+1)),c,w
7704:          	subwfb	(1+(__sramStatus+01h))&0ffh	;volatile
7705:          	movf	((c:_SramFillNext$2409+2)),c,w
7706:          	subwfb	(2+(__sramStatus+01h))&0ffh	;volatile
7707:          
7708:          	line	119
7709:          	
7710:          l2346:; BSR set to: 0
7711:          
7712:          ;sram.c: 119: DMABCH = (uint8_t)((_sramStatus.dataLength - 1>>(8*1))&0xFF);
7713:          	movlw	low(0FFFFFFh)
7714:          	addwf	(0+(__sramStatus+01h))&0ffh,w	;volatile
7715:          	movwf	(??_SramFillNext+0+0)&0ffh,c
7716:          	movlw	0FFh
7717:          	addwfc	(1+(__sramStatus+01h))&0ffh,w	;volatile
7718:          	movwf	1+(??_SramFillNext+0+0)&0ffh,c
7719:          	
7720:          	movlw	0FFh
7721:          	addwfc	(2+(__sramStatus+01h))&0ffh,w	;volatile
7722:          	movwf	2+(??_SramFillNext+0+0)&0ffh,c
7723:          
7724:          	movff	??_SramFillNext+0+1,??_SramFillNext+0+0
7725:          	movff	??_SramFillNext+0+2,??_SramFillNext+0+1
7726:          	clrf	(??_SramFillNext+0+2),c
7727:          	movf	(??_SramFillNext+0+0),c,w
7728:          	movwf	((c:3942)),c	;volatile
7729:          	line	120
7730:          	
7731:          l2348:; BSR set to: 0
7732:          
7733:          ;sram.c: 120: DMABCL = (uint8_t)((_sramStatus.dataLength - 1>>(8*0))&0xFF);
7734:          	decf	(0+(__sramStatus+01h))&0ffh,w	;volatile
7735:          	movwf	((c:3943)),c	;volatile
7736:          	line	121
7737:          	
7738:          l2350:; BSR set to: 0
7739:          
7740:          ;sram.c: 121: DMACON1bits.DMAEN = 1;
7741:          	bsf	((c:3976)),c,0	;volatile
7742:          	line	122
7743:          	
7744:          l379:; BSR set to: 0
7745:          
7746:          	return	;funcret
7747:          	opt stack 0
7748:          GLOBAL	__end_of_SramFillNext
7749:          	__end_of_SramFillNext:
7750:          	signat	_SramFillNext,89
7751:          	global	_SramFill
7752:          
7753:          ;; *************** function _SramFill *****************
7754:          ;; Defined at:
7755:          ;;		line 88 in file "sram.c"
7756:          ;; Parameters:    Size  Location     Type
7757:          ;;  address         3   25[COMRAM] unsigned um
7758:          ;;  length          3   28[COMRAM] unsigned um
7759:          ;;  value           1   31[COMRAM] unsigned char 
7760:          ;; Auto vars:     Size  Location     Type
7761:          ;;		None
7762:          ;; Return value:  Size  Location     Type
7763:          ;;                  1    wreg      void 
7764:          ;; Registers used:
7765:          ;;		wreg, fsr2l, fsr2h, status,2, status,0
7766:          ;; Tracked objects:
7767:          ;;		On entry : 3F/0
7768:          ;;		On exit  : 3F/0
7769:          ;;		Unchanged: 0/0
7770:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7771:          ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7772:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7773:          ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7774:          ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7775:          ;;Total ram usage:       10 bytes
7776:          ;; Hardware stack levels used:    1
7777:          ;; Hardware stack levels required when called:    5
7778:          ;; This function calls:
7779:          ;;		Nothing
7780:          ;; This function is called by:
7781:          ;;		_main
7782:          ;; This function uses a non-reentrant model
7783:          ;;
7784:          psect	text16,class=CODE,space=0,reloc=2,group=0
7785:          	line	88
7786:          global __ptext16
7787:          __ptext16:
7788:          psect	text16
7789:          	file	"sram.c"
7790:          	line	88
7791:          	global	__size_of_SramFill
7792:          	__size_of_SramFill	equ	__end_of_SramFill-_SramFill
7793:          	
7794:          _SramFill:; BSR set to: 0
7795:          
7796:          ;incstack = 0
7797:          	opt	stack 25
7798:          	line	90
7799:          	
7800:          l2212:; BSR set to: 0
7801:          
7802:          ;sram.c: 90: if(address >= 0x20000)
7803:          		movlw	2
7804:          	subwf	 ((c:SramFill@address+2)),c,w
7805:          	btfss	status,0
7806:          	goto	u1581
7807:          	goto	u1580
7808:          
7809:          u1581:
7810:          	goto	l2216
7811:          u1580:
7812:          	line	91
7813:          	
7814:          l2214:; BSR set to: 0
7815:          
7816:          ;sram.c: 91: address %= 0x20000;
7817:          	movlw	low(01FFFFh)
7818:          	andwf	((c:SramFill@address)),c
7819:          	movlw	high(01FFFFh)
7820:          	andwf	((c:SramFill@address+1)),c
7821:          	movlw	low highword(01FFFFh)
7822:          	andwf	((c:SramFill@address+2)),c
7823:          
7824:          	line	92
7825:          	
7826:          l2216:; BSR set to: 0
7827:          
7828:          ;sram.c: 92: if(address + length >= 0x20000)
7829:          	movf	((c:SramFill@length)),c,w
7830:          	addwf	((c:SramFill@address)),c,w
7831:          	movwf	(??_SramFill+0+0)&0ffh,c
7832:          	movf	((c:SramFill@length+1)),c,w
7833:          	addwfc	((c:SramFill@address+1)),c,w
7834:          	movwf	1+(??_SramFill+0+0)&0ffh,c
7835:          	
7836:          	movf	((c:SramFill@length+2)),c,w
7837:          	addwfc	((c:SramFill@address+2)),c,w
7838:          	movwf	2+(??_SramFill+0+0)&0ffh,c
7839:          
7840:          		movlw	2
7841:          	subwf	 (??_SramFill+0+2),c,w
7842:          	btfss	status,0
7843:          	goto	u1591
7844:          	goto	u1590
7845:          
7846:          u1591:
7847:          	goto	l2220
7848:          u1590:
7849:          	line	93
7850:          	
7851:          l2218:; BSR set to: 0
7852:          
7853:          ;sram.c: 93: length = 0x20000 - address;
7854:          	movlw	0
7855:          	movwf	(??_SramFill+0+0)&0ffh,c
7856:          	movlw	0
7857:          	movwf	(??_SramFill+0+0+1)&0ffh,c
7858:          	movlw	02h
7859:          	movwf	(??_SramFill+0+0+2)&0ffh,c
7860:          	movf	((c:SramFill@address)),c,w
7861:          	subwf	(??_SramFill+0+0),c,w
7862:          	movwf	((c:SramFill@length)),c
7863:          	movf	((c:SramFill@address+1)),c,w
7864:          	subwfb	(??_SramFill+0+1),c,w
7865:          	movwf	1+((c:SramFill@length)),c
7866:          	
7867:          	movf	((c:SramFill@address+2)),c,w
7868:          	subwfb	(??_SramFill+0+2),c,w
7869:          	movwf	2+((c:SramFill@length)),c
7870:          	line	94
7871:          	
7872:          l2220:; BSR set to: 0
7873:          
7874:          ;sram.c: 94: _sramStatus.statusBits.isBusyFill = 1;
7875:          	bsf	((__sramStatus))&0ffh,2	;volatile
7876:          	line	95
7877:          	
7878:          l2222:; BSR set to: 0
7879:          
7880:          ;sram.c: 95: _sramStatus.statusBits.isContinuousFill = 1;
7881:          	bsf	((__sramStatus))&0ffh,6	;volatile
7882:          	line	96
7883:          	
7884:          l2224:; BSR set to: 0
7885:          
7886:          ;sram.c: 96: _sramBuffer.transmit.initialization.command = 0x02;
7887:          	movlw	low(02h)
7888:          	movff	wreg,__sramBuffer
7889:          
7890:          	line	97
7891:          	
7892:          l2226:; BSR set to: 0
7893:          
7894:          ;sram.c: 97: _sramBuffer.transmit.initialization.address = address;
7895:          	movff	(c:SramFill@address),0+(__sramBuffer+01h)	;volatile
7896:          	movff	(c:SramFill@address+1),1+(__sramBuffer+01h)	;volatile
7897:          	movff	(c:SramFill@address+2),2+(__sramBuffer+01h)	;volatile
7898:          	line	98
7899:          	
7900:          l2228:; BSR set to: 0
7901:          
7902:          ;sram.c: 98: _sramBuffer.transmit.txData[0] = value;
7903:          	lfsr	2,(__sramBuffer)+04h	;volatile
7904:          	movff	(c:SramFill@value),indf2
7905:          
7906:          	line	99
7907:          	
7908:          l2230:; BSR set to: 0
7909:          
7910:          ;sram.c: 99: _sramStatus.dataLength = length;
7911:          	movff	(c:SramFill@length),0+(__sramStatus+01h)	;volatile
7912:          	movff	(c:SramFill@length+1),1+(__sramStatus+01h)	;volatile
7913:          	movff	(c:SramFill@length+2),2+(__sramStatus+01h)	;volatile
7914:          	line	100
7915:          	
7916:          l2232:; BSR set to: 0
7917:          
7918:          ;sram.c: 100: TXADDRH = (uint8_t)(((unsigned int) &_sramBuffer.transmit>>(8*1))&0xFF);
7919:          	movlw	high(__sramBuffer)
7920:          	movwf	((c:3946)),c	;volatile
7921:          	line	101
7922:          	
7923:          l2234:; BSR set to: 0
7924:          
7925:          ;sram.c: 101: TXADDRL = (uint8_t)(((unsigned int) &_sramBuffer.transmit>>(8*0))&0xFF);
7926:          	movlw	low(__sramBuffer)
7927:          	movwf	((c:3947)),c	;volatile
7928:          	line	102
7929:          	
7930:          l2236:; BSR set to: 0
7931:          
7932:          ;sram.c: 102: RXADDRH = (uint8_t)(((unsigned int) &_sramBuffer.receive>>(8*1))&0xFF);
7933:          	movlw	high(__sramBuffer+084h)
7934:          	movwf	((c:3944)),c	;volatile
7935:          	line	103
7936:          	
7937:          l2238:; BSR set to: 0
7938:          
7939:          ;sram.c: 103: RXADDRL = (uint8_t)(((unsigned int) &_sramBuffer.receive>>(8*0))&0xFF);
7940:          	movlw	low(__sramBuffer+084h)
7941:          	movwf	((c:3945)),c	;volatile
7942:          	line	104
7943:          	
7944:          l2240:; BSR set to: 0
7945:          
7946:          ;sram.c: 104: DMABCH = 0x00;
7947:          	clrf	((c:3942)),c	;volatile
7948:          	line	105
7949:          	
7950:          l2242:; BSR set to: 0
7951:          
7952:          ;sram.c: 105: DMABCL = 0x03;
7953:          	movlw	low(03h)
7954:          	movwf	((c:3943)),c	;volatile
7955:          	line	106
7956:          	
7957:          l2244:; BSR set to: 0
7958:          
7959:          ;sram.c: 106: LATBbits.LATB3 = 0;
7960:          	bcf	((c:3978)),c,3	;volatile
7961:          	line	107
7962:          	
7963:          l2246:; BSR set to: 0
7964:          
7965:          ;sram.c: 107: DMACON1bits.DMAEN = 1;
7966:          	bsf	((c:3976)),c,0	;volatile
7967:          	line	108
7968:          	
7969:          l372:; BSR set to: 0
7970:          
7971:          	return	;funcret
7972:          	opt stack 0
7973:          GLOBAL	__end_of_SramFill
7974:          	__end_of_SramFill:
7975:          	signat	_SramFill,12409
7976:          	global	_RingBufferCreate
7977:          
7978:          ;; *************** function _RingBufferCreate *****************
7979:          ;; Defined at:
7980:          ;;		line 19 in file "serial_comm.c"
7981:          ;; Parameters:    Size  Location     Type
7982:          ;;  bufferSize      2   25[COMRAM] unsigned int 
7983:          ;;  dataBuffer      2   27[COMRAM] PTR unsigned char 
7984:          ;;		 -> main@rxBufferData2(256), main@rxBufferData1(256), main@txBufferData2(32), main@txBufferData1(32), 
7985:          ;; Auto vars:     Size  Location     Type
7986:          ;;  ringBuffer      6   31[COMRAM] struct _RingBuffer
7987:          ;; Return value:  Size  Location     Type
7988:          ;;                  6   25[COMRAM] struct _RingBuffer
7989:          ;; Registers used:
7990:          ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
7991:          ;; Tracked objects:
7992:          ;;		On entry : 0/F
7993:          ;;		On exit  : 0/0
7994:          ;;		Unchanged: 0/0
7995:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
7996:          ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7997:          ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7998:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
7999:          ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8000:          ;;Total ram usage:       12 bytes
8001:          ;; Hardware stack levels used:    1
8002:          ;; Hardware stack levels required when called:    5
8003:          ;; This function calls:
8004:          ;;		Nothing
8005:          ;; This function is called by:
8006:          ;;		_main
8007:          ;; This function uses a non-reentrant model
8008:          ;;
8009:          psect	text17,class=CODE,space=0,reloc=2,group=0
8010:          	file	"serial_comm.c"
8011:          	line	19
8012:          global __ptext17
8013:          __ptext17:
8014:          psect	text17
8015:          	file	"serial_comm.c"
8016:          	line	19
8017:          	global	__size_of_RingBufferCreate
8018:          	__size_of_RingBufferCreate	equ	__end_of_RingBufferCreate-_RingBufferCreate
8019:          	
8020:          _RingBufferCreate:; BSR set to: 0
8021:          
8022:          ;incstack = 0
8023:          	opt	stack 25
8024:          	line	22
8025:          	
8026:          l2182:
8027:          ;serial_comm.c: 21: RingBuffer ringBuffer;
8028:          ;serial_comm.c: 22: ringBuffer.bufferSize = bufferSize;
8029:          	movff	(c:RingBufferCreate@bufferSize),(c:RingBufferCreate@ringBuffer)
8030:          	line	23
8031:          ;serial_comm.c: 23: ringBuffer.length = 0;
8032:          	clrf	(0+((c:RingBufferCreate@ringBuffer)+01h)),c
8033:          	line	24
8034:          	
8035:          l2184:
8036:          ;serial_comm.c: 24: ringBuffer.head = bufferSize - 1;
8037:          	decf	((c:RingBufferCreate@bufferSize)),c,w
8038:          	movwf	(0+((c:RingBufferCreate@ringBuffer)+02h)),c
8039:          	line	25
8040:          	
8041:          l2186:
8042:          ;serial_comm.c: 25: ringBuffer.tail = 0;
8043:          	clrf	(0+((c:RingBufferCreate@ringBuffer)+03h)),c
8044:          	line	26
8045:          ;serial_comm.c: 26: ringBuffer.data = dataBuffer;
8046:          		movff	(c:RingBufferCreate@dataBuffer),0+((c:RingBufferCreate@ringBuffer)+04h)
8047:          	movff	(c:RingBufferCreate@dataBuffer+1),1+((c:RingBufferCreate@ringBuffer)+04h)
8048:          
8049:          	line	27
8050:          	
8051:          l2188:
8052:          ;serial_comm.c: 27: return ringBuffer;
8053:          	lfsr	2,(RingBufferCreate@ringBuffer)
8054:          	lfsr	0,(?_RingBufferCreate)
8055:          	movlw	6-1
8056:          u1571:
8057:          	movff	plusw2,plusw0
8058:          	decf	wreg
8059:          	bc	u1571
8060:          
8061:          	line	28
8062:          	
8063:          l414:
8064:          	return	;funcret
8065:          	opt stack 0
8066:          GLOBAL	__end_of_RingBufferCreate
8067:          	__end_of_RingBufferCreate:
8068:          	signat	_RingBufferCreate,8318
8069:          	global	_InitializeWDT
8070:          
8071:          ;; *************** function _InitializeWDT *****************
8072:          ;; Defined at:
8073:          ;;		line 137 in file "main.c"
8074:          ;; Parameters:    Size  Location     Type
8075:          ;;		None
8076:          ;; Auto vars:     Size  Location     Type
8077:          ;;		None
8078:          ;; Return value:  Size  Location     Type
8079:          ;;                  1    wreg      void 
8080:          ;; Registers used:
8081:          ;;		None
8082:          ;; Tracked objects:
8083:          ;;		On entry : 3F/F
8084:          ;;		On exit  : 3F/F
8085:          ;;		Unchanged: 3E/0
8086:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8087:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8088:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8089:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8090:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8091:          ;;Total ram usage:        0 bytes
8092:          ;; Hardware stack levels used:    1
8093:          ;; Hardware stack levels required when called:    5
8094:          ;; This function calls:
8095:          ;;		Nothing
8096:          ;; This function is called by:
8097:          ;;		_main
8098:          ;; This function uses a non-reentrant model
8099:          ;;
8100:          psect	text18,class=CODE,space=0,reloc=2,group=0
8101:          	file	"main.c"
8102:          	line	137
8103:          global __ptext18
8104:          __ptext18:
8105:          psect	text18
8106:          	file	"main.c"
8107:          	line	137
8108:          	global	__size_of_InitializeWDT
8109:          	__size_of_InitializeWDT	equ	__end_of_InitializeWDT-_InitializeWDT
8110:          	
8111:          _InitializeWDT:
8112:          ;incstack = 0
8113:          	opt	stack 25
8114:          	line	139
8115:          	
8116:          l2080:; BSR set to: 15
8117:          
8118:          ;main.c: 139: WDTCONbits.REGSLP = 1;
8119:          	bsf	((c:4032)),c,7	;volatile
8120:          	line	140
8121:          ;main.c: 140: WDTCONbits.VBGOE = 0;
8122:          	bcf	((c:4032)),c,4	;volatile
8123:          	line	141
8124:          ;main.c: 141: WDTCONbits.ULPEN = 0;
8125:          	bcf	((c:4032)),c,2	;volatile
8126:          	line	142
8127:          ;main.c: 142: WDTCONbits.ULPSINK = 0;
8128:          	bcf	((c:4032)),c,1	;volatile
8129:          	line	143
8130:          ;main.c: 143: WDTCONbits.SWDTEN = 0;
8131:          	bcf	((c:4032)),c,0	;volatile
8132:          	line	144
8133:          	
8134:          l195:; BSR set to: 15
8135:          
8136:          	return	;funcret
8137:          	opt stack 0
8138:          GLOBAL	__end_of_InitializeWDT
8139:          	__end_of_InitializeWDT:
8140:          	signat	_InitializeWDT,89
8141:          	global	_InitializeUSART
8142:          
8143:          ;; *************** function _InitializeUSART *****************
8144:          ;; Defined at:
8145:          ;;		line 210 in file "main.c"
8146:          ;; Parameters:    Size  Location     Type
8147:          ;;		None
8148:          ;; Auto vars:     Size  Location     Type
8149:          ;;		None
8150:          ;; Return value:  Size  Location     Type
8151:          ;;                  1    wreg      void 
8152:          ;; Registers used:
8153:          ;;		wreg, status,2
8154:          ;; Tracked objects:
8155:          ;;		On entry : 3F/F
8156:          ;;		On exit  : 3F/F
8157:          ;;		Unchanged: 3E/0
8158:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8159:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8160:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8161:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8162:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8163:          ;;Total ram usage:        0 bytes
8164:          ;; Hardware stack levels used:    1
8165:          ;; Hardware stack levels required when called:    5
8166:          ;; This function calls:
8167:          ;;		Nothing
8168:          ;; This function is called by:
8169:          ;;		_main
8170:          ;; This function uses a non-reentrant model
8171:          ;;
8172:          psect	text19,class=CODE,space=0,reloc=2,group=0
8173:          	line	210
8174:          global __ptext19
8175:          __ptext19:
8176:          psect	text19
8177:          	file	"main.c"
8178:          	line	210
8179:          	global	__size_of_InitializeUSART
8180:          	__size_of_InitializeUSART	equ	__end_of_InitializeUSART-_InitializeUSART
8181:          	
8182:          _InitializeUSART:; BSR set to: 15
8183:          
8184:          ;incstack = 0
8185:          	opt	stack 25
8186:          	line	217
8187:          	
8188:          l2116:; BSR set to: 15
8189:          
8190:          ;main.c: 217: SPBRGH1 = 0x00;
8191:          	clrf	((c:3967)),c	;volatile
8192:          	line	218
8193:          	
8194:          l2118:; BSR set to: 15
8195:          
8196:          ;main.c: 218: SPBRG1 = 0x67;
8197:          	movlw	low(067h)
8198:          	movwf	((c:4016)),c	;volatile
8199:          	line	219
8200:          	
8201:          l2120:; BSR set to: 15
8202:          
8203:          ;main.c: 219: TXSTA1bits.BRGH = 1;
8204:          	bsf	((c:4013)),c,2	;volatile
8205:          	line	220
8206:          	
8207:          l2122:; BSR set to: 15
8208:          
8209:          ;main.c: 220: BAUDCON1bits.BRG16 = 1;
8210:          	bsf	((c:3966)),c,3	;volatile
8211:          	line	221
8212:          	
8213:          l2124:; BSR set to: 15
8214:          
8215:          ;main.c: 221: TXSTA1bits.SYNC = 0;
8216:          	bcf	((c:4013)),c,4	;volatile
8217:          	line	224
8218:          	
8219:          l2126:; BSR set to: 15
8220:          
8221:          ;main.c: 224: TXSTA1bits.TX9 = 0;
8222:          	bcf	((c:4013)),c,6	;volatile
8223:          	line	225
8224:          	
8225:          l2128:; BSR set to: 15
8226:          
8227:          ;main.c: 225: BAUDCON1bits.TXCKP = 0;
8228:          	bcf	((c:3966)),c,4	;volatile
8229:          	line	226
8230:          	
8231:          l2130:; BSR set to: 15
8232:          
8233:          ;main.c: 226: TXSTA1bits.TXEN = 1;
8234:          	bsf	((c:4013)),c,5	;volatile
8235:          	line	229
8236:          	
8237:          l2132:; BSR set to: 15
8238:          
8239:          ;main.c: 229: RCSTA1bits.RX9 = 0;
8240:          	bcf	((c:4012)),c,6	;volatile
8241:          	line	230
8242:          	
8243:          l2134:; BSR set to: 15
8244:          
8245:          ;main.c: 230: BAUDCON1bits.RXDTP = 0;
8246:          	bcf	((c:3966)),c,5	;volatile
8247:          	line	231
8248:          	
8249:          l2136:; BSR set to: 15
8250:          
8251:          ;main.c: 231: RCSTA1bits.CREN = 1;
8252:          	bsf	((c:4012)),c,4	;volatile
8253:          	line	241
8254:          	
8255:          l2138:; BSR set to: 15
8256:          
8257:          ;main.c: 241: SPBRGH2 = 0x00;
8258:          	clrf	((c:3965)),c	;volatile
8259:          	line	242
8260:          ;main.c: 242: SPBRG2 = 0x67;
8261:          	movlw	low(067h)
8262:          	movwf	((c:4011)),c	;volatile
8263:          	line	243
8264:          	
8265:          l2140:; BSR set to: 15
8266:          
8267:          ;main.c: 243: TXSTA2bits.BRGH = 1;
8268:          	bsf	((c:4008)),c,2	;volatile
8269:          	line	244
8270:          	
8271:          l2142:; BSR set to: 15
8272:          
8273:          ;main.c: 244: BAUDCON2bits.BRG16 = 1;
8274:          	bsf	((c:3964)),c,3	;volatile
8275:          	line	245
8276:          	
8277:          l2144:; BSR set to: 15
8278:          
8279:          ;main.c: 245: TXSTA2bits.SYNC = 0;
8280:          	bcf	((c:4008)),c,4	;volatile
8281:          	line	248
8282:          	
8283:          l2146:; BSR set to: 15
8284:          
8285:          ;main.c: 248: TXSTA2bits.TX9 = 0;
8286:          	bcf	((c:4008)),c,6	;volatile
8287:          	line	249
8288:          	
8289:          l2148:; BSR set to: 15
8290:          
8291:          ;main.c: 249: BAUDCON2bits.TXCKP = 0;
8292:          	bcf	((c:3964)),c,4	;volatile
8293:          	line	250
8294:          	
8295:          l2150:; BSR set to: 15
8296:          
8297:          ;main.c: 250: TXSTA2bits.TXEN = 1;
8298:          	bsf	((c:4008)),c,5	;volatile
8299:          	line	253
8300:          	
8301:          l2152:; BSR set to: 15
8302:          
8303:          ;main.c: 253: RCSTA2bits.RX9 = 0;
8304:          	bcf	((c:3996)),c,6	;volatile
8305:          	line	254
8306:          	
8307:          l2154:; BSR set to: 15
8308:          
8309:          ;main.c: 254: BAUDCON2bits.RXDTP = 0;
8310:          	bcf	((c:3964)),c,5	;volatile
8311:          	line	255
8312:          	
8313:          l2156:; BSR set to: 15
8314:          
8315:          ;main.c: 255: RCSTA2bits.CREN = 1;
8316:          	bsf	((c:3996)),c,4	;volatile
8317:          	line	258
8318:          	
8319:          l2158:; BSR set to: 15
8320:          
8321:          ;main.c: 258: RCSTA2bits.SPEN = 1;
8322:          	bsf	((c:3996)),c,7	;volatile
8323:          	line	259
8324:          	
8325:          l207:; BSR set to: 15
8326:          
8327:          	return	;funcret
8328:          	opt stack 0
8329:          GLOBAL	__end_of_InitializeUSART
8330:          	__end_of_InitializeUSART:
8331:          	signat	_InitializeUSART,89
8332:          	global	_InitializeTimers
8333:          
8334:          ;; *************** function _InitializeTimers *****************
8335:          ;; Defined at:
8336:          ;;		line 178 in file "main.c"
8337:          ;; Parameters:    Size  Location     Type
8338:          ;;		None
8339:          ;; Auto vars:     Size  Location     Type
8340:          ;;		None
8341:          ;; Return value:  Size  Location     Type
8342:          ;;                  1    wreg      void 
8343:          ;; Registers used:
8344:          ;;		wreg, status,2
8345:          ;; Tracked objects:
8346:          ;;		On entry : 3F/E
8347:          ;;		On exit  : 3F/E
8348:          ;;		Unchanged: 3F/0
8349:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8350:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8351:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8352:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8353:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8354:          ;;Total ram usage:        0 bytes
8355:          ;; Hardware stack levels used:    1
8356:          ;; Hardware stack levels required when called:    5
8357:          ;; This function calls:
8358:          ;;		Nothing
8359:          ;; This function is called by:
8360:          ;;		_main
8361:          ;; This function uses a non-reentrant model
8362:          ;;
8363:          psect	text20,class=CODE,space=0,reloc=2,group=0
8364:          	line	178
8365:          global __ptext20
8366:          __ptext20:
8367:          psect	text20
8368:          	file	"main.c"
8369:          	line	178
8370:          	global	__size_of_InitializeTimers
8371:          	__size_of_InitializeTimers	equ	__end_of_InitializeTimers-_InitializeTimers
8372:          	
8373:          _InitializeTimers:; BSR set to: 15
8374:          
8375:          ;incstack = 0
8376:          	opt	stack 25
8377:          	line	183
8378:          	
8379:          l2094:; BSR set to: 14
8380:          
8381:          ;main.c: 183: T4CONbits.T4CKPS = 0x2;
8382:          	movf	((c:3958)),c,w	;volatile
8383:          	andlw	not (((1<<2)-1)<<0)
8384:          	iorlw	(02h & ((1<<2)-1))<<0
8385:          	movwf	((c:3958)),c	;volatile
8386:          	line	184
8387:          ;main.c: 184: T4CONbits.T4OUTPS = 0x2;
8388:          	movf	((c:3958)),c,w	;volatile
8389:          	andlw	not (((1<<4)-1)<<3)
8390:          	iorlw	(02h & ((1<<4)-1))<<3
8391:          	movwf	((c:3958)),c	;volatile
8392:          	line	185
8393:          ;main.c: 185: PR4 = 0xFA;
8394:          	movlw	low(0FAh)
8395:          	movwf	((c:3959)),c	;volatile
8396:          	line	186
8397:          	
8398:          l201:; BSR set to: 14
8399:          
8400:          	return	;funcret
8401:          	opt stack 0
8402:          GLOBAL	__end_of_InitializeTimers
8403:          	__end_of_InitializeTimers:
8404:          	signat	_InitializeTimers,89
8405:          	global	_InitializeSpi
8406:          
8407:          ;; *************** function _InitializeSpi *****************
8408:          ;; Defined at:
8409:          ;;		line 188 in file "main.c"
8410:          ;; Parameters:    Size  Location     Type
8411:          ;;		None
8412:          ;; Auto vars:     Size  Location     Type
8413:          ;;		None
8414:          ;; Return value:  Size  Location     Type
8415:          ;;                  1    wreg      void 
8416:          ;; Registers used:
8417:          ;;		wreg, status,2
8418:          ;; Tracked objects:
8419:          ;;		On entry : 3F/E
8420:          ;;		On exit  : 3F/F
8421:          ;;		Unchanged: 0/0
8422:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8423:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8424:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8425:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8426:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8427:          ;;Total ram usage:        0 bytes
8428:          ;; Hardware stack levels used:    1
8429:          ;; Hardware stack levels required when called:    5
8430:          ;; This function calls:
8431:          ;;		Nothing
8432:          ;; This function is called by:
8433:          ;;		_main
8434:          ;; This function uses a non-reentrant model
8435:          ;;
8436:          psect	text21,class=CODE,space=0,reloc=2,group=0
8437:          	line	188
8438:          global __ptext21
8439:          __ptext21:
8440:          psect	text21
8441:          	file	"main.c"
8442:          	line	188
8443:          	global	__size_of_InitializeSpi
8444:          	__size_of_InitializeSpi	equ	__end_of_InitializeSpi-_InitializeSpi
8445:          	
8446:          _InitializeSpi:; BSR set to: 14
8447:          
8448:          ;incstack = 0
8449:          	opt	stack 25
8450:          	line	191
8451:          	
8452:          l2096:; BSR set to: 14
8453:          
8454:          ;main.c: 191: ODCON3bits.SPI2OD = 0;
8455:          	movlb	15	; () banked
8456:          	bcf	((3904))&0ffh,1	;volatile
8457:          	line	192
8458:          ;main.c: 192: SSP2CON1bits.CKP = 0;
8459:          	bcf	((c:3954)),c,4	;volatile
8460:          	line	193
8461:          ;main.c: 193: SSP2STATbits.CKE = 1;
8462:          	bsf	((c:3955)),c,6	;volatile
8463:          	line	194
8464:          ;main.c: 194: SSP2STATbits.SMP = 0;
8465:          	bcf	((c:3955)),c,7	;volatile
8466:          	line	195
8467:          	
8468:          l2098:; BSR set to: 15
8469:          
8470:          ;main.c: 195: SSP2CON1bits.SSPM = 0b0000;
8471:          	movlw	((0 & ((1<<4)-1))<<0)|not (((1<<4)-1)<<0)
8472:          	andwf	((c:3954)),c	;volatile
8473:          	line	196
8474:          	
8475:          l2100:; BSR set to: 15
8476:          
8477:          ;main.c: 196: SSP2CON1bits.SSPEN = 1;
8478:          	bsf	((c:3954)),c,5	;volatile
8479:          	line	199
8480:          	
8481:          l2102:; BSR set to: 15
8482:          
8483:          ;main.c: 199: DMACON1bits.SSCON1 = 0;
8484:          	bcf	((c:3976)),c,7	;volatile
8485:          	line	200
8486:          	
8487:          l2104:; BSR set to: 15
8488:          
8489:          ;main.c: 200: DMACON1bits.SSCON0 = 0;
8490:          	bcf	((c:3976)),c,6	;volatile
8491:          	line	201
8492:          	
8493:          l2106:; BSR set to: 15
8494:          
8495:          ;main.c: 201: DMACON1bits.DUPLEX1 = 1;
8496:          	bsf	((c:3976)),c,3	;volatile
8497:          	line	202
8498:          	
8499:          l2108:; BSR set to: 15
8500:          
8501:          ;main.c: 202: DMACON1bits.DUPLEX0 = 0;
8502:          	bcf	((c:3976)),c,2	;volatile
8503:          	line	203
8504:          	
8505:          l2110:; BSR set to: 15
8506:          
8507:          ;main.c: 203: DMACON1bits.TXINC = 1;
8508:          	bsf	((c:3976)),c,5	;volatile
8509:          	line	204
8510:          	
8511:          l2112:; BSR set to: 15
8512:          
8513:          ;main.c: 204: DMACON1bits.RXINC = 1;
8514:          	bsf	((c:3976)),c,4	;volatile
8515:          	line	205
8516:          	
8517:          l2114:; BSR set to: 15
8518:          
8519:          ;main.c: 205: DMACON1bits.DLYINTEN = 0;
8520:          	bcf	((c:3976)),c,1	;volatile
8521:          	line	206
8522:          ;main.c: 206: DMACON2bits.DLYCYC = 0x0;
8523:          	movlw	((0 & ((1<<4)-1))<<4)|not (((1<<4)-1)<<4)
8524:          	andwf	((c:3974)),c	;volatile
8525:          	line	207
8526:          ;main.c: 207: DMACON2bits.INTLVL = 0x0;
8527:          	movlw	((0 & ((1<<4)-1))<<0)|not (((1<<4)-1)<<0)
8528:          	andwf	((c:3974)),c	;volatile
8529:          	line	208
8530:          	
8531:          l204:; BSR set to: 15
8532:          
8533:          	return	;funcret
8534:          	opt stack 0
8535:          GLOBAL	__end_of_InitializeSpi
8536:          	__end_of_InitializeSpi:
8537:          	signat	_InitializeSpi,89
8538:          	global	_InitializePorts
8539:          
8540:          ;; *************** function _InitializePorts *****************
8541:          ;; Defined at:
8542:          ;;		line 146 in file "main.c"
8543:          ;; Parameters:    Size  Location     Type
8544:          ;;		None
8545:          ;; Auto vars:     Size  Location     Type
8546:          ;;		None
8547:          ;; Return value:  Size  Location     Type
8548:          ;;                  1    wreg      void 
8549:          ;; Registers used:
8550:          ;;		wreg, status,2
8551:          ;; Tracked objects:
8552:          ;;		On entry : 3F/F
8553:          ;;		On exit  : 3F/E
8554:          ;;		Unchanged: 0/0
8555:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8556:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8557:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8558:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8559:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8560:          ;;Total ram usage:        0 bytes
8561:          ;; Hardware stack levels used:    1
8562:          ;; Hardware stack levels required when called:    5
8563:          ;; This function calls:
8564:          ;;		Nothing
8565:          ;; This function is called by:
8566:          ;;		_main
8567:          ;; This function uses a non-reentrant model
8568:          ;;
8569:          psect	text22,class=CODE,space=0,reloc=2,group=0
8570:          	line	146
8571:          global __ptext22
8572:          __ptext22:
8573:          psect	text22
8574:          	file	"main.c"
8575:          	line	146
8576:          	global	__size_of_InitializePorts
8577:          	__size_of_InitializePorts	equ	__end_of_InitializePorts-_InitializePorts
8578:          	
8579:          _InitializePorts:; BSR set to: 15
8580:          
8581:          ;incstack = 0
8582:          	opt	stack 25
8583:          	line	149
8584:          	
8585:          l2082:; BSR set to: 15
8586:          
8587:          ;main.c: 149: LATA = 0b00000000;
8588:          	clrf	((c:3977)),c	;volatile
8589:          	line	150
8590:          	
8591:          l2084:; BSR set to: 15
8592:          
8593:          ;main.c: 150: ANCON0 = 0b11110000;
8594:          	movlw	low(0F0h)
8595:          	movwf	((3912))&0ffh	;volatile
8596:          	line	151
8597:          ;main.c: 151: TRISA = 0b00111111;
8598:          	movlw	low(03Fh)
8599:          	movwf	((c:3986)),c	;volatile
8600:          	line	154
8601:          	
8602:          l2086:; BSR set to: 15
8603:          
8604:          ;main.c: 154: INTCON2bits.RBPU = 1;
8605:          	bsf	((c:4081)),c,7	;volatile
8606:          	line	155
8607:          ;main.c: 155: LATB = 0b00001000;
8608:          	movlw	low(08h)
8609:          	movwf	((c:3978)),c	;volatile
8610:          	line	156
8611:          ;main.c: 156: ANCON1 = 0b00010111;
8612:          	movlw	low(017h)
8613:          	movwf	((3913))&0ffh	;volatile
8614:          	line	157
8615:          ;main.c: 157: TRISB = 0b00000100;
8616:          	movlw	low(04h)
8617:          	movwf	((c:3987)),c	;volatile
8618:          	line	160
8619:          ;main.c: 160: LATC = 0b00000100;
8620:          	movlw	low(04h)
8621:          	movwf	((c:3979)),c	;volatile
8622:          	line	161
8623:          	
8624:          l2088:; BSR set to: 15
8625:          
8626:          ;main.c: 161: ANCON1bits.PCFG11 = 1;
8627:          	bsf	((3913))&0ffh,3	;volatile
8628:          	line	162
8629:          ;main.c: 162: TRISC = 0b10010010;
8630:          	movlw	low(092h)
8631:          	movwf	((c:3988)),c	;volatile
8632:          	line	165
8633:          ;main.c: 165: EECON2 = 0x55;
8634:          	movlw	low(055h)
8635:          	movwf	((c:4007)),c	;volatile
8636:          	line	166
8637:          ;main.c: 166: EECON2 = 0xAA;
8638:          	movlw	low(0AAh)
8639:          	movwf	((c:4007)),c	;volatile
8640:          	line	167
8641:          	
8642:          l2090:; BSR set to: 15
8643:          
8644:          ;main.c: 167: PPSCONbits.IOLOCK = 0;
8645:          	movlb	14	; () banked
8646:          	bcf	((3775))&0ffh,0	;volatile
8647:          	line	168
8648:          ;main.c: 168: RPINR1 = 0x02;
8649:          	movlw	low(02h)
8650:          	movwf	((3809))&0ffh	;volatile
8651:          	line	169
8652:          ;main.c: 169: RPINR21 = 0x05;
8653:          	movlw	low(05h)
8654:          	movwf	((3836))&0ffh	;volatile
8655:          	line	170
8656:          ;main.c: 170: RPINR22 = 0x08;
8657:          	movlw	low(08h)
8658:          	movwf	((3837))&0ffh	;volatile
8659:          	line	171
8660:          ;main.c: 171: RPINR16 = 0x0C;
8661:          	movlw	low(0Ch)
8662:          	movwf	((3831))&0ffh	;volatile
8663:          	line	172
8664:          ;main.c: 172: RPOR7 = 0x0A;
8665:          	movlw	low(0Ah)
8666:          	movwf	((3783))&0ffh	;volatile
8667:          	line	173
8668:          ;main.c: 173: RPOR8 = 0x0B;
8669:          	movlw	low(0Bh)
8670:          	movwf	((3784))&0ffh	;volatile
8671:          	line	174
8672:          ;main.c: 174: RPOR11 = 0x06;
8673:          	movlw	low(06h)
8674:          	movwf	((3787))&0ffh	;volatile
8675:          	line	175
8676:          	
8677:          l2092:; BSR set to: 14
8678:          
8679:          ;main.c: 175: PPSCONbits.IOLOCK = 1;
8680:          	bsf	((3775))&0ffh,0	;volatile
8681:          	line	176
8682:          	
8683:          l198:; BSR set to: 14
8684:          
8685:          	return	;funcret
8686:          	opt stack 0
8687:          GLOBAL	__end_of_InitializePorts
8688:          	__end_of_InitializePorts:
8689:          	signat	_InitializePorts,89
8690:          	global	_InitializeOscillator
8691:          
8692:          ;; *************** function _InitializeOscillator *****************
8693:          ;; Defined at:
8694:          ;;		line 127 in file "main.c"
8695:          ;; Parameters:    Size  Location     Type
8696:          ;;		None
8697:          ;; Auto vars:     Size  Location     Type
8698:          ;;		None
8699:          ;; Return value:  Size  Location     Type
8700:          ;;                  1    wreg      void 
8701:          ;; Registers used:
8702:          ;;		wreg, status,2
8703:          ;; Tracked objects:
8704:          ;;		On entry : 0/0
8705:          ;;		On exit  : 3F/F
8706:          ;;		Unchanged: 0/0
8707:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8708:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8709:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8710:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8711:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8712:          ;;Total ram usage:        0 bytes
8713:          ;; Hardware stack levels used:    1
8714:          ;; Hardware stack levels required when called:    5
8715:          ;; This function calls:
8716:          ;;		Nothing
8717:          ;; This function is called by:
8718:          ;;		_main
8719:          ;; This function uses a non-reentrant model
8720:          ;;
8721:          psect	text23,class=CODE,space=0,reloc=2,group=0
8722:          	line	127
8723:          global __ptext23
8724:          __ptext23:
8725:          psect	text23
8726:          	file	"main.c"
8727:          	line	127
8728:          	global	__size_of_InitializeOscillator
8729:          	__size_of_InitializeOscillator	equ	__end_of_InitializeOscillator-_InitializeOscillator
8730:          	
8731:          _InitializeOscillator:; BSR set to: 14
8732:          
8733:          ;incstack = 0
8734:          	opt	stack 25
8735:          	line	129
8736:          	
8737:          l2074:
8738:          ;main.c: 129: OSCCONbits.SCS = 0b00;
8739:          	movlw	((0 & ((1<<2)-1))<<0)|not (((1<<2)-1)<<0)
8740:          	andwf	((c:4051)),c	;volatile
8741:          	line	130
8742:          ;main.c: 130: OSCCONbits.IRCF = 0b111;
8743:          	movlw	(07h & ((1<<3)-1))<<4
8744:          	iorwf	((c:4051)),c	;volatile
8745:          	line	132
8746:          	
8747:          l2076:
8748:          ;main.c: 132: REFOCONbits.ROSEL = 0;
8749:          	movlb	15	; () banked
8750:          	bcf	((3901))&0ffh,4	;volatile
8751:          	line	133
8752:          ;main.c: 133: REFOCONbits.RODIV = 0;
8753:          	movlw	((0 & ((1<<4)-1))<<0)|not (((1<<4)-1)<<0)
8754:          	andwf	((3901))&0ffh	;volatile
8755:          	line	134
8756:          	
8757:          l2078:; BSR set to: 15
8758:          
8759:          ;main.c: 134: REFOCONbits.ROON = 0;
8760:          	bcf	((3901))&0ffh,7	;volatile
8761:          	line	135
8762:          	
8763:          l192:; BSR set to: 15
8764:          
8765:          	return	;funcret
8766:          	opt stack 0
8767:          GLOBAL	__end_of_InitializeOscillator
8768:          	__end_of_InitializeOscillator:
8769:          	signat	_InitializeOscillator,89
8770:          	global	_InitializeInterrupts
8771:          
8772:          ;; *************** function _InitializeInterrupts *****************
8773:          ;; Defined at:
8774:          ;;		line 266 in file "main.c"
8775:          ;; Parameters:    Size  Location     Type
8776:          ;;		None
8777:          ;; Auto vars:     Size  Location     Type
8778:          ;;		None
8779:          ;; Return value:  Size  Location     Type
8780:          ;;                  1    wreg      void 
8781:          ;; Registers used:
8782:          ;;		None
8783:          ;; Tracked objects:
8784:          ;;		On entry : 3F/F
8785:          ;;		On exit  : 3F/F
8786:          ;;		Unchanged: 3E/0
8787:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8788:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8789:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8790:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8791:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8792:          ;;Total ram usage:        0 bytes
8793:          ;; Hardware stack levels used:    1
8794:          ;; Hardware stack levels required when called:    5
8795:          ;; This function calls:
8796:          ;;		Nothing
8797:          ;; This function is called by:
8798:          ;;		_main
8799:          ;; This function uses a non-reentrant model
8800:          ;;
8801:          psect	text24,class=CODE,space=0,reloc=2,group=0
8802:          	line	266
8803:          global __ptext24
8804:          __ptext24:
8805:          psect	text24
8806:          	file	"main.c"
8807:          	line	266
8808:          	global	__size_of_InitializeInterrupts
8809:          	__size_of_InitializeInterrupts	equ	__end_of_InitializeInterrupts-_InitializeInterrupts
8810:          	
8811:          _InitializeInterrupts:; BSR set to: 15
8812:          
8813:          ;incstack = 0
8814:          	opt	stack 25
8815:          	line	269
8816:          	
8817:          l2160:; BSR set to: 15
8818:          
8819:          ;main.c: 269: INTCON2bits.INTEDG1 = 0;
8820:          	bcf	((c:4081)),c,5	;volatile
8821:          	line	270
8822:          ;main.c: 270: INTCON3bits.INT1IP = 1;
8823:          	bsf	((c:4080)),c,6	;volatile
8824:          	line	271
8825:          ;main.c: 271: INTCON3bits.INT1IE = 1;
8826:          	bsf	((c:4080)),c,3	;volatile
8827:          	line	274
8828:          ;main.c: 274: IPR3bits.TMR4IP = 1;
8829:          	bsf	((c:4005)),c,3	;volatile
8830:          	line	275
8831:          ;main.c: 275: PIE3bits.TMR4IE = 1;
8832:          	bsf	((c:4003)),c,3	;volatile
8833:          	line	278
8834:          ;main.c: 278: IPR1bits.TX1IP = 0;
8835:          	bcf	((c:3999)),c,4	;volatile
8836:          	line	279
8837:          ;main.c: 279: IPR1bits.RC1IP = 0;
8838:          	bcf	((c:3999)),c,5	;volatile
8839:          	line	281
8840:          ;main.c: 281: PIE1bits.RC1IE = 1;
8841:          	bsf	((c:3997)),c,5	;volatile
8842:          	line	284
8843:          ;main.c: 284: IPR3bits.TX2IP = 0;
8844:          	bcf	((c:4005)),c,4	;volatile
8845:          	line	285
8846:          ;main.c: 285: IPR3bits.RC2IP = 0;
8847:          	bcf	((c:4005)),c,5	;volatile
8848:          	line	287
8849:          ;main.c: 287: PIE3bits.RC2IE = 1;
8850:          	bsf	((c:4003)),c,5	;volatile
8851:          	line	290
8852:          ;main.c: 290: IPR3bits.SSP2IP = 0;
8853:          	bcf	((c:4005)),c,7	;volatile
8854:          	line	291
8855:          ;main.c: 291: PIE3bits.SSP2IE = 1;
8856:          	bsf	((c:4003)),c,7	;volatile
8857:          	line	294
8858:          ;main.c: 294: RCONbits.IPEN = 1;
8859:          	bsf	((c:4048)),c,7	;volatile
8860:          	line	295
8861:          ;main.c: 295: INTCONbits.GIEH = 1;
8862:          	bsf	((c:4082)),c,7	;volatile
8863:          	line	296
8864:          ;main.c: 296: INTCONbits.GIEL = 1;
8865:          	bsf	((c:4082)),c,6	;volatile
8866:          	line	297
8867:          	
8868:          l213:; BSR set to: 15
8869:          
8870:          	return	;funcret
8871:          	opt stack 0
8872:          GLOBAL	__end_of_InitializeInterrupts
8873:          	__end_of_InitializeInterrupts:
8874:          	signat	_InitializeInterrupts,89
8875:          	global	_CheckFlowControlRx2
8876:          
8877:          ;; *************** function _CheckFlowControlRx2 *****************
8878:          ;; Defined at:
8879:          ;;		line 146 in file "serial_comm.c"
8880:          ;; Parameters:    Size  Location     Type
8881:          ;;		None
8882:          ;; Auto vars:     Size  Location     Type
8883:          ;;		None
8884:          ;; Return value:  Size  Location     Type
8885:          ;;                  1    wreg      void 
8886:          ;; Registers used:
8887:          ;;		wreg, status,2, status,0
8888:          ;; Tracked objects:
8889:          ;;		On entry : 3F/0
8890:          ;;		On exit  : 3F/0
8891:          ;;		Unchanged: 0/0
8892:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
8893:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8894:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8895:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8896:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
8897:          ;;Total ram usage:        0 bytes
8898:          ;; Hardware stack levels used:    1
8899:          ;; Hardware stack levels required when called:    5
8900:          ;; This function calls:
8901:          ;;		Nothing
8902:          ;; This function is called by:
8903:          ;;		_main
8904:          ;; This function uses a non-reentrant model
8905:          ;;
8906:          psect	text25,class=CODE,space=0,reloc=2,group=0
8907:          	file	"serial_comm.c"
8908:          	line	146
8909:          global __ptext25
8910:          __ptext25:
8911:          psect	text25
8912:          	file	"serial_comm.c"
8913:          	line	146
8914:          	global	__size_of_CheckFlowControlRx2
8915:          	__size_of_CheckFlowControlRx2	equ	__end_of_CheckFlowControlRx2-_CheckFlowControlRx2
8916:          	
8917:          _CheckFlowControlRx2:; BSR set to: 15
8918:          
8919:          ;incstack = 0
8920:          	opt	stack 25
8921:          	line	148
8922:          	
8923:          l2302:; BSR set to: 0
8924:          
8925:          ;serial_comm.c: 148: if(!_commStatus2.statusBits.isRxPaused && _rxBuffer2.length >= (3 * 256) / 4)
8926:          	btfsc	((__commStatus2))&0ffh,2	;volatile
8927:          	goto	u1761
8928:          	goto	u1760
8929:          u1761:
8930:          	goto	l474
8931:          u1760:
8932:          	
8933:          l2304:; BSR set to: 0
8934:          
8935:          		movlw	0C0h-1
8936:          	cpfsgt	(0+(__rxBuffer2+01h))&0ffh	;volatile
8937:          	goto	u1771
8938:          	goto	u1770
8939:          
8940:          u1771:
8941:          	goto	l474
8942:          u1770:
8943:          	line	150
8944:          	
8945:          l2306:; BSR set to: 0
8946:          
8947:          ;serial_comm.c: 149: {
8948:          ;serial_comm.c: 150: PIE3bits.TX2IE = 0;
8949:          	bcf	((c:4003)),c,4	;volatile
8950:          	line	154
8951:          ;serial_comm.c: 151: while(!PIR3bits.TX2IF)
8952:          	
8953:          l475:; BSR set to: 0
8954:          
8955:          	line	151
8956:          	btfss	((c:4004)),c,4	;volatile
8957:          	goto	u1781
8958:          	goto	u1780
8959:          u1781:
8960:          	goto	l475
8961:          u1780:
8962:          	line	155
8963:          	
8964:          l2308:; BSR set to: 0
8965:          
8966:          ;serial_comm.c: 154: }
8967:          ;serial_comm.c: 155: TXREG2 = 0x13;
8968:          	movlw	low(013h)
8969:          	movwf	((c:4009)),c	;volatile
8970:          	line	156
8971:          	
8972:          l2310:; BSR set to: 0
8973:          
8974:          ;serial_comm.c: 156: _commStatus2.statusBits.isRxPaused = 1;
8975:          	bsf	((__commStatus2))&0ffh,2	;volatile
8976:          	line	157
8977:          	
8978:          l2312:; BSR set to: 0
8979:          
8980:          ;serial_comm.c: 157: PIE3bits.TX2IE = 1;
8981:          	bsf	((c:4003)),c,4	;volatile
8982:          	line	158
8983:          ;serial_comm.c: 158: }
8984:          	goto	l483
8985:          	line	159
8986:          	
8987:          l474:; BSR set to: 0
8988:          
8989:          ;serial_comm.c: 159: else if(_commStatus2.statusBits.isRxPaused && _rxBuffer2.length <= 256 / 4)
8990:          	btfss	((__commStatus2))&0ffh,2	;volatile
8991:          	goto	u1791
8992:          	goto	u1790
8993:          u1791:
8994:          	goto	l483
8995:          u1790:
8996:          	
8997:          l2314:; BSR set to: 0
8998:          
8999:          		movlw	041h-0
9000:          	cpfslt	(0+(__rxBuffer2+01h))&0ffh	;volatile
9001:          	goto	u1801
9002:          	goto	u1800
9003:          
9004:          u1801:
9005:          	goto	l483
9006:          u1800:
9007:          	line	161
9008:          	
9009:          l2316:; BSR set to: 0
9010:          
9011:          ;serial_comm.c: 160: {
9012:          ;serial_comm.c: 161: PIE3bits.TX2IE = 0;
9013:          	bcf	((c:4003)),c,4	;volatile
9014:          	line	165
9015:          ;serial_comm.c: 162: while(!PIR3bits.TX2IF)
9016:          	
9017:          l480:; BSR set to: 0
9018:          
9019:          	line	162
9020:          	btfss	((c:4004)),c,4	;volatile
9021:          	goto	u1811
9022:          	goto	u1810
9023:          u1811:
9024:          	goto	l480
9025:          u1810:
9026:          	line	166
9027:          	
9028:          l2318:; BSR set to: 0
9029:          
9030:          ;serial_comm.c: 165: }
9031:          ;serial_comm.c: 166: TXREG2 = 0x11;
9032:          	movlw	low(011h)
9033:          	movwf	((c:4009)),c	;volatile
9034:          	line	167
9035:          	
9036:          l2320:; BSR set to: 0
9037:          
9038:          ;serial_comm.c: 167: _commStatus2.statusBits.isRxPaused = 0;
9039:          	bcf	((__commStatus2))&0ffh,2	;volatile
9040:          	line	168
9041:          	
9042:          l2322:; BSR set to: 0
9043:          
9044:          ;serial_comm.c: 168: PIE3bits.TX2IE = 1;
9045:          	bsf	((c:4003)),c,4	;volatile
9046:          	line	170
9047:          	
9048:          l483:; BSR set to: 0
9049:          
9050:          	return	;funcret
9051:          	opt stack 0
9052:          GLOBAL	__end_of_CheckFlowControlRx2
9053:          	__end_of_CheckFlowControlRx2:
9054:          	signat	_CheckFlowControlRx2,89
9055:          	global	_CheckFlowControlRx1
9056:          
9057:          ;; *************** function _CheckFlowControlRx1 *****************
9058:          ;; Defined at:
9059:          ;;		line 120 in file "serial_comm.c"
9060:          ;; Parameters:    Size  Location     Type
9061:          ;;		None
9062:          ;; Auto vars:     Size  Location     Type
9063:          ;;		None
9064:          ;; Return value:  Size  Location     Type
9065:          ;;                  1    wreg      void 
9066:          ;; Registers used:
9067:          ;;		wreg, status,2, status,0
9068:          ;; Tracked objects:
9069:          ;;		On entry : 3F/0
9070:          ;;		On exit  : 3F/0
9071:          ;;		Unchanged: 0/0
9072:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9073:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9074:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9075:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9076:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9077:          ;;Total ram usage:        0 bytes
9078:          ;; Hardware stack levels used:    1
9079:          ;; Hardware stack levels required when called:    5
9080:          ;; This function calls:
9081:          ;;		Nothing
9082:          ;; This function is called by:
9083:          ;;		_main
9084:          ;; This function uses a non-reentrant model
9085:          ;;
9086:          psect	text26,class=CODE,space=0,reloc=2,group=0
9087:          	line	120
9088:          global __ptext26
9089:          __ptext26:
9090:          psect	text26
9091:          	file	"serial_comm.c"
9092:          	line	120
9093:          	global	__size_of_CheckFlowControlRx1
9094:          	__size_of_CheckFlowControlRx1	equ	__end_of_CheckFlowControlRx1-_CheckFlowControlRx1
9095:          	
9096:          _CheckFlowControlRx1:; BSR set to: 0
9097:          
9098:          ;incstack = 0
9099:          	opt	stack 25
9100:          	line	122
9101:          	
9102:          l2276:; BSR set to: 0
9103:          
9104:          ;serial_comm.c: 122: if(!_commStatus1.statusBits.isRxPaused && _rxBuffer1.length >= (3 * 256) / 4)
9105:          	btfsc	((__commStatus1))&0ffh,2	;volatile
9106:          	goto	u1701
9107:          	goto	u1700
9108:          u1701:
9109:          	goto	l462
9110:          u1700:
9111:          	
9112:          l2278:; BSR set to: 0
9113:          
9114:          		movlw	0C0h-1
9115:          	cpfsgt	(0+(__rxBuffer1+01h))&0ffh	;volatile
9116:          	goto	u1711
9117:          	goto	u1710
9118:          
9119:          u1711:
9120:          	goto	l462
9121:          u1710:
9122:          	line	124
9123:          	
9124:          l2280:; BSR set to: 0
9125:          
9126:          ;serial_comm.c: 123: {
9127:          ;serial_comm.c: 124: PIE1bits.TX1IE = 0;
9128:          	bcf	((c:3997)),c,4	;volatile
9129:          	line	128
9130:          ;serial_comm.c: 125: while(!PIR1bits.TX1IF)
9131:          	
9132:          l463:; BSR set to: 0
9133:          
9134:          	line	125
9135:          	btfss	((c:3998)),c,4	;volatile
9136:          	goto	u1721
9137:          	goto	u1720
9138:          u1721:
9139:          	goto	l463
9140:          u1720:
9141:          	line	129
9142:          	
9143:          l2282:; BSR set to: 0
9144:          
9145:          ;serial_comm.c: 128: }
9146:          ;serial_comm.c: 129: TXREG1 = 0x13;
9147:          	movlw	low(013h)
9148:          	movwf	((c:4014)),c	;volatile
9149:          	line	130
9150:          	
9151:          l2284:; BSR set to: 0
9152:          
9153:          ;serial_comm.c: 130: _commStatus1.statusBits.isRxPaused = 1;
9154:          	bsf	((__commStatus1))&0ffh,2	;volatile
9155:          	line	131
9156:          	
9157:          l2286:; BSR set to: 0
9158:          
9159:          ;serial_comm.c: 131: PIE1bits.TX1IE = 1;
9160:          	bsf	((c:3997)),c,4	;volatile
9161:          	line	132
9162:          ;serial_comm.c: 132: }
9163:          	goto	l471
9164:          	line	133
9165:          	
9166:          l462:; BSR set to: 0
9167:          
9168:          ;serial_comm.c: 133: else if(_commStatus1.statusBits.isRxPaused && _rxBuffer1.length <= 256 / 4)
9169:          	btfss	((__commStatus1))&0ffh,2	;volatile
9170:          	goto	u1731
9171:          	goto	u1730
9172:          u1731:
9173:          	goto	l471
9174:          u1730:
9175:          	
9176:          l2288:; BSR set to: 0
9177:          
9178:          		movlw	041h-0
9179:          	cpfslt	(0+(__rxBuffer1+01h))&0ffh	;volatile
9180:          	goto	u1741
9181:          	goto	u1740
9182:          
9183:          u1741:
9184:          	goto	l471
9185:          u1740:
9186:          	line	135
9187:          	
9188:          l2290:; BSR set to: 0
9189:          
9190:          ;serial_comm.c: 134: {
9191:          ;serial_comm.c: 135: PIE1bits.TX1IE = 0;
9192:          	bcf	((c:3997)),c,4	;volatile
9193:          	line	139
9194:          ;serial_comm.c: 136: while(!PIR1bits.TX1IF)
9195:          	
9196:          l468:; BSR set to: 0
9197:          
9198:          	line	136
9199:          	btfss	((c:3998)),c,4	;volatile
9200:          	goto	u1751
9201:          	goto	u1750
9202:          u1751:
9203:          	goto	l468
9204:          u1750:
9205:          	line	140
9206:          	
9207:          l2292:; BSR set to: 0
9208:          
9209:          ;serial_comm.c: 139: }
9210:          ;serial_comm.c: 140: TXREG1 = 0x11;
9211:          	movlw	low(011h)
9212:          	movwf	((c:4014)),c	;volatile
9213:          	line	141
9214:          	
9215:          l2294:; BSR set to: 0
9216:          
9217:          ;serial_comm.c: 141: _commStatus1.statusBits.isRxPaused = 0;
9218:          	bcf	((__commStatus1))&0ffh,2	;volatile
9219:          	line	142
9220:          	
9221:          l2296:; BSR set to: 0
9222:          
9223:          ;serial_comm.c: 142: PIE1bits.TX1IE = 1;
9224:          	bsf	((c:3997)),c,4	;volatile
9225:          	line	144
9226:          	
9227:          l471:; BSR set to: 0
9228:          
9229:          	return	;funcret
9230:          	opt stack 0
9231:          GLOBAL	__end_of_CheckFlowControlRx1
9232:          	__end_of_CheckFlowControlRx1:
9233:          	signat	_CheckFlowControlRx1,89
9234:          	global	_CheckButton
9235:          
9236:          ;; *************** function _CheckButton *****************
9237:          ;; Defined at:
9238:          ;;		line 56 in file "button.c"
9239:          ;; Parameters:    Size  Location     Type
9240:          ;;  buttonInfo      1   25[COMRAM] PTR volatile struct _But
9241:          ;;		 -> _button(15), 
9242:          ;; Auto vars:     Size  Location     Type
9243:          ;;		None
9244:          ;; Return value:  Size  Location     Type
9245:          ;;                  1    wreg      void 
9246:          ;; Registers used:
9247:          ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
9248:          ;; Tracked objects:
9249:          ;;		On entry : 0/0
9250:          ;;		On exit  : 0/0
9251:          ;;		Unchanged: 0/0
9252:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9253:          ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9254:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9255:          ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9256:          ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9257:          ;;Total ram usage:        9 bytes
9258:          ;; Hardware stack levels used:    1
9259:          ;; Hardware stack levels required when called:    6
9260:          ;; This function calls:
9261:          ;;		_ButtonHold
9262:          ;;		_ButtonPress
9263:          ;;		_ButtonRelease
9264:          ;; This function is called by:
9265:          ;;		_main
9266:          ;; This function uses a non-reentrant model
9267:          ;;
9268:          psect	text27,class=CODE,space=0,reloc=2,group=0
9269:          	file	"button.c"
9270:          	line	56
9271:          global __ptext27
9272:          __ptext27:
9273:          psect	text27
9274:          	file	"button.c"
9275:          	line	56
9276:          	global	__size_of_CheckButton
9277:          	__size_of_CheckButton	equ	__end_of_CheckButton-_CheckButton
9278:          	
9279:          _CheckButton:; BSR set to: 0
9280:          
9281:          ;incstack = 0
9282:          	opt	stack 24
9283:          	line	60
9284:          	
9285:          l2248:
9286:          ;button.c: 58: if(!buttonInfo->isUnhandled && buttonInfo->currentState == BTN_PRESS
9287:          ;button.c: 59: && !buttonInfo->currentLogicLevel
9288:          ;button.c: 60: && (_tick - buttonInfo->timestamp >= 500))
9289:          	movf	((c:CheckButton@buttonInfo)),c,w
9290:          	movwf	fsr2l
9291:          	clrf	fsr2h
9292:          	movlw	low(05h)
9293:          	addwf	fsr2l
9294:          
9295:          	btfsc	c:indf2,1
9296:          	goto	u1601
9297:          	goto	u1600
9298:          u1601:
9299:          	goto	l314
9300:          u1600:
9301:          	
9302:          l2250:
9303:          	movf	((c:CheckButton@buttonInfo)),c,w
9304:          	movwf	fsr2l
9305:          	clrf	fsr2h
9306:          	movlw	low(04h)
9307:          	addwf	fsr2l
9308:          
9309:          	movf	indf2,w
9310:          	btfss	status,2
9311:          	goto	u1611
9312:          	goto	u1610
9313:          u1611:
9314:          	goto	l314
9315:          u1610:
9316:          	
9317:          l2252:
9318:          	movf	((c:CheckButton@buttonInfo)),c,w
9319:          	movwf	fsr2l
9320:          	clrf	fsr2h
9321:          	movlw	low(05h)
9322:          	addwf	fsr2l
9323:          
9324:          	btfsc	c:indf2,2
9325:          	goto	u1621
9326:          	goto	u1620
9327:          u1621:
9328:          	goto	l314
9329:          u1620:
9330:          	
9331:          l2254:
9332:          	movf	((c:CheckButton@buttonInfo)),c,w
9333:          	movwf	fsr2l
9334:          	clrf	fsr2h
9335:          	movff	postinc2,??_CheckButton+0+0
9336:          	movff	postinc2,??_CheckButton+0+0+1
9337:          	movff	postinc2,??_CheckButton+0+0+2
9338:          	movff	postinc2,??_CheckButton+0+0+3
9339:          	movf	(??_CheckButton+0+0),c,w
9340:          	movlb	0	; () banked
9341:          	subwf	((__tick))&0ffh,w	;volatile
9342:          	movwf	(??_CheckButton+4+0)&0ffh,c
9343:          	movf	(??_CheckButton+0+1),c,w
9344:          	subwfb	((__tick+1))&0ffh,w	;volatile
9345:          	movwf	1+(??_CheckButton+4+0)&0ffh,c
9346:          	
9347:          	movf	(??_CheckButton+0+2),c,w
9348:          	subwfb	((__tick+2))&0ffh,w	;volatile
9349:          	movwf	2+(??_CheckButton+4+0)&0ffh,c
9350:          	
9351:          	movf	(??_CheckButton+0+3),c,w
9352:          	subwfb	((__tick+3))&0ffh,w	;volatile
9353:          	movwf	3+(??_CheckButton+4+0)&0ffh,c
9354:          		movf	(??_CheckButton+4+3),c,w
9355:          	iorwf	(??_CheckButton+4+2),c,w
9356:          	bnz	u1630
9357:          	movlw	244
9358:          	subwf	 (??_CheckButton+4+0),c,w
9359:          	movlw	1
9360:          	subwfb	(??_CheckButton+4+1),c,w
9361:          	btfss	status,0
9362:          	goto	u1631
9363:          	goto	u1630
9364:          
9365:          u1631:
9366:          	goto	l314
9367:          u1630:
9368:          	line	62
9369:          	
9370:          l2256:; BSR set to: 0
9371:          
9372:          ;button.c: 61: {
9373:          ;button.c: 62: buttonInfo->currentState = BTN_HOLD;
9374:          	movf	((c:CheckButton@buttonInfo)),c,w
9375:          	movwf	fsr2l
9376:          	clrf	fsr2h
9377:          	movlw	low(04h)
9378:          	addwf	fsr2l
9379:          
9380:          	movlw	low(01h)
9381:          	movwf	indf2
9382:          	line	63
9383:          ;button.c: 63: buttonInfo->isUnhandled = 1;
9384:          	movf	((c:CheckButton@buttonInfo)),c,w
9385:          	movwf	fsr2l
9386:          	clrf	fsr2h
9387:          	movlw	low(05h)
9388:          	addwf	fsr2l
9389:          
9390:          	bsf	c:indf2,1
9391:          	line	64
9392:          	
9393:          l314:
9394:          	line	66
9395:          ;button.c: 64: }
9396:          ;button.c: 66: if(buttonInfo->isUnhandled)
9397:          	movf	((c:CheckButton@buttonInfo)),c,w
9398:          	movwf	fsr2l
9399:          	clrf	fsr2h
9400:          	movlw	low(05h)
9401:          	addwf	fsr2l
9402:          
9403:          	btfss	c:indf2,1
9404:          	goto	u1641
9405:          	goto	u1640
9406:          u1641:
9407:          	goto	l315
9408:          u1640:
9409:          	goto	l2268
9410:          	line	71
9411:          	
9412:          l2260:
9413:          ;button.c: 71: buttonInfo->pressAction();
9414:          	movf	((c:CheckButton@buttonInfo)),c,w
9415:          	movwf	fsr2l
9416:          	clrf	fsr2h
9417:          	movlw	low(06h)
9418:          	addwf	fsr2l
9419:          
9420:          	call	u1658
9421:          	goto	u1659
9422:          u1658:
9423:          	push
9424:          	movwf	pclath
9425:          	movf	postinc2,w
9426:          	movwf	tosl
9427:          	movf	postinc2,w
9428:          	movwf	tosl+1
9429:          	movf	postinc2,w
9430:          	movwf	tosl+2
9431:          	movf	pclath,w
9432:          	
9433:          	return	;indir
9434:          	u1659:
9435:          	line	72
9436:          ;button.c: 72: break;
9437:          	goto	l2270
9438:          	line	74
9439:          	
9440:          l2262:
9441:          ;button.c: 74: buttonInfo->holdAction();
9442:          	movf	((c:CheckButton@buttonInfo)),c,w
9443:          	movwf	fsr2l
9444:          	clrf	fsr2h
9445:          	movlw	low(09h)
9446:          	addwf	fsr2l
9447:          
9448:          	call	u1668
9449:          	goto	u1669
9450:          u1668:
9451:          	push
9452:          	movwf	pclath
9453:          	movf	postinc2,w
9454:          	movwf	tosl
9455:          	movf	postinc2,w
9456:          	movwf	tosl+1
9457:          	movf	postinc2,w
9458:          	movwf	tosl+2
9459:          	movf	pclath,w
9460:          	
9461:          	return	;indir
9462:          	u1669:
9463:          	line	75
9464:          ;button.c: 75: break;
9465:          	goto	l2270
9466:          	line	77
9467:          	
9468:          l2264:
9469:          ;button.c: 77: buttonInfo->releaseAction();
9470:          	movf	((c:CheckButton@buttonInfo)),c,w
9471:          	movwf	fsr2l
9472:          	clrf	fsr2h
9473:          	movlw	low(0Ch)
9474:          	addwf	fsr2l
9475:          
9476:          	call	u1678
9477:          	goto	u1679
9478:          u1678:
9479:          	push
9480:          	movwf	pclath
9481:          	movf	postinc2,w
9482:          	movwf	tosl
9483:          	movf	postinc2,w
9484:          	movwf	tosl+1
9485:          	movf	postinc2,w
9486:          	movwf	tosl+2
9487:          	movf	pclath,w
9488:          	
9489:          	return	;indir
9490:          	u1679:
9491:          	line	78
9492:          ;button.c: 78: break;
9493:          	goto	l2270
9494:          	line	68
9495:          	
9496:          l2268:
9497:          	movf	((c:CheckButton@buttonInfo)),c,w
9498:          	movwf	fsr2l
9499:          	clrf	fsr2h
9500:          	movlw	low(04h)
9501:          	addwf	fsr2l
9502:          
9503:          	movf	indf2,w
9504:          	; Switch size 1, requested type "space"
9505:          ; Number of cases is 3, Range of values is 0 to 2
9506:          ; switch strategies available:
9507:          ; Name         Instructions Cycles
9508:          ; simple_byte           10     6 (average)
9509:          ;	Chosen strategy is simple_byte
9510:          
9511:          	xorlw	0^0	; case 0
9512:          	skipnz
9513:          	goto	l2260
9514:          	xorlw	1^0	; case 1
9515:          	skipnz
9516:          	goto	l2262
9517:          	xorlw	2^1	; case 2
9518:          	skipnz
9519:          	goto	l2264
9520:          	goto	l2270
9521:          
9522:          	line	80
9523:          	
9524:          l2270:
9525:          ;button.c: 80: buttonInfo->isUnhandled = 0;
9526:          	movf	((c:CheckButton@buttonInfo)),c,w
9527:          	movwf	fsr2l
9528:          	clrf	fsr2h
9529:          	movlw	low(05h)
9530:          	addwf	fsr2l
9531:          
9532:          	bcf	c:indf2,1
9533:          	line	81
9534:          	
9535:          l315:
9536:          	line	83
9537:          ;button.c: 81: }
9538:          ;button.c: 83: if(buttonInfo->isDebouncing && (_tick - buttonInfo->timestamp >= 5))
9539:          	movf	((c:CheckButton@buttonInfo)),c,w
9540:          	movwf	fsr2l
9541:          	clrf	fsr2h
9542:          	movlw	low(05h)
9543:          	addwf	fsr2l
9544:          
9545:          	btfss	c:indf2,0
9546:          	goto	u1681
9547:          	goto	u1680
9548:          u1681:
9549:          	goto	l322
9550:          u1680:
9551:          	
9552:          l2272:
9553:          	movf	((c:CheckButton@buttonInfo)),c,w
9554:          	movwf	fsr2l
9555:          	clrf	fsr2h
9556:          	movff	postinc2,??_CheckButton+0+0
9557:          	movff	postinc2,??_CheckButton+0+0+1
9558:          	movff	postinc2,??_CheckButton+0+0+2
9559:          	movff	postinc2,??_CheckButton+0+0+3
9560:          	movf	(??_CheckButton+0+0),c,w
9561:          	movlb	0	; () banked
9562:          	subwf	((__tick))&0ffh,w	;volatile
9563:          	movwf	(??_CheckButton+4+0)&0ffh,c
9564:          	movf	(??_CheckButton+0+1),c,w
9565:          	subwfb	((__tick+1))&0ffh,w	;volatile
9566:          	movwf	1+(??_CheckButton+4+0)&0ffh,c
9567:          	
9568:          	movf	(??_CheckButton+0+2),c,w
9569:          	subwfb	((__tick+2))&0ffh,w	;volatile
9570:          	movwf	2+(??_CheckButton+4+0)&0ffh,c
9571:          	
9572:          	movf	(??_CheckButton+0+3),c,w
9573:          	subwfb	((__tick+3))&0ffh,w	;volatile
9574:          	movwf	3+(??_CheckButton+4+0)&0ffh,c
9575:          		movf	(??_CheckButton+4+3),c,w
9576:          	iorwf	(??_CheckButton+4+2),c,w
9577:          	iorwf	(??_CheckButton+4+1),c,w
9578:          	bnz	u1690
9579:          	movlw	5
9580:          	subwf	 (??_CheckButton+4+0),c,w
9581:          	btfss	status,0
9582:          	goto	u1691
9583:          	goto	u1690
9584:          
9585:          u1691:
9586:          	goto	l322
9587:          u1690:
9588:          	line	84
9589:          	
9590:          l2274:; BSR set to: 0
9591:          
9592:          ;button.c: 84: buttonInfo->isDebouncing = 0;
9593:          	movf	((c:CheckButton@buttonInfo)),c,w
9594:          	movwf	fsr2l
9595:          	clrf	fsr2h
9596:          	movlw	low(05h)
9597:          	addwf	fsr2l
9598:          
9599:          	bcf	c:indf2,0
9600:          	line	85
9601:          	
9602:          l322:
9603:          	return	;funcret
9604:          	opt stack 0
9605:          GLOBAL	__end_of_CheckButton
9606:          	__end_of_CheckButton:
9607:          	signat	_CheckButton,4217
9608:          	global	_ButtonRelease
9609:          
9610:          ;; *************** function _ButtonRelease *****************
9611:          ;; Defined at:
9612:          ;;		line 311 in file "main.c"
9613:          ;; Parameters:    Size  Location     Type
9614:          ;;		None
9615:          ;; Auto vars:     Size  Location     Type
9616:          ;;		None
9617:          ;; Return value:  Size  Location     Type
9618:          ;;                  1    wreg      void 
9619:          ;; Registers used:
9620:          ;;		None
9621:          ;; Tracked objects:
9622:          ;;		On entry : 0/0
9623:          ;;		On exit  : 0/0
9624:          ;;		Unchanged: 0/0
9625:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9626:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9627:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9628:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9629:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9630:          ;;Total ram usage:        0 bytes
9631:          ;; Hardware stack levels used:    1
9632:          ;; Hardware stack levels required when called:    5
9633:          ;; This function calls:
9634:          ;;		Nothing
9635:          ;; This function is called by:
9636:          ;;		_main
9637:          ;;		_CheckButton
9638:          ;; This function uses a non-reentrant model
9639:          ;;
9640:          psect	text28,class=CODE,space=0,reloc=2,group=0
9641:          	file	"main.c"
9642:          	line	311
9643:          global __ptext28
9644:          __ptext28:
9645:          psect	text28
9646:          	file	"main.c"
9647:          	line	311
9648:          	global	__size_of_ButtonRelease
9649:          	__size_of_ButtonRelease	equ	__end_of_ButtonRelease-_ButtonRelease
9650:          	
9651:          _ButtonRelease:
9652:          ;incstack = 0
9653:          	opt	stack 24
9654:          	line	314
9655:          	
9656:          l222:
9657:          	return	;funcret
9658:          	opt stack 0
9659:          GLOBAL	__end_of_ButtonRelease
9660:          	__end_of_ButtonRelease:
9661:          	signat	_ButtonRelease,89
9662:          	global	_ButtonPress
9663:          
9664:          ;; *************** function _ButtonPress *****************
9665:          ;; Defined at:
9666:          ;;		line 301 in file "main.c"
9667:          ;; Parameters:    Size  Location     Type
9668:          ;;		None
9669:          ;; Auto vars:     Size  Location     Type
9670:          ;;		None
9671:          ;; Return value:  Size  Location     Type
9672:          ;;                  1    wreg      void 
9673:          ;; Registers used:
9674:          ;;		None
9675:          ;; Tracked objects:
9676:          ;;		On entry : 0/0
9677:          ;;		On exit  : 0/0
9678:          ;;		Unchanged: 0/0
9679:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9680:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9681:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9682:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9683:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9684:          ;;Total ram usage:        0 bytes
9685:          ;; Hardware stack levels used:    1
9686:          ;; Hardware stack levels required when called:    5
9687:          ;; This function calls:
9688:          ;;		Nothing
9689:          ;; This function is called by:
9690:          ;;		_main
9691:          ;;		_CheckButton
9692:          ;; This function uses a non-reentrant model
9693:          ;;
9694:          psect	text29,class=CODE,space=0,reloc=2,group=0
9695:          	line	301
9696:          global __ptext29
9697:          __ptext29:
9698:          psect	text29
9699:          	file	"main.c"
9700:          	line	301
9701:          	global	__size_of_ButtonPress
9702:          	__size_of_ButtonPress	equ	__end_of_ButtonPress-_ButtonPress
9703:          	
9704:          _ButtonPress:
9705:          ;incstack = 0
9706:          	opt	stack 24
9707:          	line	304
9708:          	
9709:          l216:
9710:          	return	;funcret
9711:          	opt stack 0
9712:          GLOBAL	__end_of_ButtonPress
9713:          	__end_of_ButtonPress:
9714:          	signat	_ButtonPress,89
9715:          	global	_ButtonHold
9716:          
9717:          ;; *************** function _ButtonHold *****************
9718:          ;; Defined at:
9719:          ;;		line 306 in file "main.c"
9720:          ;; Parameters:    Size  Location     Type
9721:          ;;		None
9722:          ;; Auto vars:     Size  Location     Type
9723:          ;;		None
9724:          ;; Return value:  Size  Location     Type
9725:          ;;                  1    wreg      void 
9726:          ;; Registers used:
9727:          ;;		None
9728:          ;; Tracked objects:
9729:          ;;		On entry : 0/0
9730:          ;;		On exit  : 0/0
9731:          ;;		Unchanged: 0/0
9732:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9733:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9734:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9735:          ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9736:          ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9737:          ;;Total ram usage:        0 bytes
9738:          ;; Hardware stack levels used:    1
9739:          ;; Hardware stack levels required when called:    5
9740:          ;; This function calls:
9741:          ;;		Nothing
9742:          ;; This function is called by:
9743:          ;;		_main
9744:          ;;		_CheckButton
9745:          ;; This function uses a non-reentrant model
9746:          ;;
9747:          psect	text30,class=CODE,space=0,reloc=2,group=0
9748:          	line	306
9749:          global __ptext30
9750:          __ptext30:
9751:          psect	text30
9752:          	file	"main.c"
9753:          	line	306
9754:          	global	__size_of_ButtonHold
9755:          	__size_of_ButtonHold	equ	__end_of_ButtonHold-_ButtonHold
9756:          	
9757:          _ButtonHold:
9758:          ;incstack = 0
9759:          	opt	stack 24
9760:          	line	309
9761:          	
9762:          l219:
9763:          	return	;funcret
9764:          	opt stack 0
9765:          GLOBAL	__end_of_ButtonHold
9766:          	__end_of_ButtonHold:
9767:          	signat	_ButtonHold,89
9768:          	global	_ButtonInfoCreate
9769:          
9770:          ;; *************** function _ButtonInfoCreate *****************
9771:          ;; Defined at:
9772:          ;;		line 16 in file "button.c"
9773:          ;; Parameters:    Size  Location     Type
9774:          ;;  pressAction     3   25[COMRAM] PTR FTN()void 
9775:          ;;		 -> ButtonPress(1), 
9776:          ;;  holdAction      3   28[COMRAM] PTR FTN()void 
9777:          ;;		 -> ButtonHold(1), 
9778:          ;;  releaseActio    3   31[COMRAM] PTR FTN()void 
9779:          ;;		 -> ButtonRelease(1), 
9780:          ;;  activeLogicL    1   34[COMRAM] unsigned char 
9781:          ;; Auto vars:     Size  Location     Type
9782:          ;;  button         15   41[COMRAM] struct _ButtonInfo
9783:          ;; Return value:  Size  Location     Type
9784:          ;;                  15   25[COMRAM] struct _ButtonInfo
9785:          ;; Registers used:
9786:          ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
9787:          ;; Tracked objects:
9788:          ;;		On entry : 3F/F
9789:          ;;		On exit  : 0/0
9790:          ;;		Unchanged: 0/0
9791:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9792:          ;;      Params:        15       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9793:          ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9794:          ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9795:          ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9796:          ;;Total ram usage:       31 bytes
9797:          ;; Hardware stack levels used:    1
9798:          ;; Hardware stack levels required when called:    5
9799:          ;; This function calls:
9800:          ;;		Nothing
9801:          ;; This function is called by:
9802:          ;;		_main
9803:          ;; This function uses a non-reentrant model
9804:          ;;
9805:          psect	text31,class=CODE,space=0,reloc=2,group=0
9806:          	file	"button.c"
9807:          	line	16
9808:          global __ptext31
9809:          __ptext31:
9810:          psect	text31
9811:          	file	"button.c"
9812:          	line	16
9813:          	global	__size_of_ButtonInfoCreate
9814:          	__size_of_ButtonInfoCreate	equ	__end_of_ButtonInfoCreate-_ButtonInfoCreate
9815:          	
9816:          _ButtonInfoCreate:
9817:          ;incstack = 0
9818:          	opt	stack 25
9819:          	line	19
9820:          	
9821:          l2162:; BSR set to: 15
9822:          
9823:          ;button.c: 18: ButtonInfo button;
9824:          ;button.c: 19: button.currentLogicLevel = !activeLogicLevel;
9825:          	movf	((c:ButtonInfoCreate@activeLogicLevel)),c,w
9826:          	btfsc	status,2
9827:          	goto	u1521
9828:          	goto	u1520
9829:          u1521:
9830:          	clrf	(??_ButtonInfoCreate+0+0)&0ffh,c
9831:          	incf	(??_ButtonInfoCreate+0+0)&0ffh,c
9832:          	goto	u1538
9833:          u1520:
9834:          	clrf	(??_ButtonInfoCreate+0+0)&0ffh,c
9835:          u1538:
9836:          	rlncf	(??_ButtonInfoCreate+0+0),c
9837:          	rlncf	(??_ButtonInfoCreate+0+0),c
9838:          	movf	(0+((c:ButtonInfoCreate@button)+05h)),c,w
9839:          	xorwf	(??_ButtonInfoCreate+0+0),c,w
9840:          	andlw	not (((1<<1)-1)<<2)
9841:          	xorwf	(??_ButtonInfoCreate+0+0),c,w
9842:          	movwf	(0+((c:ButtonInfoCreate@button)+05h)),c
9843:          	line	20
9844:          ;button.c: 20: button.previousLogicLevel = !activeLogicLevel;
9845:          	movf	((c:ButtonInfoCreate@activeLogicLevel)),c,w
9846:          	btfsc	status,2
9847:          	goto	u1541
9848:          	goto	u1540
9849:          u1541:
9850:          	clrf	(??_ButtonInfoCreate+0+0)&0ffh,c
9851:          	incf	(??_ButtonInfoCreate+0+0)&0ffh,c
9852:          	goto	u1558
9853:          u1540:
9854:          	clrf	(??_ButtonInfoCreate+0+0)&0ffh,c
9855:          u1558:
9856:          	rlncf	(??_ButtonInfoCreate+0+0),c
9857:          	rlncf	(??_ButtonInfoCreate+0+0),c
9858:          	rlncf	(??_ButtonInfoCreate+0+0),c
9859:          	movf	(0+((c:ButtonInfoCreate@button)+05h)),c,w
9860:          	xorwf	(??_ButtonInfoCreate+0+0),c,w
9861:          	andlw	not (((1<<1)-1)<<3)
9862:          	xorwf	(??_ButtonInfoCreate+0+0),c,w
9863:          	movwf	(0+((c:ButtonInfoCreate@button)+05h)),c
9864:          	line	21
9865:          	
9866:          l2164:
9867:          ;button.c: 21: button.currentState = BTN_RELEASE;
9868:          	movlw	low(02h)
9869:          	movwf	(0+((c:ButtonInfoCreate@button)+04h)),c
9870:          	line	22
9871:          	
9872:          l2166:
9873:          ;button.c: 22: button.isDebouncing = 0;
9874:          	bcf	(0+((c:ButtonInfoCreate@button)+05h)),c,0
9875:          	line	23
9876:          	
9877:          l2168:
9878:          ;button.c: 23: button.isUnhandled = 0;
9879:          	bcf	(0+((c:ButtonInfoCreate@button)+05h)),c,1
9880:          	line	24
9881:          	
9882:          l2170:
9883:          ;button.c: 24: button.timestamp = 0;
9884:          	clrf	((c:ButtonInfoCreate@button)),c
9885:          	clrf	((c:ButtonInfoCreate@button+1)),c
9886:          	clrf	((c:ButtonInfoCreate@button+2)),c
9887:          	clrf	((c:ButtonInfoCreate@button+3)),c
9888:          
9889:          	line	25
9890:          	
9891:          l2172:
9892:          ;button.c: 25: button.pressAction = pressAction;
9893:          		movff	(c:ButtonInfoCreate@pressAction),0+((c:ButtonInfoCreate@button)+06h)
9894:          	movff	(c:ButtonInfoCreate@pressAction+1),1+((c:ButtonInfoCreate@button)+06h)
9895:          	movff	(c:ButtonInfoCreate@pressAction+2),2+((c:ButtonInfoCreate@button)+06h)
9896:          
9897:          	line	26
9898:          	
9899:          l2174:
9900:          ;button.c: 26: button.holdAction = holdAction;
9901:          		movff	(c:ButtonInfoCreate@holdAction),0+((c:ButtonInfoCreate@button)+09h)
9902:          	movff	(c:ButtonInfoCreate@holdAction+1),1+((c:ButtonInfoCreate@button)+09h)
9903:          	movff	(c:ButtonInfoCreate@holdAction+2),2+((c:ButtonInfoCreate@button)+09h)
9904:          
9905:          	line	27
9906:          	
9907:          l2176:
9908:          ;button.c: 27: button.releaseAction = releaseAction;
9909:          		movff	(c:ButtonInfoCreate@releaseAction),0+((c:ButtonInfoCreate@button)+0Ch)
9910:          	movff	(c:ButtonInfoCreate@releaseAction+1),1+((c:ButtonInfoCreate@button)+0Ch)
9911:          	movff	(c:ButtonInfoCreate@releaseAction+2),2+((c:ButtonInfoCreate@button)+0Ch)
9912:          
9913:          	line	28
9914:          	
9915:          l2178:
9916:          ;button.c: 28: return button;
9917:          	lfsr	2,(ButtonInfoCreate@button)
9918:          	lfsr	0,(?_ButtonInfoCreate)
9919:          	movlw	15-1
9920:          u1561:
9921:          	movff	plusw2,plusw0
9922:          	decf	wreg
9923:          	bc	u1561
9924:          
9925:          	line	29
9926:          	
9927:          l303:
9928:          	return	;funcret
9929:          	opt stack 0
9930:          GLOBAL	__end_of_ButtonInfoCreate
9931:          	__end_of_ButtonInfoCreate:
9932:          	signat	_ButtonInfoCreate,16511
9933:          	global	_isrLowPriority
9934:          
9935:          ;; *************** function _isrLowPriority *****************
9936:          ;; Defined at:
9937:          ;;		line 32 in file "interrupt.c"
9938:          ;; Parameters:    Size  Location     Type
9939:          ;;		None
9940:          ;; Auto vars:     Size  Location     Type
9941:          ;;		None
9942:          ;; Return value:  Size  Location     Type
9943:          ;;                  1    wreg      void 
9944:          ;; Registers used:
9945:          ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
9946:          ;; Tracked objects:
9947:          ;;		On entry : 0/0
9948:          ;;		On exit  : 0/0
9949:          ;;		Unchanged: 0/0
9950:          ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
9951:          ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9952:          ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9953:          ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9954:          ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
9955:          ;;Total ram usage:        7 bytes
9956:          ;; Hardware stack levels used:    1
9957:          ;; Hardware stack levels required when called:    4
9958:          ;; This function calls:
9959:          ;;		i1_RingBufferDequeue
9960:          ;;		i1_RingBufferEnqueue
9961:          ;; This function is called by:
9962:          ;;		Interrupt level 1
9963:          ;; This function uses a non-reentrant model
9964:          ;;
9965:          psect	intcodelo,class=CODE,space=0,reloc=2
9966:          global __pintcodelo
9967:          __pintcodelo:
9968:          psect	intcodelo
9969:          	file	"interrupt.c"
9970:          	line	32
9971:          	global	__size_of_isrLowPriority
9972:          	__size_of_isrLowPriority	equ	__end_of_isrLowPriority-_isrLowPriority
9973:          	
9974:          _isrLowPriority:
9975:          ;incstack = 0
9976:          	opt	stack 21
9977:          	bsf int$flags,0,c ;set compiler interrupt flag (level 1)
9978:          	movff	status+0,??_isrLowPriority+0
9979:          	movff	wreg+0,??_isrLowPriority+1
9980:          	movff	bsr+0,??_isrLowPriority+2
9981:          	movff	fsr1l+0,??_isrLowPriority+3
9982:          	movff	fsr1h+0,??_isrLowPriority+4
9983:          	movff	fsr2l+0,??_isrLowPriority+5
9984:          	movff	fsr2h+0,??_isrLowPriority+6
9985:          	line	34
9986:          	
9987:          i1l2568:
9988:          ;interrupt.c: 34: if(PIR3bits.SSP2IF)
9989:          	btfss	((c:4004)),c,7	;volatile
9990:          	goto	i1u226_21
9991:          	goto	i1u226_20
9992:          i1u226_21:
9993:          	goto	i1l275
9994:          i1u226_20:
9995:          	line	36
9996:          	
9997:          i1l2570:
9998:          ;interrupt.c: 35: {
9999:          ;interrupt.c: 36: if(_sramStatus.statusBits.isBusyRead)
10000:         	movlb	0	; () banked
10001:         	btfss	((__sramStatus))&0ffh,0	;volatile
10002:         	goto	i1u227_21
10003:         	goto	i1u227_20
10004:         i1u227_21:
10005:         	goto	i1l276
10006:         i1u227_20:
10007:         	line	38
10008:         	
10009:         i1l2572:; BSR set to: 0
10010:         
10011:         ;interrupt.c: 37: {
10012:         ;interrupt.c: 38: LATBbits.LATB3 = 1;
10013:         	bsf	((c:3978)),c,3	;volatile
10014:         	line	39
10015:         	
10016:         i1l2574:; BSR set to: 0
10017:         
10018:         ;interrupt.c: 39: _sramStatus.readAddress += _sramStatus.dataLength;
10019:         	lfsr	2,(__sramStatus)+01h	;volatile
10020:         	movf	postinc2,w
10021:         	addwf	(0+(__sramStatus+04h))&0ffh	;volatile
10022:         	movf	postinc2,w
10023:         	addwfc	(1+(__sramStatus+04h))&0ffh	;volatile
10024:         	movf	postdec2,w
10025:         	addwfc	(2+(__sramStatus+04h))&0ffh	;volatile
10026:         
10027:         	line	40
10028:         	
10029:         i1l2576:; BSR set to: 0
10030:         
10031:         ;interrupt.c: 40: if(_sramStatus.readAddress >= 0x20000)
10032:         		movlw	2
10033:         	subwf	 (2+(__sramStatus+04h))&0ffh,w	;volatile
10034:         	btfss	status,0
10035:         	goto	i1u228_21
10036:         	goto	i1u228_20
10037:         
10038:         i1u228_21:
10039:         	goto	i1l277
10040:         i1u228_20:
10041:         	line	41
10042:         	
10043:         i1l2578:; BSR set to: 0
10044:         
10045:         ;interrupt.c: 41: _sramStatus.readAddress = 0;
10046:         	clrf	(0+(__sramStatus+04h))&0ffh	;volatile
10047:         	clrf	(1+(__sramStatus+04h))&0ffh	;volatile
10048:         	clrf	(2+(__sramStatus+04h))&0ffh	;volatile
10049:         
10050:         	
10051:         i1l277:; BSR set to: 0
10052:         
10053:         	line	42
10054:         ;interrupt.c: 42: _sramStatus.statusBits.hasUnreadData = 1;
10055:         	bsf	((__sramStatus))&0ffh,7	;volatile
10056:         	line	43
10057:         ;interrupt.c: 43: _sramStatus.statusBits.isBusyRead = 0;
10058:         	bcf	((__sramStatus))&0ffh,0	;volatile
10059:         	line	44
10060:         ;interrupt.c: 44: }
10061:         	goto	i1l278
10062:         	line	45
10063:         	
10064:         i1l276:; BSR set to: 0
10065:         
10066:         ;interrupt.c: 45: else if(_sramStatus.statusBits.isBusyWrite)
10067:         	btfss	((__sramStatus))&0ffh,1	;volatile
10068:         	goto	i1u229_21
10069:         	goto	i1u229_20
10070:         i1u229_21:
10071:         	goto	i1l279
10072:         i1u229_20:
10073:         	line	47
10074:         	
10075:         i1l2580:; BSR set to: 0
10076:         
10077:         ;interrupt.c: 46: {
10078:         ;interrupt.c: 47: LATBbits.LATB3 = 1;
10079:         	bsf	((c:3978)),c,3	;volatile
10080:         	line	48
10081:         	
10082:         i1l2582:; BSR set to: 0
10083:         
10084:         ;interrupt.c: 48: _sramStatus.writeAddress += _sramStatus.dataLength;
10085:         	lfsr	2,(__sramStatus)+01h	;volatile
10086:         	movf	postinc2,w
10087:         	addwf	(0+(__sramStatus+07h))&0ffh	;volatile
10088:         	movf	postinc2,w
10089:         	addwfc	(1+(__sramStatus+07h))&0ffh	;volatile
10090:         	movf	postdec2,w
10091:         	addwfc	(2+(__sramStatus+07h))&0ffh	;volatile
10092:         
10093:         	line	49
10094:         	
10095:         i1l2584:; BSR set to: 0
10096:         
10097:         ;interrupt.c: 49: if(_sramStatus.writeAddress >= 0x20000)
10098:         		movlw	2
10099:         	subwf	 (2+(__sramStatus+07h))&0ffh,w	;volatile
10100:         	btfss	status,0
10101:         	goto	i1u230_21
10102:         	goto	i1u230_20
10103:         
10104:         i1u230_21:
10105:         	goto	i1l280
10106:         i1u230_20:
10107:         	line	50
10108:         	
10109:         i1l2586:; BSR set to: 0
10110:         
10111:         ;interrupt.c: 50: _sramStatus.writeAddress = 0;
10112:         	clrf	(0+(__sramStatus+07h))&0ffh	;volatile
10113:         	clrf	(1+(__sramStatus+07h))&0ffh	;volatile
10114:         	clrf	(2+(__sramStatus+07h))&0ffh	;volatile
10115:         
10116:         	
10117:         i1l280:; BSR set to: 0
10118:         
10119:         	line	51
10120:         ;interrupt.c: 51: _sramStatus.statusBits.isBusyWrite = 0;
10121:         	bcf	((__sramStatus))&0ffh,1	;volatile
10122:         	line	52
10123:         ;interrupt.c: 52: }
10124:         	goto	i1l278
10125:         	line	53
10126:         	
10127:         i1l279:; BSR set to: 0
10128:         
10129:         ;interrupt.c: 53: else if(_sramStatus.statusBits.isBusyFill)
10130:         	btfss	((__sramStatus))&0ffh,2	;volatile
10131:         	goto	i1u231_21
10132:         	goto	i1u231_20
10133:         i1u231_21:
10134:         	goto	i1l282
10135:         i1u231_20:
10136:         	line	55
10137:         	
10138:         i1l2588:; BSR set to: 0
10139:         
10140:         ;interrupt.c: 54: {
10141:         ;interrupt.c: 55: if(_sramStatus.statusBits.isContinuousFill && _sramStatus.dataLength == 0)
10142:         	btfss	((__sramStatus))&0ffh,6	;volatile
10143:         	goto	i1u232_21
10144:         	goto	i1u232_20
10145:         i1u232_21:
10146:         	goto	i1l283
10147:         i1u232_20:
10148:         	
10149:         i1l2590:; BSR set to: 0
10150:         
10151:         	movf	(0+(__sramStatus+01h))&0ffh,w	;volatile
10152:         iorwf	(1+(__sramStatus+01h))&0ffh,w	;volatile
10153:         iorwf	(2+(__sramStatus+01h))&0ffh,w	;volatile
10154:         	btfss	status,2
10155:         	goto	i1u233_21
10156:         	goto	i1u233_20
10157:         
10158:         i1u233_21:
10159:         	goto	i1l283
10160:         i1u233_20:
10161:         	line	57
10162:         	
10163:         i1l2592:; BSR set to: 0
10164:         
10165:         ;interrupt.c: 56: {
10166:         ;interrupt.c: 57: LATBbits.LATB3 = 1;
10167:         	bsf	((c:3978)),c,3	;volatile
10168:         	line	58
10169:         ;interrupt.c: 58: DMACON1bits.DUPLEX1 = 1;
10170:         	bsf	((c:3976)),c,3	;volatile
10171:         	line	59
10172:         ;interrupt.c: 59: DMACON1bits.DUPLEX0 = 0;
10173:         	bcf	((c:3976)),c,2	;volatile
10174:         	line	60
10175:         ;interrupt.c: 60: DMACON1bits.TXINC = 1;
10176:         	bsf	((c:3976)),c,5	;volatile
10177:         	line	61
10178:         ;interrupt.c: 61: _sramStatus.statusBits.isContinuousFill = 0;
10179:         	bcf	((__sramStatus))&0ffh,6	;volatile
10180:         	line	62
10181:         	
10182:         i1l283:; BSR set to: 0
10183:         
10184:         	line	63
10185:         ;interrupt.c: 62: }
10186:         ;interrupt.c: 63: _sramStatus.statusBits.isBusyFill = 0;
10187:         	bcf	((__sramStatus))&0ffh,2	;volatile
10188:         	line	64
10189:         ;interrupt.c: 64: }
10190:         	goto	i1l278
10191:         	line	65
10192:         	
10193:         i1l282:; BSR set to: 0
10194:         
10195:         ;interrupt.c: 65: else if(_sramStatus.statusBits.isBusyMode)
10196:         	btfss	((__sramStatus))&0ffh,3	;volatile
10197:         	goto	i1u234_21
10198:         	goto	i1u234_20
10199:         i1u234_21:
10200:         	goto	i1l278
10201:         i1u234_20:
10202:         	line	67
10203:         	
10204:         i1l2594:; BSR set to: 0
10205:         
10206:         ;interrupt.c: 66: {
10207:         ;interrupt.c: 67: LATBbits.LATB3 = 1;
10208:         	bsf	((c:3978)),c,3	;volatile
10209:         	line	68
10210:         ;interrupt.c: 68: _sramStatus.statusBits.isBusyWrite = 0;
10211:         	bcf	((__sramStatus))&0ffh,1	;volatile
10212:         	line	70
10213:         	
10214:         i1l278:; BSR set to: 0
10215:         
10216:         ;interrupt.c: 69: }
10217:         ;interrupt.c: 70: PIR3bits.SSP2IF = 0;
10218:         	bcf	((c:4004)),c,7	;volatile
10219:         	line	71
10220:         	
10221:         i1l275:
10222:         	line	72
10223:         ;interrupt.c: 71: }
10224:         ;interrupt.c: 72: if(PIR1bits.RC1IF)
10225:         	btfss	((c:3998)),c,5	;volatile
10226:         	goto	i1u235_21
10227:         	goto	i1u235_20
10228:         i1u235_21:
10229:         	goto	i1l2598
10230:         i1u235_20:
10231:         	line	74
10232:         	
10233:         i1l2596:
10234:         ;interrupt.c: 73: {
10235:         ;interrupt.c: 74: RingBufferEnqueue(&_rxBuffer1, RCREG1);
10236:         		movlw	low(__rxBuffer1)
10237:         	movwf	((c:i1RingBufferEnqueue@buffer)),c
10238:         
10239:         	movff	(c:4015),(c:i1RingBufferEnqueue@data)	;volatile
10240:         	call	i1_RingBufferEnqueue	;wreg free
10241:         	line	76
10242:         	
10243:         i1l2598:
10244:         ;interrupt.c: 75: }
10245:         ;interrupt.c: 76: if(PIR3bits.RC2IF)
10246:         	btfss	((c:4004)),c,5	;volatile
10247:         	goto	i1u236_21
10248:         	goto	i1u236_20
10249:         i1u236_21:
10250:         	goto	i1l2602
10251:         i1u236_20:
10252:         	line	78
10253:         	
10254:         i1l2600:
10255:         ;interrupt.c: 77: {
10256:         ;interrupt.c: 78: RingBufferEnqueue(&_rxBuffer2, RCREG2);
10257:         		movlw	low(__rxBuffer2)
10258:         	movwf	((c:i1RingBufferEnqueue@buffer)),c
10259:         
10260:         	movff	(c:4010),(c:i1RingBufferEnqueue@data)	;volatile
10261:         	call	i1_RingBufferEnqueue	;wreg free
10262:         	line	80
10263:         	
10264:         i1l2602:
10265:         ;interrupt.c: 79: }
10266:         ;interrupt.c: 80: if(PIR1bits.TX1IF)
10267:         	btfss	((c:3998)),c,4	;volatile
10268:         	goto	i1u237_21
10269:         	goto	i1u237_20
10270:         i1u237_21:
10271:         	goto	i1l2610
10272:         i1u237_20:
10273:         	line	82
10274:         	
10275:         i1l2604:
10276:         ;interrupt.c: 81: {
10277:         ;interrupt.c: 82: if(_txBuffer1.length == 0)
10278:         	movf	(0+((c:__txBuffer1)+01h)),c,w	;volatile
10279:         	btfss	status,2
10280:         	goto	i1u238_21
10281:         	goto	i1u238_20
10282:         i1u238_21:
10283:         	goto	i1l2608
10284:         i1u238_20:
10285:         	line	83
10286:         	
10287:         i1l2606:
10288:         ;interrupt.c: 83: PIE1bits.TX1IE = 0;
10289:         	bcf	((c:3997)),c,4	;volatile
10290:         	goto	i1l2610
10291:         	line	85
10292:         	
10293:         i1l2608:
10294:         ;interrupt.c: 84: else
10295:         ;interrupt.c: 85: TXREG1 = RingBufferDequeue(&_txBuffer1);
10296:         		movlw	low(__txBuffer1)
10297:         	movwf	((c:i1RingBufferDequeue@buffer)),c
10298:         
10299:         	call	i1_RingBufferDequeue	;wreg free
10300:         	movwf	((c:4014)),c	;volatile
10301:         	line	87
10302:         	
10303:         i1l2610:
10304:         ;interrupt.c: 86: }
10305:         ;interrupt.c: 87: if(PIR3bits.TX2IF)
10306:         	btfss	((c:4004)),c,4	;volatile
10307:         	goto	i1u239_21
10308:         	goto	i1u239_20
10309:         i1u239_21:
10310:         	goto	i1l294
10311:         i1u239_20:
10312:         	line	89
10313:         	
10314:         i1l2612:
10315:         ;interrupt.c: 88: {
10316:         ;interrupt.c: 89: if(_txBuffer2.length == 0)
10317:         	movf	(0+((c:__txBuffer2)+01h)),c,w	;volatile
10318:         	btfss	status,2
10319:         	goto	i1u240_21
10320:         	goto	i1u240_20
10321:         i1u240_21:
10322:         	goto	i1l2616
10323:         i1u240_20:
10324:         	line	90
10325:         	
10326:         i1l2614:
10327:         ;interrupt.c: 90: PIE3bits.TX2IE = 0;
10328:         	bcf	((c:4003)),c,4	;volatile
10329:         	goto	i1l294
10330:         	line	92
10331:         	
10332:         i1l2616:
10333:         ;interrupt.c: 91: else
10334:         ;interrupt.c: 92: TXREG2 = RingBufferDequeue(&_txBuffer2);
10335:         		movlw	low(__txBuffer2)
10336:         	movwf	((c:i1RingBufferDequeue@buffer)),c
10337:         
10338:         	call	i1_RingBufferDequeue	;wreg free
10339:         	movwf	((c:4009)),c	;volatile
10340:         	line	95
10341:         	
10342:         i1l294:
10343:         	movff	??_isrLowPriority+6,fsr2h+0
10344:         	movff	??_isrLowPriority+5,fsr2l+0
10345:         	movff	??_isrLowPriority+4,fsr1h+0
10346:         	movff	??_isrLowPriority+3,fsr1l+0
10347:         	movff	??_isrLowPriority+2,bsr+0
10348:         	movff	??_isrLowPriority+1,wreg+0
10349:         	movff	??_isrLowPriority+0,status+0
10350:         	bcf int$flags,0,c ;clear compiler interrupt flag (level 1)
10351:         	retfie
10352:         	opt stack 0
10353:         GLOBAL	__end_of_isrLowPriority
10354:         	__end_of_isrLowPriority:
10355:         	signat	_isrLowPriority,89
10356:         	global	i1_RingBufferEnqueue
10357:         
10358:         ;; *************** function i1_RingBufferEnqueue *****************
10359:         ;; Defined at:
10360:         ;;		line 30 in file "serial_comm.c"
10361:         ;; Parameters:    Size  Location     Type
10362:         ;;  buffer          1   13[COMRAM] PTR volatile struct _Rin
10363:         ;;		 -> _rxBuffer2(6), _rxBuffer1(6), _txBuffer2(6), _txBuffer1(6), 
10364:         ;;  data            1   14[COMRAM] unsigned char 
10365:         ;; Auto vars:     Size  Location     Type
10366:         ;;		None
10367:         ;; Return value:  Size  Location     Type
10368:         ;;                  1    wreg      void 
10369:         ;; Registers used:
10370:         ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
10371:         ;; Tracked objects:
10372:         ;;		On entry : 0/0
10373:         ;;		On exit  : 0/0
10374:         ;;		Unchanged: 0/0
10375:         ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
10376:         ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10377:         ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10378:         ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10379:         ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10380:         ;;Total ram usage:        5 bytes
10381:         ;; Hardware stack levels used:    1
10382:         ;; Hardware stack levels required when called:    3
10383:         ;; This function calls:
10384:         ;;		i1___awmod
10385:         ;; This function is called by:
10386:         ;;		_isrLowPriority
10387:         ;; This function uses a non-reentrant model
10388:         ;;
10389:         psect	text33,class=CODE,space=0,reloc=2,group=0
10390:         	file	"serial_comm.c"
10391:         	line	30
10392:         global __ptext33
10393:         __ptext33:
10394:         psect	text33
10395:         	file	"serial_comm.c"
10396:         	line	30
10397:         	global	__size_ofi1_RingBufferEnqueue
10398:         	__size_ofi1_RingBufferEnqueue	equ	__end_ofi1_RingBufferEnqueue-i1_RingBufferEnqueue
10399:         	
10400:         i1_RingBufferEnqueue:
10401:         ;incstack = 0
10402:         	opt	stack 21
10403:         	line	32
10404:         	
10405:         i1l2414:
10406:         ;serial_comm.c: 32: buffer->head = (buffer->head + 1) % buffer->bufferSize;
10407:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10408:         	movwf	fsr2l
10409:         	clrf	fsr2h
10410:         	movlw	low(02h)
10411:         	addwf	fsr2l
10412:         
10413:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10414:         	movwf	fsr1l
10415:         	clrf	fsr1h
10416:         	movlw	low(02h)
10417:         	addwf	fsr1l
10418:         
10419:         	movf	indf1,w
10420:         	movwf	(??i1_RingBufferEnqueue+0+0)&0ffh,c
10421:         	movlw	low(01h)
10422:         	addwf	((??i1_RingBufferEnqueue+0+0)),c,w
10423:         	movwf	((c:i1___awmod@dividend)),c
10424:         	clrf	1+((c:i1___awmod@dividend)),c
10425:         	movlw	high(01h)
10426:         	addwfc	1+((c:i1___awmod@dividend)),c
10427:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10428:         	movwf	fsr1l
10429:         	clrf	fsr1h
10430:         	movf	indf1,w
10431:         	movwf	((c:i1___awmod@divisor)),c
10432:         	clrf	((c:i1___awmod@divisor+1)),c
10433:         	call	i1___awmod	;wreg free
10434:         	movf	(0+?i1___awmod),c,w
10435:         	movwf	indf2,c
10436:         
10437:         	line	33
10438:         	
10439:         i1l2416:
10440:         ;serial_comm.c: 33: buffer->data[buffer->head] = data;
10441:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10442:         	movwf	fsr2l
10443:         	clrf	fsr2h
10444:         	movlw	low(02h)
10445:         	addwf	fsr2l
10446:         
10447:         	movf	indf2,w
10448:         	movwf	(??i1_RingBufferEnqueue+0+0)&0ffh,c
10449:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10450:         	movwf	fsr2l
10451:         	clrf	fsr2h
10452:         	movlw	low(04h)
10453:         	addwf	fsr2l
10454:         
10455:         	movff	postinc2,??i1_RingBufferEnqueue+1+0
10456:         	movff	postdec2,??i1_RingBufferEnqueue+1+0+1
10457:         	movf	((??i1_RingBufferEnqueue+0+0)),c,w
10458:         	addwf	(??i1_RingBufferEnqueue+1+0),c,w
10459:         	movwf	c:fsr2l
10460:         	movlw	0
10461:         	addwfc	(??i1_RingBufferEnqueue+1+1),c,w
10462:         	movwf	1+c:fsr2l
10463:         	movff	(c:i1RingBufferEnqueue@data),indf2
10464:         
10465:         	line	34
10466:         	
10467:         i1l2418:
10468:         ;serial_comm.c: 34: if(buffer->length == buffer->bufferSize)
10469:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10470:         	movwf	fsr2l
10471:         	clrf	fsr2h
10472:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10473:         	movwf	fsr1l
10474:         	clrf	fsr1h
10475:         	movlw	low(01h)
10476:         	addwf	fsr1l
10477:         
10478:         	movf	postinc2,w
10479:         xorwf	postinc1,w
10480:         	btfss	status,2
10481:         	goto	i1u200_21
10482:         	goto	i1u200_20
10483:         
10484:         i1u200_21:
10485:         	goto	i1l2422
10486:         i1u200_20:
10487:         	line	35
10488:         	
10489:         i1l2420:
10490:         ;serial_comm.c: 35: buffer->tail = (buffer->tail + 1) % buffer->bufferSize;
10491:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10492:         	movwf	fsr2l
10493:         	clrf	fsr2h
10494:         	movlw	low(03h)
10495:         	addwf	fsr2l
10496:         
10497:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10498:         	movwf	fsr1l
10499:         	clrf	fsr1h
10500:         	movlw	low(03h)
10501:         	addwf	fsr1l
10502:         
10503:         	movf	indf1,w
10504:         	movwf	(??i1_RingBufferEnqueue+0+0)&0ffh,c
10505:         	movlw	low(01h)
10506:         	addwf	((??i1_RingBufferEnqueue+0+0)),c,w
10507:         	movwf	((c:i1___awmod@dividend)),c
10508:         	clrf	1+((c:i1___awmod@dividend)),c
10509:         	movlw	high(01h)
10510:         	addwfc	1+((c:i1___awmod@dividend)),c
10511:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10512:         	movwf	fsr1l
10513:         	clrf	fsr1h
10514:         	movf	indf1,w
10515:         	movwf	((c:i1___awmod@divisor)),c
10516:         	clrf	((c:i1___awmod@divisor+1)),c
10517:         	call	i1___awmod	;wreg free
10518:         	movf	(0+?i1___awmod),c,w
10519:         	movwf	indf2,c
10520:         
10521:         	goto	i1l419
10522:         	line	37
10523:         	
10524:         i1l2422:
10525:         ;serial_comm.c: 36: else
10526:         ;serial_comm.c: 37: buffer->length++;
10527:         	movf	((c:i1RingBufferEnqueue@buffer)),c,w
10528:         	movwf	fsr2l
10529:         	clrf	fsr2h
10530:         	movlw	low(01h)
10531:         	addwf	fsr2l
10532:         
10533:         	incf	indf2
10534:         
10535:         	line	38
10536:         	
10537:         i1l419:
10538:         	return	;funcret
10539:         	opt stack 0
10540:         GLOBAL	__end_ofi1_RingBufferEnqueue
10541:         	__end_ofi1_RingBufferEnqueue:
10542:         	signat	i1_RingBufferEnqueue,89
10543:         	global	i1_RingBufferDequeue
10544:         
10545:         ;; *************** function i1_RingBufferDequeue *****************
10546:         ;; Defined at:
10547:         ;;		line 40 in file "serial_comm.c"
10548:         ;; Parameters:    Size  Location     Type
10549:         ;;  buffer          1   13[COMRAM] PTR volatile struct _Rin
10550:         ;;		 -> _rxBuffer2(6), _rxBuffer1(6), _txBuffer2(6), _txBuffer1(6), 
10551:         ;; Auto vars:     Size  Location     Type
10552:         ;;  RingBufferDe    1   17[COMRAM] unsigned char 
10553:         ;; Return value:  Size  Location     Type
10554:         ;;                  1    wreg      unsigned char 
10555:         ;; Registers used:
10556:         ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
10557:         ;; Tracked objects:
10558:         ;;		On entry : 0/0
10559:         ;;		On exit  : 0/0
10560:         ;;		Unchanged: 0/0
10561:         ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
10562:         ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10563:         ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10564:         ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10565:         ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10566:         ;;Total ram usage:        5 bytes
10567:         ;; Hardware stack levels used:    1
10568:         ;; Hardware stack levels required when called:    3
10569:         ;; This function calls:
10570:         ;;		i1___awmod
10571:         ;; This function is called by:
10572:         ;;		_isrLowPriority
10573:         ;; This function uses a non-reentrant model
10574:         ;;
10575:         psect	text34,class=CODE,space=0,reloc=2,group=0
10576:         	line	40
10577:         global __ptext34
10578:         __ptext34:
10579:         psect	text34
10580:         	file	"serial_comm.c"
10581:         	line	40
10582:         	global	__size_ofi1_RingBufferDequeue
10583:         	__size_ofi1_RingBufferDequeue	equ	__end_ofi1_RingBufferDequeue-i1_RingBufferDequeue
10584:         	
10585:         i1_RingBufferDequeue:
10586:         ;incstack = 0
10587:         	opt	stack 21
10588:         	line	42
10589:         	
10590:         i1l2424:
10591:         ;serial_comm.c: 42: if(buffer->length == 0)
10592:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10593:         	movwf	fsr2l
10594:         	clrf	fsr2h
10595:         	movlw	low(01h)
10596:         	addwf	fsr2l
10597:         
10598:         	movf	indf2,w
10599:         	btfss	status,2
10600:         	goto	i1u201_21
10601:         	goto	i1u201_20
10602:         i1u201_21:
10603:         	goto	i1l2430
10604:         i1u201_20:
10605:         	line	43
10606:         	
10607:         i1l2426:
10608:         ;serial_comm.c: 43: return -1;
10609:         	movlw	(0FFh)&0ffh
10610:         	goto	i1l423
10611:         	line	45
10612:         	
10613:         i1l2430:
10614:         ;serial_comm.c: 45: char data = buffer->data[buffer->tail];
10615:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10616:         	movwf	fsr2l
10617:         	clrf	fsr2h
10618:         	movlw	low(03h)
10619:         	addwf	fsr2l
10620:         
10621:         	movf	indf2,w
10622:         	movwf	(??i1_RingBufferDequeue+0+0)&0ffh,c
10623:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10624:         	movwf	fsr2l
10625:         	clrf	fsr2h
10626:         	movlw	low(04h)
10627:         	addwf	fsr2l
10628:         
10629:         	movff	postinc2,??i1_RingBufferDequeue+1+0
10630:         	movff	postdec2,??i1_RingBufferDequeue+1+0+1
10631:         	movf	((??i1_RingBufferDequeue+0+0)),c,w
10632:         	addwf	(??i1_RingBufferDequeue+1+0),c,w
10633:         	movwf	c:fsr2l
10634:         	movlw	0
10635:         	addwfc	(??i1_RingBufferDequeue+1+1),c,w
10636:         	movwf	1+c:fsr2l
10637:         	movf	indf2,w
10638:         	movwf	((c:i1RingBufferDequeue@data)),c
10639:         	line	46
10640:         	
10641:         i1l2432:
10642:         ;serial_comm.c: 46: buffer->tail = (buffer->tail + 1) % buffer->bufferSize;
10643:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10644:         	movwf	fsr2l
10645:         	clrf	fsr2h
10646:         	movlw	low(03h)
10647:         	addwf	fsr2l
10648:         
10649:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10650:         	movwf	fsr1l
10651:         	clrf	fsr1h
10652:         	movlw	low(03h)
10653:         	addwf	fsr1l
10654:         
10655:         	movf	indf1,w
10656:         	movwf	(??i1_RingBufferDequeue+0+0)&0ffh,c
10657:         	movlw	low(01h)
10658:         	addwf	((??i1_RingBufferDequeue+0+0)),c,w
10659:         	movwf	((c:i1___awmod@dividend)),c
10660:         	clrf	1+((c:i1___awmod@dividend)),c
10661:         	movlw	high(01h)
10662:         	addwfc	1+((c:i1___awmod@dividend)),c
10663:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10664:         	movwf	fsr1l
10665:         	clrf	fsr1h
10666:         	movf	indf1,w
10667:         	movwf	((c:i1___awmod@divisor)),c
10668:         	clrf	((c:i1___awmod@divisor+1)),c
10669:         	call	i1___awmod	;wreg free
10670:         	movf	(0+?i1___awmod),c,w
10671:         	movwf	indf2,c
10672:         
10673:         	line	47
10674:         	
10675:         i1l2434:
10676:         ;serial_comm.c: 47: buffer->length--;
10677:         	movf	((c:i1RingBufferDequeue@buffer)),c,w
10678:         	movwf	fsr2l
10679:         	clrf	fsr2h
10680:         	movlw	low(01h)
10681:         	addwf	fsr2l
10682:         
10683:         	decf	indf2
10684:         
10685:         	line	48
10686:         	
10687:         i1l2436:
10688:         ;serial_comm.c: 48: return data;
10689:         	movf	((c:i1RingBufferDequeue@data)),c,w
10690:         	line	49
10691:         	
10692:         i1l423:
10693:         	return	;funcret
10694:         	opt stack 0
10695:         GLOBAL	__end_ofi1_RingBufferDequeue
10696:         	__end_ofi1_RingBufferDequeue:
10697:         	signat	i1_RingBufferDequeue,89
10698:         	global	i1___awmod
10699:         
10700:         ;; *************** function i1___awmod *****************
10701:         ;; Defined at:
10702:         ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
10703:         ;; Parameters:    Size  Location     Type
10704:         ;;  dividend        2    7[COMRAM] int 
10705:         ;;  divisor         2    9[COMRAM] int 
10706:         ;; Auto vars:     Size  Location     Type
10707:         ;;  __awmod         1   12[COMRAM] unsigned char 
10708:         ;;  __awmod         1   11[COMRAM] unsigned char 
10709:         ;; Return value:  Size  Location     Type
10710:         ;;                  2    7[COMRAM] int 
10711:         ;; Registers used:
10712:         ;;		wreg, status,2, status,0
10713:         ;; Tracked objects:
10714:         ;;		On entry : 0/0
10715:         ;;		On exit  : 0/0
10716:         ;;		Unchanged: 0/0
10717:         ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
10718:         ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10719:         ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10720:         ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10721:         ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10722:         ;;Total ram usage:        6 bytes
10723:         ;; Hardware stack levels used:    1
10724:         ;; Hardware stack levels required when called:    2
10725:         ;; This function calls:
10726:         ;;		Nothing
10727:         ;; This function is called by:
10728:         ;;		i1_RingBufferEnqueue
10729:         ;;		i1_RingBufferDequeue
10730:         ;; This function uses a non-reentrant model
10731:         ;;
10732:         psect	text35,class=CODE,space=0,reloc=2,group=0
10733:         	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
10734:         	line	8
10735:         global __ptext35
10736:         __ptext35:
10737:         psect	text35
10738:         	file	"C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
10739:         	line	8
10740:         	global	__size_ofi1___awmod
10741:         	__size_ofi1___awmod	equ	__end_ofi1___awmod-i1___awmod
10742:         	
10743:         i1___awmod:
10744:         ;incstack = 0
10745:         	opt	stack 21
10746:         	line	13
10747:         	
10748:         i1l2038:
10749:         	clrf	((c:i1___awmod@sign)),c
10750:         	line	14
10751:         	
10752:         i1l2040:
10753:         	btfsc	((c:i1___awmod@dividend+1)),c,7
10754:         	goto	i1u146_20
10755:         	goto	i1u146_21
10756:         
10757:         i1u146_21:
10758:         	goto	i1l2046
10759:         i1u146_20:
10760:         	line	15
10761:         	
10762:         i1l2042:
10763:         	negf	((c:i1___awmod@dividend)),c
10764:         	comf	((c:i1___awmod@dividend+1)),c
10765:         	btfsc	status,0
10766:         	incf	((c:i1___awmod@dividend+1)),c
10767:         	line	16
10768:         	
10769:         i1l2044:
10770:         	movlw	low(01h)
10771:         	movwf	((c:i1___awmod@sign)),c
10772:         	line	18
10773:         	
10774:         i1l2046:
10775:         	btfsc	((c:i1___awmod@divisor+1)),c,7
10776:         	goto	i1u147_20
10777:         	goto	i1u147_21
10778:         
10779:         i1u147_21:
10780:         	goto	i1l2050
10781:         i1u147_20:
10782:         	line	19
10783:         	
10784:         i1l2048:
10785:         	negf	((c:i1___awmod@divisor)),c
10786:         	comf	((c:i1___awmod@divisor+1)),c
10787:         	btfsc	status,0
10788:         	incf	((c:i1___awmod@divisor+1)),c
10789:         	line	20
10790:         	
10791:         i1l2050:
10792:         	movf	((c:i1___awmod@divisor)),c,w
10793:         iorwf	((c:i1___awmod@divisor+1)),c,w
10794:         	btfsc	status,2
10795:         	goto	i1u148_21
10796:         	goto	i1u148_20
10797:         
10798:         i1u148_21:
10799:         	goto	i1l2066
10800:         i1u148_20:
10801:         	line	21
10802:         	
10803:         i1l2052:
10804:         	movlw	low(01h)
10805:         	movwf	((c:i1___awmod@counter)),c
10806:         	line	22
10807:         	goto	i1l2056
10808:         	line	23
10809:         	
10810:         i1l2054:
10811:         	bcf	status,0
10812:         	rlcf	((c:i1___awmod@divisor)),c
10813:         	rlcf	((c:i1___awmod@divisor+1)),c
10814:         	line	24
10815:         	incf	((c:i1___awmod@counter)),c
10816:         	line	22
10817:         	
10818:         i1l2056:
10819:         	
10820:         	btfss	((c:i1___awmod@divisor+1)),c,(15)&7
10821:         	goto	i1u149_21
10822:         	goto	i1u149_20
10823:         i1u149_21:
10824:         	goto	i1l2054
10825:         i1u149_20:
10826:         	line	27
10827:         	
10828:         i1l2058:
10829:         		movf	((c:i1___awmod@divisor)),c,w
10830:         	subwf	((c:i1___awmod@dividend)),c,w
10831:         	movf	((c:i1___awmod@divisor+1)),c,w
10832:         	subwfb	((c:i1___awmod@dividend+1)),c,w
10833:         	btfss	status,0
10834:         	goto	i1u150_21
10835:         	goto	i1u150_20
10836:         
10837:         i1u150_21:
10838:         	goto	i1l2062
10839:         i1u150_20:
10840:         	line	28
10841:         	
10842:         i1l2060:
10843:         	movf	((c:i1___awmod@divisor)),c,w
10844:         	subwf	((c:i1___awmod@dividend)),c
10845:         	movf	((c:i1___awmod@divisor+1)),c,w
10846:         	subwfb	((c:i1___awmod@dividend+1)),c
10847:         
10848:         	line	29
10849:         	
10850:         i1l2062:
10851:         	bcf	status,0
10852:         	rrcf	((c:i1___awmod@divisor+1)),c
10853:         	rrcf	((c:i1___awmod@divisor)),c
10854:         	line	30
10855:         	
10856:         i1l2064:
10857:         	decfsz	((c:i1___awmod@counter)),c
10858:         	
10859:         	goto	i1l2058
10860:         	line	32
10861:         	
10862:         i1l2066:
10863:         	movf	((c:i1___awmod@sign)),c,w
10864:         	btfsc	status,2
10865:         	goto	i1u151_21
10866:         	goto	i1u151_20
10867:         i1u151_21:
10868:         	goto	i1l2070
10869:         i1u151_20:
10870:         	line	33
10871:         	
10872:         i1l2068:
10873:         	negf	((c:i1___awmod@dividend)),c
10874:         	comf	((c:i1___awmod@dividend+1)),c
10875:         	btfsc	status,0
10876:         	incf	((c:i1___awmod@dividend+1)),c
10877:         	line	34
10878:         	
10879:         i1l2070:
10880:         	movff	(c:i1___awmod@dividend),(c:?i1___awmod)
10881:         	movff	(c:i1___awmod@dividend+1),(c:?i1___awmod+1)
10882:         	line	35
10883:         	
10884:         i1l699:
10885:         	return	;funcret
10886:         	opt stack 0
10887:         GLOBAL	__end_ofi1___awmod
10888:         	__end_ofi1___awmod:
10889:         	signat	i1___awmod,90
10890:         	global	_isrHighPriority
10891:         
10892:         ;; *************** function _isrHighPriority *****************
10893:         ;; Defined at:
10894:         ;;		line 17 in file "interrupt.c"
10895:         ;; Parameters:    Size  Location     Type
10896:         ;;		None
10897:         ;; Auto vars:     Size  Location     Type
10898:         ;;		None
10899:         ;; Return value:  Size  Location     Type
10900:         ;;                  1    wreg      void 
10901:         ;; Registers used:
10902:         ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
10903:         ;; Tracked objects:
10904:         ;;		On entry : 0/0
10905:         ;;		On exit  : 0/0
10906:         ;;		Unchanged: 0/0
10907:         ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
10908:         ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10909:         ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10910:         ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10911:         ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
10912:         ;;Total ram usage:        4 bytes
10913:         ;; Hardware stack levels used:    1
10914:         ;; Hardware stack levels required when called:    1
10915:         ;; This function calls:
10916:         ;;		_UpdateButtonState
10917:         ;; This function is called by:
10918:         ;;		Interrupt level 2
10919:         ;; This function uses a non-reentrant model
10920:         ;;
10921:         psect	intcode,class=CODE,space=0,reloc=2
10922:         global __pintcode
10923:         __pintcode:
10924:         psect	intcode
10925:         	file	"interrupt.c"
10926:         	line	17
10927:         	global	__size_of_isrHighPriority
10928:         	__size_of_isrHighPriority	equ	__end_of_isrHighPriority-_isrHighPriority
10929:         	
10930:         _isrHighPriority:
10931:         ;incstack = 0
10932:         	opt	stack 21
10933:         	bsf int$flags,1,c ;set compiler interrupt flag (level 2)
10934:         	global	int_func
10935:         	goto	int_func
10936:         psect	intcode_body,class=CODE,space=0,reloc=2
10937:         global __pintcode_body
10938:         __pintcode_body:
10939:         int_func:
10940:         	movff	fsr1l+0,??_isrHighPriority+0
10941:         	movff	fsr1h+0,??_isrHighPriority+1
10942:         	movff	fsr2l+0,??_isrHighPriority+2
10943:         	movff	fsr2h+0,??_isrHighPriority+3
10944:         	line	19
10945:         	
10946:         i2l2556:
10947:         ;interrupt.c: 19: if(PIR3bits.TMR4IF)
10948:         	btfss	((c:4004)),c,3	;volatile
10949:         	goto	i2u224_41
10950:         	goto	i2u224_40
10951:         i2u224_41:
10952:         	goto	i2l269
10953:         i2u224_40:
10954:         	line	21
10955:         	
10956:         i2l2558:
10957:         ;interrupt.c: 20: {
10958:         ;interrupt.c: 21: _tick++;
10959:         	movlw	low(01h)
10960:         	movlb	0	; () banked
10961:         	addwf	((__tick))&0ffh	;volatile
10962:         	movlw	0
10963:         	addwfc	((__tick+1))&0ffh	;volatile
10964:         	addwfc	((__tick+2))&0ffh	;volatile
10965:         	addwfc	((__tick+3))&0ffh	;volatile
10966:         	line	22
10967:         	
10968:         i2l2560:; BSR set to: 0
10969:         
10970:         ;interrupt.c: 22: PIR3bits.TMR4IF = 0;
10971:         	bcf	((c:4004)),c,3	;volatile
10972:         	line	23
10973:         ;interrupt.c: 23: }
10974:         	goto	i2l272
10975:         	line	24
10976:         	
10977:         i2l269:
10978:         ;interrupt.c: 24: else if(INTCON3bits.INT1IF)
10979:         	btfss	((c:4080)),c,0	;volatile
10980:         	goto	i2u225_41
10981:         	goto	i2u225_40
10982:         i2u225_41:
10983:         	goto	i2l272
10984:         i2u225_40:
10985:         	line	26
10986:         	
10987:         i2l2562:
10988:         ;interrupt.c: 25: {
10989:         ;interrupt.c: 26: UpdateButtonState(&_button, PORTAbits.RP2);
10990:         		movlw	low(__button)
10991:         	movwf	((c:UpdateButtonState@buttonInfo)),c
10992:         
10993:         	movlw	0
10994:         	btfsc	((c:3968)),c,5	;volatile
10995:         	movlw	1
10996:         	movwf	((c:UpdateButtonState@currentLogicLevel)),c
10997:         	call	_UpdateButtonState	;wreg free
10998:         	line	27
10999:         	
11000:         i2l2564:
11001:         ;interrupt.c: 27: INTCON3bits.INT1IF = 0;
11002:         	bcf	((c:4080)),c,0	;volatile
11003:         	line	30
11004:         	
11005:         i2l272:
11006:         	movff	??_isrHighPriority+3,fsr2h+0
11007:         	movff	??_isrHighPriority+2,fsr2l+0
11008:         	movff	??_isrHighPriority+1,fsr1h+0
11009:         	movff	??_isrHighPriority+0,fsr1l+0
11010:         	bcf int$flags,1,c ;clear compiler interrupt flag (level 2)
11011:         	retfie f
11012:         	opt stack 0
11013:         GLOBAL	__end_of_isrHighPriority
11014:         	__end_of_isrHighPriority:
11015:         	signat	_isrHighPriority,89
11016:         	global	_UpdateButtonState
11017:         
11018:         ;; *************** function _UpdateButtonState *****************
11019:         ;; Defined at:
11020:         ;;		line 31 in file "button.c"
11021:         ;; Parameters:    Size  Location     Type
11022:         ;;  buttonInfo      1    0[COMRAM] PTR volatile struct _But
11023:         ;;		 -> _button(15), 
11024:         ;;  currentLogic    1    1[COMRAM] unsigned char 
11025:         ;; Auto vars:     Size  Location     Type
11026:         ;;		None
11027:         ;; Return value:  Size  Location     Type
11028:         ;;                  1    wreg      void 
11029:         ;; Registers used:
11030:         ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
11031:         ;; Tracked objects:
11032:         ;;		On entry : 0/0
11033:         ;;		On exit  : 0/0
11034:         ;;		Unchanged: 0/0
11035:         ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK11  BANK12  BANK13  BANK14
11036:         ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
11037:         ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
11038:         ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
11039:         ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
11040:         ;;Total ram usage:        3 bytes
11041:         ;; Hardware stack levels used:    1
11042:         ;; This function calls:
11043:         ;;		Nothing
11044:         ;; This function is called by:
11045:         ;;		_isrHighPriority
11046:         ;; This function uses a non-reentrant model
11047:         ;;
11048:         psect	text37,class=CODE,space=0,reloc=2,group=0
11049:         	file	"button.c"
11050:         	line	31
11051:         global __ptext37
11052:         __ptext37:
11053:         psect	text37
11054:         	file	"button.c"
11055:         	line	31
11056:         	global	__size_of_UpdateButtonState
11057:         	__size_of_UpdateButtonState	equ	__end_of_UpdateButtonState-_UpdateButtonState
11058:         	
11059:         _UpdateButtonState:
11060:         ;incstack = 0
11061:         	opt	stack 21
11062:         	line	33
11063:         	
11064:         i2l2390:
11065:         ;button.c: 33: if(!buttonInfo->isDebouncing)
11066:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11067:         	movwf	fsr2l
11068:         	clrf	fsr2h
11069:         	movlw	low(05h)
11070:         	addwf	fsr2l
11071:         
11072:         	btfsc	c:indf2,0
11073:         	goto	i2u190_41
11074:         	goto	i2u190_40
11075:         i2u190_41:
11076:         	goto	i2l311
11077:         i2u190_40:
11078:         	line	35
11079:         	
11080:         i2l2392:
11081:         ;button.c: 34: {
11082:         ;button.c: 35: buttonInfo->currentLogicLevel = currentLogicLevel;
11083:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11084:         	movwf	fsr2l
11085:         	clrf	fsr2h
11086:         	movlw	low(05h)
11087:         	addwf	fsr2l
11088:         
11089:         	btfsc	(c:UpdateButtonState@currentLogicLevel),c,0
11090:         	bra	i2u191_45
11091:         	bcf	c:indf2,2
11092:         	bra	i2u191_46
11093:         	i2u191_45:
11094:         	bsf	c:indf2,2
11095:         	i2u191_46:
11096:         
11097:         	line	36
11098:         ;button.c: 36: if(buttonInfo->previousLogicLevel != buttonInfo->currentLogicLevel)
11099:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11100:         	movwf	fsr2l
11101:         	clrf	fsr2h
11102:         	movlw	low(05h)
11103:         	addwf	fsr2l
11104:         
11105:         	btfsc	c:indf2,2
11106:         	goto	i2u192_41
11107:         	goto	i2u192_40
11108:         i2u192_41:
11109:         	movlw	1
11110:         	goto	i2u192_42
11111:         i2u192_40:
11112:         	movlw	0
11113:         i2u192_42:
11114:         	movwf	(??_UpdateButtonState+0+0)&0ffh,c
11115:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11116:         	movwf	fsr2l
11117:         	clrf	fsr2h
11118:         	movlw	low(05h)
11119:         	addwf	fsr2l
11120:         
11121:         	btfsc	c:indf2,3
11122:         	goto	i2u193_41
11123:         	goto	i2u193_40
11124:         i2u193_41:
11125:         	movlw	1
11126:         	goto	i2u193_42
11127:         i2u193_40:
11128:         	movlw	0
11129:         i2u193_42:
11130:         	xorwf	(??_UpdateButtonState+0+0),c
11131:         	btfsc	status,2
11132:         	goto	i2u194_41
11133:         	goto	i2u194_40
11134:         i2u194_41:
11135:         	goto	i2l311
11136:         i2u194_40:
11137:         	line	38
11138:         	
11139:         i2l2394:
11140:         ;button.c: 37: {
11141:         ;button.c: 38: if(!buttonInfo->currentLogicLevel && buttonInfo->currentState != BTN_PRESS)
11142:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11143:         	movwf	fsr2l
11144:         	clrf	fsr2h
11145:         	movlw	low(05h)
11146:         	addwf	fsr2l
11147:         
11148:         	btfsc	c:indf2,2
11149:         	goto	i2u195_41
11150:         	goto	i2u195_40
11151:         i2u195_41:
11152:         	goto	i2l2402
11153:         i2u195_40:
11154:         	
11155:         i2l2396:
11156:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11157:         	movwf	fsr2l
11158:         	clrf	fsr2h
11159:         	movlw	low(04h)
11160:         	addwf	fsr2l
11161:         
11162:         	movf	indf2,w
11163:         	btfsc	status,2
11164:         	goto	i2u196_41
11165:         	goto	i2u196_40
11166:         i2u196_41:
11167:         	goto	i2l2402
11168:         i2u196_40:
11169:         	line	40
11170:         	
11171:         i2l2398:
11172:         ;button.c: 39: {
11173:         ;button.c: 40: INTCON2bits.INTEDG1 = 1;
11174:         	bsf	((c:4081)),c,5	;volatile
11175:         	line	41
11176:         	
11177:         i2l2400:
11178:         ;button.c: 41: buttonInfo->currentState = BTN_PRESS;
11179:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11180:         	movwf	fsr2l
11181:         	clrf	fsr2h
11182:         	movlw	low(04h)
11183:         	addwf	fsr2l
11184:         
11185:         	movlw	low(0)
11186:         	movwf	indf2
11187:         	line	42
11188:         ;button.c: 42: }
11189:         	goto	i2l309
11190:         	line	43
11191:         	
11192:         i2l2402:
11193:         ;button.c: 43: else if(buttonInfo->currentLogicLevel && buttonInfo->currentState != BTN_RELEASE)
11194:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11195:         	movwf	fsr2l
11196:         	clrf	fsr2h
11197:         	movlw	low(05h)
11198:         	addwf	fsr2l
11199:         
11200:         	btfss	c:indf2,2
11201:         	goto	i2u197_41
11202:         	goto	i2u197_40
11203:         i2u197_41:
11204:         	goto	i2l309
11205:         i2u197_40:
11206:         	
11207:         i2l2404:
11208:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11209:         	movwf	fsr2l
11210:         	clrf	fsr2h
11211:         	movlw	low(04h)
11212:         	addwf	fsr2l
11213:         
11214:         	movlw	2
11215:         	xorwf	postinc2,w
11216:         	btfsc	status,2
11217:         	goto	i2u198_41
11218:         	goto	i2u198_40
11219:         
11220:         i2u198_41:
11221:         	goto	i2l309
11222:         i2u198_40:
11223:         	line	45
11224:         	
11225:         i2l2406:
11226:         ;button.c: 44: {
11227:         ;button.c: 45: INTCON2bits.INTEDG1 = 0;
11228:         	bcf	((c:4081)),c,5	;volatile
11229:         	line	46
11230:         	
11231:         i2l2408:
11232:         ;button.c: 46: buttonInfo->currentState = BTN_RELEASE;
11233:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11234:         	movwf	fsr2l
11235:         	clrf	fsr2h
11236:         	movlw	low(04h)
11237:         	addwf	fsr2l
11238:         
11239:         	movlw	low(02h)
11240:         	movwf	indf2
11241:         	line	48
11242:         	
11243:         i2l309:
11244:         ;button.c: 47: }
11245:         ;button.c: 48: buttonInfo->isUnhandled = 1;
11246:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11247:         	movwf	fsr2l
11248:         	clrf	fsr2h
11249:         	movlw	low(05h)
11250:         	addwf	fsr2l
11251:         
11252:         	bsf	c:indf2,1
11253:         	line	49
11254:         ;button.c: 49: buttonInfo->isDebouncing = 1;
11255:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11256:         	movwf	fsr2l
11257:         	clrf	fsr2h
11258:         	movlw	low(05h)
11259:         	addwf	fsr2l
11260:         
11261:         	bsf	c:indf2,0
11262:         	line	50
11263:         	
11264:         i2l2410:
11265:         ;button.c: 50: buttonInfo->previousLogicLevel = buttonInfo->currentLogicLevel;
11266:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11267:         	movwf	fsr2l
11268:         	clrf	fsr2h
11269:         	movlw	low(05h)
11270:         	addwf	fsr2l
11271:         
11272:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11273:         	movwf	fsr1l
11274:         	clrf	fsr1h
11275:         	movlw	low(05h)
11276:         	addwf	fsr1l
11277:         
11278:         	btfsc	c:indf2,2
11279:         	bra	i2u199_45
11280:         	bcf	c:indf1,3
11281:         	bra	i2u199_46
11282:         	i2u199_45:
11283:         	bsf	c:indf1,3
11284:         	i2u199_46:
11285:         
11286:         	line	51
11287:         	
11288:         i2l2412:
11289:         ;button.c: 51: buttonInfo->timestamp = _tick;
11290:         	movf	((c:UpdateButtonState@buttonInfo)),c,w
11291:         	movwf	fsr2l
11292:         	clrf	fsr2h
11293:         	movff	(__tick),postinc2	;volatile
11294:         	movff	(__tick+1),postinc2	;volatile
11295:         	movff	(__tick+2),postinc2	;volatile
11296:         	movff	(__tick+3),postinc2	;volatile
11297:         
11298:         	line	54
11299:         	
11300:         i2l311:
11301:         	return	;funcret
11302:         	opt stack 0
11303:         GLOBAL	__end_of_UpdateButtonState
11304:         	__end_of_UpdateButtonState:
11305:         	signat	_UpdateButtonState,8313
11306:         psect	smallconst
11307:         	db 0	; dummy byte at the end
11308:         	global	__smallconst
11309:         	global	__mediumconst
11310:         	GLOBAL	__activetblptr
11311:         __activetblptr	EQU	3
11312:         	psect	intsave_regs,class=BIGRAM,space=1,noexec
11313:         	file ""
11314:         	line	0
11315:         psect	text38,class=CODE,space=0,reloc=2,group=0
11316:         global __ptext38
11317:         __ptext38:
11318:         fp__ButtonRelease:
11319:         	file ""
11320:         	line	0
11321:         psect	text38
11322:         fp__ButtonPress:
11323:         	file ""
11324:         	line	0
11325:         psect	text38
11326:         fp__ButtonHold:
11327:         	PSECT	rparam,class=COMRAM,space=1,noexec
11328:         	GLOBAL	__Lrparam
11329:         	FNCONF	rparam,??,?
11330:         	GLOBAL	___rparam_used
11331:         	___rparam_used EQU 1
11332:         	GLOBAL	___param_bank
11333:         	___param_bank EQU 0
11334:         GLOBAL	__Lparam, __Hparam
11335:         GLOBAL	__Lrparam, __Hrparam
11336:         __Lparam	EQU	__Lrparam
11337:         __Hparam	EQU	__Hrparam
11338:                psect   temp,common,ovrld,class=COMRAM,space=1
11339:         	global	btemp
11340:         btemp:
11341:         	ds	1
11342:         	global	int$flags
11343:         	int$flags	set btemp
11344:         	end
---  C:/Users/Jonathan/OneDrive/Development/MPLABX/Projects/SmartModule.X/button.c  ---------------------
1:             /* Project:	SmartModule
2:              * File:	button.c
3:              * Author:	Jonathan Ruisi
4:              * Created:	December 20, 2016, 7:52 PM
5:              */
6:             
7:             #include <xc.h>
8:             #include "button.h"
9:             #include "main.h"
10:            
11:            // GLOBAL VARIABLES------------------------------------------------------------
12:            volatile ButtonInfo _button;
13:            
14:            // FUNCTIONS-------------------------------------------------------------------
15:            
16:            ButtonInfo ButtonInfoCreate(Action pressAction, Action holdAction, Action releaseAction, bool activeLogicLevel)
17:            {
18:            	ButtonInfo button;
19:            	button.currentLogicLevel = !activeLogicLevel;
1CE8  5023     MOVF activeLogicLevel, W, ACCESS
1CEA  B4D8     BTFSC STATUS, 2, ACCESS
1CEC  EF7A     GOTO 0x1CF4
1CEE  F00E     NOP
1CF0  EF7E     GOTO 0x1CFC
1CF2  F00E     NOP
1CF4  6A29     CLRF 0x29, ACCESS
1CF6  2A29     INCF 0x29, F, ACCESS
1CF8  EF7F     GOTO 0x1CFE
1CFA  F00E     NOP
1CFC  6A29     CLRF 0x29, ACCESS
1CFE  4629     RLNCF 0x29, F, ACCESS
1D00  4629     RLNCF 0x29, F, ACCESS
1D02  502F     MOVF 0x2F, W, ACCESS
1D04  1829     XORWF 0x29, W, ACCESS
1D06  0BFB     ANDLW 0xFB
1D08  1829     XORWF 0x29, W, ACCESS
1D0A  6E2F     MOVWF 0x2F, ACCESS
20:            	button.previousLogicLevel = !activeLogicLevel;
1D0C  5023     MOVF activeLogicLevel, W, ACCESS
1D0E  B4D8     BTFSC STATUS, 2, ACCESS
1D10  EF8C     GOTO 0x1D18
1D12  F00E     NOP
1D14  EF90     GOTO 0x1D20
1D16  F00E     NOP
1D18  6A29     CLRF 0x29, ACCESS
1D1A  2A29     INCF 0x29, F, ACCESS
1D1C  EF91     GOTO 0x1D22
1D1E  F00E     NOP
1D20  6A29     CLRF 0x29, ACCESS
1D22  4629     RLNCF 0x29, F, ACCESS
1D24  4629     RLNCF 0x29, F, ACCESS
1D26  4629     RLNCF 0x29, F, ACCESS
1D28  502F     MOVF 0x2F, W, ACCESS
1D2A  1829     XORWF 0x29, W, ACCESS
1D2C  0BF7     ANDLW 0xF7
1D2E  1829     XORWF 0x29, W, ACCESS
1D30  6E2F     MOVWF 0x2F, ACCESS
21:            	button.currentState = BTN_RELEASE;
1D32  0E02     MOVLW 0x2
1D34  6E2E     MOVWF v, ACCESS
22:            	button.isDebouncing = false;
1D36  902F     BCF 0x2F, 0, ACCESS
23:            	button.isUnhandled = false;
1D38  922F     BCF 0x2F, 1, ACCESS
24:            	button.timestamp = 0;
1D3A  6A2A     CLRF button, ACCESS
1D3C  6A2B     CLRF ap, ACCESS
1D3E  6A2C     CLRF c, ACCESS
1D40  6A2D     CLRF cp, ACCESS
25:            	button.pressAction = pressAction;
1D42  C01A     MOVFF pressAction, 0x30
1D44  F030     NOP
1D46  C01B     MOVFF 0x1B, 0x31
1D48  F031     NOP
1D4A  C01C     MOVFF divisor, c
1D4C  F032     NOP
26:            	button.holdAction = holdAction;
1D4E  C01D     MOVFF holdAction, buf
1D50  F033     NOP
1D52  C01E     MOVFF counter, val
1D54  F034     NOP
1D56  C01F     MOVFF sign, 0x35
1D58  F035     NOP
27:            	button.releaseAction = releaseAction;
1D5A  C020     MOVFF releaseAction, 0x36
1D5C  F036     NOP
1D5E  C021     MOVFF data, 0x37
1D60  F037     NOP
1D62  C022     MOVFF quotient, base
1D64  F038     NOP
28:            	return button;
1D66  EE20     LFSR 2, 0x2A
1D68  F02A     NOP
1D6A  EE00     LFSR 0, 0x1A
1D6C  F01A     NOP
1D6E  0E0E     MOVLW 0xE
1D70  CFDB     MOVFF PLUSW2, PLUSW0
1D72  FFEB     NOP
1D74  06E8     DECF WREG, F, ACCESS
1D76  E2FC     BC 0x1D70
29:            }
0018  8052     BSF btemp, 0, ACCESS
001A  CFD8     MOVFF STATUS, 0x13
001C  F013     NOP
001E  CFE8     MOVFF WREG, 0x14
0020  F014     NOP
0022  CFE0     MOVFF BSR, 0x15
0024  F015     NOP
0026  CFE1     MOVFF FSR1, 0x16
0028  F016     NOP
002A  CFE2     MOVFF FSR1H, 0x17
002C  F017     NOP
002E  CFD9     MOVFF FSR2, 0x18
0030  F018     NOP
0032  CFDA     MOVFF FSR2H, 0x19
0034  F019     NOP
1D78  0012     RETURN 0
30:            
31:            void UpdateButtonState(volatile ButtonInfo* buttonInfo, bool currentLogicLevel)
32:            {
33:            	if(!buttonInfo->isDebouncing)
140E  5001     MOVF __pcstackCOMRAM, W, ACCESS
1410  6ED9     MOVWF FSR2, ACCESS
1412  6ADA     CLRF FSR2H, ACCESS
1414  0E05     MOVLW 0x5
1416  26D9     ADDWF FSR2, F, ACCESS
1418  B0DF     BTFSC INDF2, 0, ACCESS
141A  EF11     GOTO 0x1422
141C  F00A     NOP
141E  EF13     GOTO 0x1426
1420  F00A     NOP
1422  EFAD     GOTO 0x155A
1424  F00A     NOP
34:            	{
35:            		buttonInfo->currentLogicLevel = currentLogicLevel;
1426  5001     MOVF __pcstackCOMRAM, W, ACCESS
1428  6ED9     MOVWF FSR2, ACCESS
142A  6ADA     CLRF FSR2H, ACCESS
142C  0E05     MOVLW 0x5
142E  26D9     ADDWF FSR2, F, ACCESS
1430  B002     BTFSC currentLogicLevel, 0, ACCESS
1432  D002     BRA 0x1438
1434  94DF     BCF INDF2, 2, ACCESS
1436  D001     BRA 0x143A
1438  84DF     BSF INDF2, 2, ACCESS
36:            		if(buttonInfo->previousLogicLevel != buttonInfo->currentLogicLevel)
143A  5001     MOVF __pcstackCOMRAM, W, ACCESS
143C  6ED9     MOVWF FSR2, ACCESS
143E  6ADA     CLRF FSR2H, ACCESS
1440  0E05     MOVLW 0x5
1442  26D9     ADDWF FSR2, F, ACCESS
1444  B4DF     BTFSC INDF2, 2, ACCESS
1446  EF27     GOTO 0x144E
1448  F00A     NOP
144A  EF2A     GOTO 0x1454
144C  F00A     NOP
144E  0E01     MOVLW 0x1
1450  EF2B     GOTO 0x1456
1452  F00A     NOP
1454  0E00     MOVLW 0x0
1456  6E03     MOVWF 0x3, ACCESS
1458  5001     MOVF __pcstackCOMRAM, W, ACCESS
145A  6ED9     MOVWF FSR2, ACCESS
145C  6ADA     CLRF FSR2H, ACCESS
145E  0E05     MOVLW 0x5
1460  26D9     ADDWF FSR2, F, ACCESS
1462  B6DF     BTFSC INDF2, 3, ACCESS
1464  EF36     GOTO 0x146C
1466  F00A     NOP
1468  EF39     GOTO 0x1472
146A  F00A     NOP
146C  0E01     MOVLW 0x1
146E  EF3A     GOTO 0x1474
1470  F00A     NOP
1472  0E00     MOVLW 0x0
1474  1A03     XORWF 0x3, F, ACCESS
1476  B4D8     BTFSC STATUS, 2, ACCESS
1478  EF40     GOTO 0x1480
147A  F00A     NOP
147C  EF42     GOTO 0x1484
147E  F00A     NOP
1480  EFAD     GOTO 0x155A
1482  F00A     NOP
37:            		{
38:            			if(!buttonInfo->currentLogicLevel && buttonInfo->currentState != BTN_PRESS)
1484  5001     MOVF __pcstackCOMRAM, W, ACCESS
1486  6ED9     MOVWF FSR2, ACCESS
1488  6ADA     CLRF FSR2H, ACCESS
148A  0E05     MOVLW 0x5
148C  26D9     ADDWF FSR2, F, ACCESS
148E  B4DF     BTFSC INDF2, 2, ACCESS
1490  EF4C     GOTO 0x1498
1492  F00A     NOP
1494  EF4E     GOTO 0x149C
1496  F00A     NOP
1498  EF65     GOTO 0x14CA
149A  F00A     NOP
149C  5001     MOVF __pcstackCOMRAM, W, ACCESS
149E  6ED9     MOVWF FSR2, ACCESS
14A0  6ADA     CLRF FSR2H, ACCESS
14A2  0E04     MOVLW 0x4
14A4  26D9     ADDWF FSR2, F, ACCESS
14A6  50DF     MOVF INDF2, W, ACCESS
14A8  B4D8     BTFSC STATUS, 2, ACCESS
14AA  EF59     GOTO 0x14B2
14AC  F00A     NOP
14AE  EF5B     GOTO 0x14B6
14B0  F00A     NOP
14B2  EF65     GOTO 0x14CA
14B4  F00A     NOP
39:            			{
40:            				INTCON2bits.INTEDG1 = 1;	// Configure INT1 interrupt to trigger on a rising edge
14B6  8AF1     BSF INTCON2, 5, ACCESS
41:            				buttonInfo->currentState = BTN_PRESS;
14B8  5001     MOVF __pcstackCOMRAM, W, ACCESS
14BA  6ED9     MOVWF FSR2, ACCESS
14BC  6ADA     CLRF FSR2H, ACCESS
14BE  0E04     MOVLW 0x4
14C0  26D9     ADDWF FSR2, F, ACCESS
14C2  0E00     MOVLW 0x0
14C4  6EDF     MOVWF INDF2, ACCESS
42:            			}
14C6  EF87     GOTO 0x150E
14C8  F00A     NOP
43:            			else if(buttonInfo->currentLogicLevel && buttonInfo->currentState != BTN_RELEASE)
14CA  5001     MOVF __pcstackCOMRAM, W, ACCESS
14CC  6ED9     MOVWF FSR2, ACCESS
14CE  6ADA     CLRF FSR2H, ACCESS
14D0  0E05     MOVLW 0x5
14D2  26D9     ADDWF FSR2, F, ACCESS
14D4  A4DF     BTFSS INDF2, 2, ACCESS
14D6  EF6F     GOTO 0x14DE
14D8  F00A     NOP
14DA  EF71     GOTO 0x14E2
14DC  F00A     NOP
14DE  EF87     GOTO 0x150E
14E0  F00A     NOP
14E2  5001     MOVF __pcstackCOMRAM, W, ACCESS
14E4  6ED9     MOVWF FSR2, ACCESS
14E6  6ADA     CLRF FSR2H, ACCESS
14E8  0E04     MOVLW 0x4
14EA  26D9     ADDWF FSR2, F, ACCESS
14EC  0E02     MOVLW 0x2
14EE  18DE     XORWF POSTINC2, W, ACCESS
14F0  B4D8     BTFSC STATUS, 2, ACCESS
14F2  EF7D     GOTO 0x14FA
14F4  F00A     NOP
14F6  EF7F     GOTO 0x14FE
14F8  F00A     NOP
14FA  EF87     GOTO 0x150E
14FC  F00A     NOP
44:            			{
45:            				INTCON2bits.INTEDG1 = 0;	// Configure INT1 interrupt to trigger on a falling edge
14FE  9AF1     BCF INTCON2, 5, ACCESS
46:            				buttonInfo->currentState = BTN_RELEASE;
1500  5001     MOVF __pcstackCOMRAM, W, ACCESS
1502  6ED9     MOVWF FSR2, ACCESS
1504  6ADA     CLRF FSR2H, ACCESS
1506  0E04     MOVLW 0x4
1508  26D9     ADDWF FSR2, F, ACCESS
150A  0E02     MOVLW 0x2
150C  6EDF     MOVWF INDF2, ACCESS
47:            			}
48:            			buttonInfo->isUnhandled = true;
150E  5001     MOVF __pcstackCOMRAM, W, ACCESS
1510  6ED9     MOVWF FSR2, ACCESS
1512  6ADA     CLRF FSR2H, ACCESS
1514  0E05     MOVLW 0x5
1516  26D9     ADDWF FSR2, F, ACCESS
1518  82DF     BSF INDF2, 1, ACCESS
49:            			buttonInfo->isDebouncing = true;
151A  5001     MOVF __pcstackCOMRAM, W, ACCESS
151C  6ED9     MOVWF FSR2, ACCESS
151E  6ADA     CLRF FSR2H, ACCESS
1520  0E05     MOVLW 0x5
1522  26D9     ADDWF FSR2, F, ACCESS
1524  80DF     BSF INDF2, 0, ACCESS
50:            			buttonInfo->previousLogicLevel = buttonInfo->currentLogicLevel;
1526  5001     MOVF __pcstackCOMRAM, W, ACCESS
1528  6ED9     MOVWF FSR2, ACCESS
152A  6ADA     CLRF FSR2H, ACCESS
152C  0E05     MOVLW 0x5
152E  26D9     ADDWF FSR2, F, ACCESS
1530  5001     MOVF __pcstackCOMRAM, W, ACCESS
1532  6EE1     MOVWF FSR1, ACCESS
1534  6AE2     CLRF FSR1H, ACCESS
1536  0E05     MOVLW 0x5
1538  26E1     ADDWF FSR1, F, ACCESS
153A  B4DF     BTFSC INDF2, 2, ACCESS
153C  D002     BRA 0x1542
153E  96E7     BCF INDF1, 3, ACCESS
1540  D001     BRA 0x1544
1542  86E7     BSF INDF1, 3, ACCESS
51:            			buttonInfo->timestamp = _tick;
1544  5001     MOVF __pcstackCOMRAM, W, ACCESS
1546  6ED9     MOVWF FSR2, ACCESS
1548  6ADA     CLRF FSR2H, ACCESS
154A  C0AD     MOVFF _tick, POSTINC2
154C  FFDE     NOP
154E  C0AE     MOVFF 0xAE, POSTINC2
1550  FFDE     NOP
1552  C0AF     MOVFF 0xAF, POSTINC2
1554  FFDE     NOP
1556  C0B0     MOVFF 0xB0, POSTINC2
1558  FFDE     NOP
52:            		}
53:            	}
54:            }
155A  0012     RETURN 0
55:            
56:            void CheckButton(volatile ButtonInfo *buttonInfo)
57:            {
58:            	if(!buttonInfo->isUnhandled && buttonInfo->currentState == BTN_PRESS
59:            	&& !buttonInfo->currentLogicLevel
60:            	&& (_tick - buttonInfo->timestamp >= HOLD_DELAY))
1226  501A     MOVF pressAction, W, ACCESS
1228  6ED9     MOVWF FSR2, ACCESS
122A  6ADA     CLRF FSR2H, ACCESS
122C  0E05     MOVLW 0x5
122E  26D9     ADDWF FSR2, F, ACCESS
1230  B2DF     BTFSC INDF2, 1, ACCESS
1232  EF1D     GOTO 0x123A
1234  F009     NOP
1236  EF1F     GOTO 0x123E
1238  F009     NOP
123A  EF6B     GOTO 0x12D6
123C  F009     NOP
123E  501A     MOVF pressAction, W, ACCESS
1240  6ED9     MOVWF FSR2, ACCESS
1242  6ADA     CLRF FSR2H, ACCESS
1244  0E04     MOVLW 0x4
1246  26D9     ADDWF FSR2, F, ACCESS
1248  50DF     MOVF INDF2, W, ACCESS
124A  A4D8     BTFSS STATUS, 2, ACCESS
124C  EF2A     GOTO 0x1254
124E  F009     NOP
1250  EF2C     GOTO 0x1258
1252  F009     NOP
1254  EF6B     GOTO 0x12D6
1256  F009     NOP
1258  501A     MOVF pressAction, W, ACCESS
125A  6ED9     MOVWF FSR2, ACCESS
125C  6ADA     CLRF FSR2H, ACCESS
125E  0E05     MOVLW 0x5
1260  26D9     ADDWF FSR2, F, ACCESS
1262  B4DF     BTFSC INDF2, 2, ACCESS
1264  EF36     GOTO 0x126C
1266  F009     NOP
1268  EF38     GOTO 0x1270
126A  F009     NOP
126C  EF6B     GOTO 0x12D6
126E  F009     NOP
1270  501A     MOVF pressAction, W, ACCESS
1272  6ED9     MOVWF FSR2, ACCESS
1274  6ADA     CLRF FSR2H, ACCESS
1276  CFDE     MOVFF POSTINC2, 0x1B
1278  F01B     NOP
127A  CFDE     MOVFF POSTINC2, divisor
127C  F01C     NOP
127E  CFDE     MOVFF POSTINC2, holdAction
1280  F01D     NOP
1282  CFDE     MOVFF POSTINC2, counter
1284  F01E     NOP
1286  501B     MOVF 0x1B, W, ACCESS
1288  0100     MOVLB 0x0
128A  5DAD     SUBWF _tick, W, BANKED
128C  6E1F     MOVWF sign, ACCESS
128E  501C     MOVF divisor, W, ACCESS
1290  59AE     SUBWFB 0xAE, W, BANKED
1292  6E20     MOVWF releaseAction, ACCESS
1294  501D     MOVF holdAction, W, ACCESS
1296  59AF     SUBWFB 0xAF, W, BANKED
1298  6E21     MOVWF data, ACCESS
129A  501E     MOVF counter, W, ACCESS
129C  59B0     SUBWFB 0xB0, W, BANKED
129E  6E22     MOVWF quotient, ACCESS
12A0  5022     MOVF quotient, W, ACCESS
12A2  1021     IORWF data, W, ACCESS
12A4  E10B     BNZ 0x12BC
12A6  0EF4     MOVLW 0xF4
12A8  5C1F     SUBWF sign, W, ACCESS
12AA  0E01     MOVLW 0x1
12AC  5820     SUBWFB releaseAction, W, ACCESS
12AE  A0D8     BTFSS STATUS, 0, ACCESS
12B0  EF5C     GOTO 0x12B8
12B2  F009     NOP
12B4  EF5E     GOTO 0x12BC
12B6  F009     NOP
12B8  EF6B     GOTO 0x12D6
12BA  F009     NOP
61:            	{
62:            		buttonInfo->currentState = BTN_HOLD;
12BC  501A     MOVF pressAction, W, ACCESS
12BE  6ED9     MOVWF FSR2, ACCESS
12C0  6ADA     CLRF FSR2H, ACCESS
12C2  0E04     MOVLW 0x4
12C4  26D9     ADDWF FSR2, F, ACCESS
12C6  0E01     MOVLW 0x1
12C8  6EDF     MOVWF INDF2, ACCESS
63:            		buttonInfo->isUnhandled = true;
12CA  501A     MOVF pressAction, W, ACCESS
12CC  6ED9     MOVWF FSR2, ACCESS
12CE  6ADA     CLRF FSR2H, ACCESS
12D0  0E05     MOVLW 0x5
12D2  26D9     ADDWF FSR2, F, ACCESS
12D4  82DF     BSF INDF2, 1, ACCESS
64:            	}
65:            
66:            	if(buttonInfo->isUnhandled)
12D6  501A     MOVF pressAction, W, ACCESS
12D8  6ED9     MOVWF FSR2, ACCESS
12DA  6ADA     CLRF FSR2H, ACCESS
12DC  0E05     MOVLW 0x5
12DE  26D9     ADDWF FSR2, F, ACCESS
12E0  A2DF     BTFSS INDF2, 1, ACCESS
12E2  EF75     GOTO 0x12EA
12E4  F009     NOP
12E6  EF77     GOTO 0x12EE
12E8  F009     NOP
12EA  EFCF     GOTO 0x139E
12EC  F009     NOP
12EE  EFB5     GOTO 0x136A
12F0  F009     NOP
67:            	{
68:            		switch(buttonInfo->currentState)
136A  501A     MOVF pressAction, W, ACCESS
136C  6ED9     MOVWF FSR2, ACCESS
136E  6ADA     CLRF FSR2H, ACCESS
1370  0E04     MOVLW 0x4
1372  26D9     ADDWF FSR2, F, ACCESS
1374  50DF     MOVF INDF2, W, ACCESS
1376  0A00     XORLW 0x0
1378  B4D8     BTFSC STATUS, 2, ACCESS
137A  EF79     GOTO 0x12F2
137C  F009     NOP
137E  0A01     XORLW 0x1
1380  B4D8     BTFSC STATUS, 2, ACCESS
1382  EF8D     GOTO 0x131A
1384  F009     NOP
1386  0A03     XORLW 0x3
1388  B4D8     BTFSC STATUS, 2, ACCESS
138A  EFA1     GOTO 0x1342
138C  F009     NOP
138E  EFC9     GOTO 0x1392
1390  F009     NOP
69:            		{
70:            			case BTN_PRESS:
71:            				buttonInfo->pressAction();
12F2  501A     MOVF pressAction, W, ACCESS
12F4  6ED9     MOVWF FSR2, ACCESS
12F6  6ADA     CLRF FSR2H, ACCESS
12F8  0E06     MOVLW 0x6
12FA  26D9     ADDWF FSR2, F, ACCESS
12FC  D802     RCALL 0x1302
12FE  EF8B     GOTO 0x1316
1300  F009     NOP
1302  0005     PUSH
1304  6EFA     MOVWF PCLATH, ACCESS
1306  50DE     MOVF POSTINC2, W, ACCESS
1308  6EFD     MOVWF TOS, ACCESS
130A  50DE     MOVF POSTINC2, W, ACCESS
130C  6EFE     MOVWF TOSH, ACCESS
130E  50DE     MOVF POSTINC2, W, ACCESS
1310  6EFF     MOVWF TOSU, ACCESS
1312  50FA     MOVF PCLATH, W, ACCESS
1314  0012     RETURN 0
72:            				break;
1316  EFC9     GOTO 0x1392
1318  F009     NOP
73:            			case BTN_HOLD:
74:            				buttonInfo->holdAction();
131A  501A     MOVF pressAction, W, ACCESS
131C  6ED9     MOVWF FSR2, ACCESS
131E  6ADA     CLRF FSR2H, ACCESS
1320  0E09     MOVLW 0x9
1322  26D9     ADDWF FSR2, F, ACCESS
1324  D802     RCALL 0x132A
1326  EF9F     GOTO 0x133E
1328  F009     NOP
132A  0005     PUSH
132C  6EFA     MOVWF PCLATH, ACCESS
132E  50DE     MOVF POSTINC2, W, ACCESS
1330  6EFD     MOVWF TOS, ACCESS
1332  50DE     MOVF POSTINC2, W, ACCESS
1334  6EFE     MOVWF TOSH, ACCESS
1336  50DE     MOVF POSTINC2, W, ACCESS
1338  6EFF     MOVWF TOSU, ACCESS
133A  50FA     MOVF PCLATH, W, ACCESS
133C  0012     RETURN 0
75:            				break;
133E  EFC9     GOTO 0x1392
1340  F009     NOP
76:            			case BTN_RELEASE:
77:            				buttonInfo->releaseAction();
1342  501A     MOVF pressAction, W, ACCESS
1344  6ED9     MOVWF FSR2, ACCESS
1346  6ADA     CLRF FSR2H, ACCESS
1348  0E0C     MOVLW 0xC
134A  26D9     ADDWF FSR2, F, ACCESS
134C  D802     RCALL 0x1352
134E  EFB3     GOTO 0x1366
1350  F009     NOP
1352  0005     PUSH
1354  6EFA     MOVWF PCLATH, ACCESS
1356  50DE     MOVF POSTINC2, W, ACCESS
1358  6EFD     MOVWF TOS, ACCESS
135A  50DE     MOVF POSTINC2, W, ACCESS
135C  6EFE     MOVWF TOSH, ACCESS
135E  50DE     MOVF POSTINC2, W, ACCESS
1360  6EFF     MOVWF TOSU, ACCESS
1362  50FA     MOVF PCLATH, W, ACCESS
1364  0012     RETURN 0
78:            				break;
1366  EFC9     GOTO 0x1392
1368  F009     NOP
79:            		}
80:            		buttonInfo->isUnhandled = false;
1392  501A     MOVF pressAction, W, ACCESS
1394  6ED9     MOVWF FSR2, ACCESS
1396  6ADA     CLRF FSR2H, ACCESS
1398  0E05     MOVLW 0x5
139A  26D9     ADDWF FSR2, F, ACCESS
139C  92DF     BCF INDF2, 1, ACCESS
81:            	}
82:            
83:            	if(buttonInfo->isDebouncing && (_tick - buttonInfo->timestamp >= DEBOUNCE_DELAY))
139E  501A     MOVF pressAction, W, ACCESS
13A0  6ED9     MOVWF FSR2, ACCESS
13A2  6ADA     CLRF FSR2H, ACCESS
13A4  0E05     MOVLW 0x5
13A6  26D9     ADDWF FSR2, F, ACCESS
13A8  A0DF     BTFSS INDF2, 0, ACCESS
13AA  EFD9     GOTO 0x13B2
13AC  F009     NOP
13AE  EFDB     GOTO 0x13B6
13B0  F009     NOP
13B2  EF06     GOTO 0x140C
13B4  F00A     NOP
13B6  501A     MOVF pressAction, W, ACCESS
13B8  6ED9     MOVWF FSR2, ACCESS
13BA  6ADA     CLRF FSR2H, ACCESS
13BC  CFDE     MOVFF POSTINC2, 0x1B
13BE  F01B     NOP
13C0  CFDE     MOVFF POSTINC2, divisor
13C2  F01C     NOP
13C4  CFDE     MOVFF POSTINC2, holdAction
13C6  F01D     NOP
13C8  CFDE     MOVFF POSTINC2, counter
13CA  F01E     NOP
13CC  501B     MOVF 0x1B, W, ACCESS
13CE  0100     MOVLB 0x0
13D0  5DAD     SUBWF _tick, W, BANKED
13D2  6E1F     MOVWF sign, ACCESS
13D4  501C     MOVF divisor, W, ACCESS
13D6  59AE     SUBWFB 0xAE, W, BANKED
13D8  6E20     MOVWF releaseAction, ACCESS
13DA  501D     MOVF holdAction, W, ACCESS
13DC  59AF     SUBWFB 0xAF, W, BANKED
13DE  6E21     MOVWF data, ACCESS
13E0  501E     MOVF counter, W, ACCESS
13E2  59B0     SUBWFB 0xB0, W, BANKED
13E4  6E22     MOVWF quotient, ACCESS
13E6  5022     MOVF quotient, W, ACCESS
13E8  1021     IORWF data, W, ACCESS
13EA  1020     IORWF releaseAction, W, ACCESS
13EC  E109     BNZ 0x1400
13EE  0E05     MOVLW 0x5
13F0  5C1F     SUBWF sign, W, ACCESS
13F2  A0D8     BTFSS STATUS, 0, ACCESS
13F4  EFFE     GOTO 0x13FC
13F6  F009     NOP
13F8  EF00     GOTO 0x1400
13FA  F00A     NOP
13FC  EF06     GOTO 0x140C
13FE  F00A     NOP
84:            		buttonInfo->isDebouncing = false;
1400  501A     MOVF pressAction, W, ACCESS
1402  6ED9     MOVWF FSR2, ACCESS
1404  6ADA     CLRF FSR2H, ACCESS
1406  0E05     MOVLW 0x5
1408  26D9     ADDWF FSR2, F, ACCESS
140A  90DF     BCF INDF2, 0, ACCESS
85:            }
140C  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.41/sources/common/ltoa.c  ----------------------------------
1:             #include	<stdlib.h>
2:             
3:             char *
4:             #ifdef __18CXX
5:             ltoa(long val, char * buf) 
6:             #else
7:             ltoa(char * buf, long val, int base) 
8:             #endif
9:             {
10:            	char *	cp = buf;
11:            
12:            	if(val < 0) {
20BC  BE37     BTFSC 0x37, 7, ACCESS
20BE  EF65     GOTO 0x20CA
20C0  F010     NOP
20C2  EF63     GOTO 0x20C6
20C4  F010     NOP
20C6  EF73     GOTO 0x20E6
20C8  F010     NOP
13:            		*buf++ = '-';
20CA  5033     MOVF buf, W, ACCESS
20CC  6ED9     MOVWF FSR2, ACCESS
20CE  6ADA     CLRF FSR2H, ACCESS
20D0  0E2D     MOVLW 0x2D
20D2  6EDF     MOVWF INDF2, ACCESS
20D4  2A33     INCF buf, F, ACCESS
14:            		val = -val;
20D6  1E37     COMF 0x37, F, ACCESS
20D8  1E36     COMF 0x36, F, ACCESS
20DA  1E35     COMF 0x35, F, ACCESS
20DC  6C34     NEGF val, ACCESS
20DE  0E00     MOVLW 0x0
20E0  2235     ADDWFC 0x35, F, ACCESS
20E2  2236     ADDWFC 0x36, F, ACCESS
20E4  2237     ADDWFC 0x37, F, ACCESS
15:            	}
16:            #ifdef __18CXX
17:            	ultoa(val, buf);
18:            #else
19:            	ultoa(buf, val, base);
20E6  C033     MOVFF buf, data
20E8  F027     NOP
20EA  C034     MOVFF val, f
20EC  F028     NOP
20EE  C035     MOVFF 0x35, 0x29
20F0  F029     NOP
20F2  C036     MOVFF 0x36, button
20F4  F02A     NOP
20F6  C037     MOVFF 0x37, ap
20F8  F02B     NOP
20FA  C038     MOVFF base, c
20FC  F02C     NOP
20FE  C039     MOVFF 0x39, cp
2100  F02D     NOP
2102  EC36     CALL 0x166C, 0
2104  F00B     NOP
20:            #endif
21:            	return cp;
22:            }
2106  0012     RETURN 0
23:            
24:            #ifdef __18CXX
25:            #define base 10
26:            #endif
27:            
28:            char *
29:            #ifdef __18CXX
30:            ultoa(unsigned long val, char * buf)
31:            #else
32:            ultoa(char * buf, unsigned long val, int base)
33:            #endif
34:            {
35:            	unsigned	long	v;
36:            	char		c;
37:            
38:            	v = val;
166C  C028     MOVFF f, v
166E  F02E     NOP
1670  C029     MOVFF 0x29, 0x2F
1672  F02F     NOP
1674  C02A     MOVFF button, 0x30
1676  F030     NOP
1678  C02B     MOVFF ap, 0x31
167A  F031     NOP
39:            	do {
40:            		v /= base;
167C  C02E     MOVFF v, pressAction
167E  F01A     NOP
1680  C02F     MOVFF 0x2F, 0x1B
1682  F01B     NOP
1684  C030     MOVFF 0x30, divisor
1686  F01C     NOP
1688  C031     MOVFF 0x31, holdAction
168A  F01D     NOP
168C  C02C     MOVFF c, counter
168E  F01E     NOP
1690  C02D     MOVFF cp, sign
1692  F01F     NOP
1694  0E00     MOVLW 0x0
1696  BE1F     BTFSC sign, 7, ACCESS
1698  0EFF     MOVLW 0xFF
169A  6E20     MOVWF releaseAction, ACCESS
169C  6E21     MOVWF data, ACCESS
169E  EC8E     CALL 0x1B1C, 0
16A0  F00D     NOP
16A2  C01A     MOVFF pressAction, v
16A4  F02E     NOP
16A6  C01B     MOVFF 0x1B, 0x2F
16A8  F02F     NOP
16AA  C01C     MOVFF divisor, 0x30
16AC  F030     NOP
16AE  C01D     MOVFF holdAction, 0x31
16B0  F031     NOP
41:            		buf++;
16B2  2A27     INCF data, F, ACCESS
42:            	} while(v != 0);
16B4  502E     MOVF v, W, ACCESS
16B6  102F     IORWF 0x2F, W, ACCESS
16B8  1030     IORWF 0x30, W, ACCESS
16BA  1031     IORWF 0x31, W, ACCESS
16BC  A4D8     BTFSS STATUS, 2, ACCESS
16BE  EF63     GOTO 0x16C6
16C0  F00B     NOP
16C2  EF65     GOTO 0x16CA
16C4  F00B     NOP
16C6  EF3E     GOTO 0x167C
16C8  F00B     NOP
43:            	*buf-- = 0;
16CA  5027     MOVF data, W, ACCESS
16CC  6ED9     MOVWF FSR2, ACCESS
16CE  6ADA     CLRF FSR2H, ACCESS
16D0  0E00     MOVLW 0x0
16D2  6EDF     MOVWF INDF2, ACCESS
16D4  0627     DECF data, F, ACCESS
44:            	do {
45:            		c = val % base;
16D6  C028     MOVFF f, pressAction
16D8  F01A     NOP
16DA  C029     MOVFF 0x29, 0x1B
16DC  F01B     NOP
16DE  C02A     MOVFF button, divisor
16E0  F01C     NOP
16E2  C02B     MOVFF ap, holdAction
16E4  F01D     NOP
16E6  C02C     MOVFF c, counter
16E8  F01E     NOP
16EA  C02D     MOVFF cp, sign
16EC  F01F     NOP
16EE  0E00     MOVLW 0x0
16F0  BE1F     BTFSC sign, 7, ACCESS
16F2  0EFF     MOVLW 0xFF
16F4  6E20     MOVWF releaseAction, ACCESS
16F6  6E21     MOVWF data, ACCESS
16F8  ECBD     CALL 0x1D7A, 0
16FA  F00E     NOP
16FC  501A     MOVF pressAction, W, ACCESS
16FE  6E32     MOVWF c, ACCESS
46:            		val /= base;
1700  C028     MOVFF f, pressAction
1702  F01A     NOP
1704  C029     MOVFF 0x29, 0x1B
1706  F01B     NOP
1708  C02A     MOVFF button, divisor
170A  F01C     NOP
170C  C02B     MOVFF ap, holdAction
170E  F01D     NOP
1710  C02C     MOVFF c, counter
1712  F01E     NOP
1714  C02D     MOVFF cp, sign
1716  F01F     NOP
1718  0E00     MOVLW 0x0
171A  BE1F     BTFSC sign, 7, ACCESS
171C  0EFF     MOVLW 0xFF
171E  6E20     MOVWF releaseAction, ACCESS
1720  6E21     MOVWF data, ACCESS
1722  EC8E     CALL 0x1B1C, 0
1724  F00D     NOP
1726  C01A     MOVFF pressAction, f
1728  F028     NOP
172A  C01B     MOVFF 0x1B, 0x29
172C  F029     NOP
172E  C01C     MOVFF divisor, button
1730  F02A     NOP
1732  C01D     MOVFF holdAction, ap
1734  F02B     NOP
47:            		if(c >= 10)
1736  0E09     MOVLW 0x9
1738  6432     CPFSGT c, ACCESS
173A  EFA1     GOTO 0x1742
173C  F00B     NOP
173E  EFA3     GOTO 0x1746
1740  F00B     NOP
1742  EFA5     GOTO 0x174A
1744  F00B     NOP
48:            			c += 'A'-'0'-10;
1746  0E07     MOVLW 0x7
1748  2632     ADDWF c, F, ACCESS
49:            		c += '0';
174A  0E30     MOVLW 0x30
174C  2632     ADDWF c, F, ACCESS
50:            		*buf-- = c;
174E  5027     MOVF data, W, ACCESS
1750  6ED9     MOVWF FSR2, ACCESS
1752  6ADA     CLRF FSR2H, ACCESS
1754  C032     MOVFF c, INDF2
1756  FFDF     NOP
1758  0627     DECF data, F, ACCESS
51:            	} while(val != 0);
175A  5028     MOVF f, W, ACCESS
175C  1029     IORWF 0x29, W, ACCESS
175E  102A     IORWF button, W, ACCESS
1760  102B     IORWF ap, W, ACCESS
1762  A4D8     BTFSS STATUS, 2, ACCESS
1764  EFB6     GOTO 0x176C
1766  F00B     NOP
1768  EFB8     GOTO 0x1770
176A  F00B     NOP
176C  EF6B     GOTO 0x16D6
176E  F00B     NOP
52:            	return buf;
53:            }
1770  0012     RETURN 0
54:            
55:            #ifdef __18CXX
56:            #undef base
57:            #endif
58:            
---  C:/Program Files (x86)/Microchip/xc8/v1.41/sources/common/llmod.c  ---------------------------------
1:             // long unsigned unsigned modulus
2:             
3:             unsigned long int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __llmod(unsigned long int divisor, unsigned long int dividend)
7:             #else
8:             __llmod(unsigned long int dividend, unsigned long int divisor)
9:             #endif
10:            {
11:            	unsigned char	counter;
12:            
13:            	if(divisor != 0) {
1D7A  501E     MOVF counter, W, ACCESS
1D7C  101F     IORWF sign, W, ACCESS
1D7E  1020     IORWF releaseAction, W, ACCESS
1D80  1021     IORWF data, W, ACCESS
1D82  B4D8     BTFSC STATUS, 2, ACCESS
1D84  EFC6     GOTO 0x1D8C
1D86  F00E     NOP
1D88  EFC8     GOTO 0x1D90
1D8A  F00E     NOP
1D8C  EFF8     GOTO 0x1DF0
1D8E  F00E     NOP
14:            		counter = 1;
1D90  0E01     MOVLW 0x1
1D92  6E22     MOVWF quotient, ACCESS
15:            		while((divisor & 0x80000000UL) == 0) {
1D94  EFD2     GOTO 0x1DA4
1D96  F00E     NOP
1DA4  AE21     BTFSS data, 7, ACCESS
1DA6  EFD7     GOTO 0x1DAE
1DA8  F00E     NOP
1DAA  EFD9     GOTO 0x1DB2
1DAC  F00E     NOP
1DAE  EFCC     GOTO 0x1D98
1DB0  F00E     NOP
16:            			divisor <<= 1;
1D98  90D8     BCF STATUS, 0, ACCESS
1D9A  361E     RLCF counter, F, ACCESS
1D9C  361F     RLCF sign, F, ACCESS
1D9E  3620     RLCF releaseAction, F, ACCESS
1DA0  3621     RLCF data, F, ACCESS
17:            			counter++;
1DA2  2A22     INCF quotient, F, ACCESS
18:            		}
19:            		do {
20:            			if((unsigned long)divisor <= (unsigned long)dividend)
1DB2  501E     MOVF counter, W, ACCESS
1DB4  5C1A     SUBWF pressAction, W, ACCESS
1DB6  501F     MOVF sign, W, ACCESS
1DB8  581B     SUBWFB 0x1B, W, ACCESS
1DBA  5020     MOVF releaseAction, W, ACCESS
1DBC  581C     SUBWFB divisor, W, ACCESS
1DBE  5021     MOVF data, W, ACCESS
1DC0  581D     SUBWFB holdAction, W, ACCESS
1DC2  A0D8     BTFSS STATUS, 0, ACCESS
1DC4  EFE6     GOTO 0x1DCC
1DC6  F00E     NOP
1DC8  EFE8     GOTO 0x1DD0
1DCA  F00E     NOP
1DCC  EFF0     GOTO 0x1DE0
1DCE  F00E     NOP
21:            				dividend -= divisor;
1DD0  501E     MOVF counter, W, ACCESS
1DD2  5E1A     SUBWF pressAction, F, ACCESS
1DD4  501F     MOVF sign, W, ACCESS
1DD6  5A1B     SUBWFB 0x1B, F, ACCESS
1DD8  5020     MOVF releaseAction, W, ACCESS
1DDA  5A1C     SUBWFB divisor, F, ACCESS
1DDC  5021     MOVF data, W, ACCESS
1DDE  5A1D     SUBWFB holdAction, F, ACCESS
22:            			*(unsigned long int *)&divisor >>= 1;
1DE0  90D8     BCF STATUS, 0, ACCESS
1DE2  3221     RRCF data, F, ACCESS
1DE4  3220     RRCF releaseAction, F, ACCESS
1DE6  321F     RRCF sign, F, ACCESS
1DE8  321E     RRCF counter, F, ACCESS
23:            		} while(--counter != 0);
1DEA  2E22     DECFSZ quotient, F, ACCESS
1DEC  EFD9     GOTO 0x1DB2
1DEE  F00E     NOP
24:            	}
25:            	return dividend;
1DF0  C01A     MOVFF pressAction, pressAction
1DF2  F01A     NOP
1DF4  C01B     MOVFF 0x1B, 0x1B
1DF6  F01B     NOP
1DF8  C01C     MOVFF divisor, divisor
1DFA  F01C     NOP
1DFC  C01D     MOVFF holdAction, holdAction
1DFE  F01D     NOP
26:            }
1E00  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.41/sources/common/lldiv.c  ---------------------------------
1:             // long unsigned unsigned division
2:             
3:             unsigned long int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __lldiv(unsigned long int divisor, unsigned long int dividend)
7:             #else
8:             __lldiv(unsigned long int dividend, unsigned long int divisor)
9:             #endif
10:            {
11:            	unsigned long int	quotient;
12:            	unsigned char	counter;
13:            
14:            	quotient = 0;
1B1C  6A22     CLRF quotient, ACCESS
1B1E  6A23     CLRF activeLogicLevel, ACCESS
1B20  6A24     CLRF data, ACCESS
1B22  6A25     CLRF data, ACCESS
15:            	if(divisor != 0) {
1B24  501E     MOVF counter, W, ACCESS
1B26  101F     IORWF sign, W, ACCESS
1B28  1020     IORWF releaseAction, W, ACCESS
1B2A  1021     IORWF data, W, ACCESS
1B2C  B4D8     BTFSC STATUS, 2, ACCESS
1B2E  EF9B     GOTO 0x1B36
1B30  F00D     NOP
1B32  EF9D     GOTO 0x1B3A
1B34  F00D     NOP
1B36  EFD3     GOTO 0x1BA6
1B38  F00D     NOP
16:            		counter = 1;
1B3A  0E01     MOVLW 0x1
1B3C  6E26     MOVWF counter, ACCESS
17:            		while((divisor & 0x80000000UL) == 0) {
1B3E  EFA7     GOTO 0x1B4E
1B40  F00D     NOP
1B4E  AE21     BTFSS data, 7, ACCESS
1B50  EFAC     GOTO 0x1B58
1B52  F00D     NOP
1B54  EFAE     GOTO 0x1B5C
1B56  F00D     NOP
1B58  EFA1     GOTO 0x1B42
1B5A  F00D     NOP
18:            			divisor <<= 1;
1B42  90D8     BCF STATUS, 0, ACCESS
1B44  361E     RLCF counter, F, ACCESS
1B46  361F     RLCF sign, F, ACCESS
1B48  3620     RLCF releaseAction, F, ACCESS
1B4A  3621     RLCF data, F, ACCESS
19:            			counter++;
1B4C  2A26     INCF counter, F, ACCESS
20:            		}
21:            		do {
22:            			quotient <<= 1;
1B5C  90D8     BCF STATUS, 0, ACCESS
1B5E  3622     RLCF quotient, F, ACCESS
1B60  3623     RLCF activeLogicLevel, F, ACCESS
1B62  3624     RLCF data, F, ACCESS
1B64  3625     RLCF data, F, ACCESS
23:            			if(divisor <= dividend) {
1B66  501E     MOVF counter, W, ACCESS
1B68  5C1A     SUBWF pressAction, W, ACCESS
1B6A  501F     MOVF sign, W, ACCESS
1B6C  581B     SUBWFB 0x1B, W, ACCESS
1B6E  5020     MOVF releaseAction, W, ACCESS
1B70  581C     SUBWFB divisor, W, ACCESS
1B72  5021     MOVF data, W, ACCESS
1B74  581D     SUBWFB holdAction, W, ACCESS
1B76  A0D8     BTFSS STATUS, 0, ACCESS
1B78  EFC0     GOTO 0x1B80
1B7A  F00D     NOP
1B7C  EFC2     GOTO 0x1B84
1B7E  F00D     NOP
1B80  EFCB     GOTO 0x1B96
1B82  F00D     NOP
24:            				dividend -= divisor;
1B84  501E     MOVF counter, W, ACCESS
1B86  5E1A     SUBWF pressAction, F, ACCESS
1B88  501F     MOVF sign, W, ACCESS
1B8A  5A1B     SUBWFB 0x1B, F, ACCESS
1B8C  5020     MOVF releaseAction, W, ACCESS
1B8E  5A1C     SUBWFB divisor, F, ACCESS
1B90  5021     MOVF data, W, ACCESS
1B92  5A1D     SUBWFB holdAction, F, ACCESS
25:            				quotient |= 1;
1B94  8022     BSF quotient, 0, ACCESS
26:            			}
27:            			divisor >>= 1;
1B96  90D8     BCF STATUS, 0, ACCESS
1B98  3221     RRCF data, F, ACCESS
1B9A  3220     RRCF releaseAction, F, ACCESS
1B9C  321F     RRCF sign, F, ACCESS
1B9E  321E     RRCF counter, F, ACCESS
28:            		} while(--counter != 0);
1BA0  2E26     DECFSZ counter, F, ACCESS
1BA2  EFAE     GOTO 0x1B5C
1BA4  F00D     NOP
29:            	}
30:            	return quotient;
1BA6  C022     MOVFF quotient, pressAction
1BA8  F01A     NOP
1BAA  C023     MOVFF activeLogicLevel, 0x1B
1BAC  F01B     NOP
1BAE  C024     MOVFF data, divisor
1BB0  F01C     NOP
1BB2  C025     MOVFF data, holdAction
1BB4  F01D     NOP
31:            }
1BB6  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.41/sources/common/doprnt.c  --------------------------------
1:             #include	<stdio.h>
2:             #include	<ctype.h>
3:             #include	<stdlib.h>
4:             #include	<string.h>
5:             #include	<stdarg.h>
6:             #include	<conio.h>
7:             #include	<sys.h>
8:             #include	<math.h>
9:             #include	<float.h>
10:            
11:            // disable unused variable warnings
12:            // the compiler will optimize them away, so no harm is done
13:            #pragma warning disable 350
14:            
15:            /*
16:             *	doprnt - versions depends on conditional compilation.
17:             *	Can be customized with defines.
18:             *
19:             *	Copyright (c) 2012 Microchip Technology Inc. All rights reserved.
20:             *
21:             *	$Header$
22:             *
23:             */
24:            
25:            #ifndef	CUSTOM_PRINTF
26:            
27:             // define all flags, thus enabling all features
28:            
29:            #define	BASEM	0xC0
30:            #define	OPTSIGN	0x00
31:            #define	SPCSIGN	0x01
32:            #define	MANSIGN	0x02
33:            #define	NEGSIGN	0x03
34:            #define	FILL	0x04
35:            #define	LEFT	0x08
36:            #define	LONG	0x10
37:            #define	UPCASE	0x20
38:            #define	TEN		0x00
39:            #define	EIGHT	0x40
40:            #define	SIXTEEN	0x80
41:            #define	UNSIGN	0xC0
42:            #ifdef	__FLOAT
43:            #define	EFMT	0x100
44:            #define	GFMT	0x200
45:            #define	FFMT	0x400
46:            #endif	// __FLOAT
47:            #define	ALTERN	0x800
48:            #define POINTER	0x2000
49:            #define HEXUPCASE
50:            #define HEXLOWCASE
51:            
52:             // defines for ifdef only, not used as flags
53:            #define	WIDTH	1		// width used
54:            #define	STAR	1		// width or precision as an arg
55:            #define	STRING	1		// %s used
56:            #define	CHAR	1		// %c used
57:            #define	PERCPERC	1	// %% used
58:            #define	SPRINTF	1		// sprintf is used
59:            #define	PRINTF	1		// printf is used
60:            #define	MULTRAD	1		// handle multiple radices
61:            #define	RETVALUE	1	// return value is needed
62:            
63:            #else	// CUSTOM_PRINTF
64:            
65:            #if	defined(HEXUPCASE) || defined(HEXLOWCASE)
66:            #define	SIXTEEN
67:            #endif
68:            
69:            #if	defined(HEXUPCASE) && defined(HEXLOWCASE)
70:            #ifndef UPCASE
71:            #define	UPCASE
72:            #endif
73:            #endif
74:            
75:             // make sure we have the right values for each define
76:            #ifdef	OPTSIGN
77:            #undef	OPTSIGN
78:            #define	OPTSIGN	0x00
79:            #endif
80:            #ifdef	SPCSIGN
81:            #undef	SPCSIGN
82:            #define	SPCSIGN	0x01
83:            #endif
84:            #ifdef	MANSIGN
85:            #undef	MANSIGN
86:            #define	MANSIGN	0x02
87:            #define	SPCSIGN	0x01
88:            #endif
89:            #ifdef	NEGSIGN
90:            #undef	NEGSIGN
91:            #define	NEGSIGN	0x03
92:            #endif
93:            #ifdef	FILL
94:            #define	WIDTH	1
95:            #undef	FILL
96:            #define	FILL	0x04
97:            #endif
98:            #ifdef	LEFT
99:            #undef	LEFT
100:            // LEFT without WIDTH is meaningless
101:           #ifdef	WIDTH
102:           #define	LEFT	0x08
103:           #endif
104:           #endif
105:           #ifdef	LONG
106:           #undef	LONG
107:           #define	LONG	0x10
108:           #define	__LONG	1
109:           #endif
110:           #ifdef	UPCASE
111:           #undef	UPCASE
112:           #define	UPCASE	0x20
113:           #endif
114:           #ifdef	TEN	
115:           #undef	TEN	
116:           #define	TEN		0x00
117:           #endif
118:           #ifdef	EIGHT
119:           #undef	EIGHT
120:           #define	EIGHT	0x40
121:           #endif
122:           #ifdef	SIXTEEN
123:           #undef	SIXTEEN
124:           #define	SIXTEEN	0x80
125:           #endif
126:           #ifdef	UNSIGN
127:           #undef	UNSIGN
128:           #define	UNSIGN	0xC0
129:           #endif
130:           #ifdef	EFMT
131:           #undef	EFMT
132:           #define	EFMT	0x100
133:           #endif
134:           #ifdef	GFMT
135:           #undef	GFMT
136:           #define	GFMT	0x200
137:           #endif
138:           #ifdef	FFMT
139:           #undef	FFMT
140:           #define	FFMT	0x400
141:           #endif
142:           #ifdef	ALTERN
143:           #undef	ALTERN
144:           #define	ALTERN	0x800
145:           #endif
146:           #ifdef	POINTER
147:           #undef	POINTER
148:           #define POINTER	0x2000
149:           #ifndef	SIXTEEN
150:           #define	SIXTEEN	0x80
151:           #endif
152:           #endif
153:           #ifdef	PRECISION
154:           #undef	PRECISION
155:           #define PRECISION	0x4000
156:           #endif
157:           
158:           #if	defined(TEN) && !defined(EIGHT) && !defined(SIXTEEN) && defined(UNSIGN)
159:           #undef	UNSIGN
160:           #define	UNSIGN	0x40
161:           #define	BASEM	UNSIGN
162:           #endif
163:           #if	defined(UNSIGN) && (defined(EIGHT) || defined(SIXTEEN))
164:           #define	MULTRAD	1
165:           #define	BASEM	(UNSIGN)
166:           #endif
167:           #if	defined(TEN) && !defined(SIXTEEN) && defined(EIGHT) && !defined(UNSIGN)
168:           #define	BASEM	EIGHT
169:           #define	MULTRAD	1
170:           #endif
171:           #if	defined(TEN) && defined(SIXTEEN) && !defined(EIGHT) && !defined(UNSIGN)
172:           #define	BASEM	SIXTEEN
173:           #define	MULTRAD	1
174:           #endif
175:           #if	defined(SIXTEEN) && defined(EIGHT) && !defined(BASEM)
176:           #define	BASEM	(SIXTEEN|EIGHT)
177:           #define	MULTRAD	1
178:           #endif
179:           
180:           #endif
181:           
182:            // float code needs these flags
183:           #if	defined(EFMT) || defined(GFMT) || defined(FFMT)
184:           #ifndef	__FLOAT
185:           #define	__FLOAT	1
186:           #endif
187:           #define	FLOATFORMAT	0x700
188:           #ifdef	PRECISION
189:           #define	DEFPREC	0x1000
190:           #endif
191:           #endif
192:           
193:           #ifdef	__FLOAT
194:           //#ifndef	MANSIGN
195:           //#define	MANSIGN	0x02
196:           //#endif
197:           //#ifndef	SPCSIGN
198:           //#define	SPCSIGN	0x01
199:           //#endif
200:           #ifndef	NEGSIGN
201:           #define	NEGSIGN	0x03
202:           #endif
203:           //#ifndef	WIDTH
204:           //#define	WIDTH	1
205:           //#endif
206:           #endif
207:           
208:           #ifdef	SPCSIGN
209:           #define	putsign()	pputc(flag & SPCSIGN ? '-' : '+')
210:           #else
211:           #define	putsign()	pputc('-')
212:           #endif	// SPCSIGN
213:           
214:           // were there ANY % formats defined?
215:           #if	defined(FLOATFORMAT) || defined(TEN) || defined(EIGHT) || defined(SIXTEEN) || \
216:           	defined(CHAR) || defined(POINTER) || defined(STRING) || defined(UNSIGN) || defined(PERCPERC)
217:           #define	ANYFORMAT
218:           #else
219:           #undef	ANYFORMAT
220:           #endif
221:           
222:           #ifdef	CHAR
223:           #ifndef	PERCPERC
224:           #define	PERCPERC
225:           #endif
226:           #endif
227:           
228:           #if	!defined(PRINTF) && !defined(VPRINTF) && !defined(SPRINTF) && !defined(VSPRINTF)
229:           #error	Must define at least one of PRINTF SPRINTF or VSPRINTF
230:           #endif
231:           
232:           #if	i8086 && SMALL_DATA
233:           #define	CONST	far
234:           #else
235:           #define	CONST	const
236:           #endif
237:           
238:            /* we don't need plus signs, use minus signs only if we have floats or signed ints */
239:           
240:           #if	!defined(NEGSIGN) && defined(TEN)
241:           #define	NEGSIGN	0x03
242:           #endif
243:           
244:           #ifndef	RETVALUE
245:           #define	INCR_CNT	/*nix */
246:           #else
247:           #define	INCR_CNT	,(++ccnt)
248:           #endif
249:           
250:           #if	defined(EFMT) || defined(GFMT) || defined(FFMT) || defined(ALTERN) || defined(DEFPREC) || defined(POINTER)
251:           #define	FLAG_SIZE	unsigned short
252:           #else
253:           #define	FLAG_SIZE	unsigned char
254:           #endif
255:           
256:           
257:           #if	(sizeof(long) == sizeof(int) || defined(__FLOAT)) && !defined(__LONG)
258:           #define	__LONG	1
259:           #endif
260:           
261:           #if	sizeof(double) == sizeof(long) && DBL_MAX_EXP == 128
262:           #undef	frexp
263:           #define	frexp(val, ptr) (void)(*(ptr) = (unsigned char)((*(unsigned long *)&val >> 23) & 255) - 126)
264:           #elif	defined(_PSOC_)
265:           #undef	frexp
266:           #define	frexp(val, ptr) (void)(*(ptr) = ((unsigned char)(*(unsigned short long *)&val >> 15)) - 126)
267:           #elif	sizeof(double) == 3 && DBL_MAX_EXP == 128
268:           #undef	frexp
269:           #define	frexp(val, ptr) (void)(*(ptr) = ((*(unsigned long *)&val >> 15) & 255) - 126)
270:           #endif
271:           
272:           #if	defined(__FLOAT) && sizeof(double) == 8
273:           #define	DOUBLE	1
274:           
275:           extern double	_dto64i(double);
276:           extern double	_64itod(double);
277:           extern double	_div64(double, double);
278:           extern double	_divto64i(double, double);
279:           extern unsigned	_div64ir(double, double);
280:           extern unsigned	_mod64i10(double);
281:           
282:           #else
283:           #define	DOUBLE	0
284:           #endif
285:           
286:           #ifdef	__LONG
287:           #define	value	long
288:           #define	NDIG	12		/* max number of digits to be printed */
289:           #else
290:           #define	value	int
291:           #define	NDIG	6		/* max number of digits to be printed */
292:           #endif
293:           
294:           #if	DOUBLE
295:           union {
296:           	unsigned long	ul[40];
297:           	double		db[20];
298:           }	_fdp =
299:           {
300:           #if	!defined(BIG_ENDIAN) && !defined(LITTLE_ENDIAN)
301:           #error Neither BIG_ENDIAN or LITTLE_ENDIAN has been set
302:           #endif
303:           #if	BIG_ENDIAN
304:           	0x00000000,0x00000001,
305:           	0x00000000,0x0000000A,
306:           	0x00000000,0x00000064,
307:           	0x00000000,0x000003E8,
308:           	0x00000000,0x00002710,
309:           	0x00000000,0x000186A0,
310:           	0x00000000,0x000F4240,
311:           	0x00000000,0x00989680,
312:           	0x00000000,0x05F5E100,
313:           	0x00000000,0x3B9ACA00,
314:           	0x00000002,0x540BE400,
315:           	0x00000017,0x4876E800,
316:           	0x000000E8,0xD4A51000,
317:           	0x00000918,0x4E72A000,
318:           	0x00005AF3,0x107A4000,
319:           	0x00038D7E,0xA4C68000,
320:           	0x002386F2,0x6FC10000,
321:           	0x01634578,0x5D8A0000,
322:           	0x0DE0B6B3,0xA7640000,
323:           	0x8AC72304,0x89E80000,
324:           #else
325:           	0x00000001,0x00000000,
326:           	0x0000000A,0x00000000,
327:           	0x00000064,0x00000000,
328:           	0x000003E8,0x00000000,
329:           	0x00002710,0x00000000,
330:           	0x000186A0,0x00000000,
331:           	0x000F4240,0x00000000,
332:           	0x00989680,0x00000000,
333:           	0x05F5E100,0x00000000,
334:           	0x3B9ACA00,0x00000000,
335:           	0x540BE400,0x00000002,
336:           	0x4876E800,0x00000017,
337:           	0xD4A51000,0x000000E8,
338:           	0x4E72A000,0x00000918,
339:           	0x107A4000,0x00005AF3,
340:           	0xA4C68000,0x00038D7E,
341:           	0x6FC10000,0x002386F2,
342:           	0x5D8A0000,0x01634578,
343:           	0xA7640000,0x0DE0B6B3,
344:           	0x89E80000,0x8AC72304,
345:           #endif
346:           };
347:           
348:           #define	fdpowers	_fdp.db
349:           
350:           #else
351:           #define	fdpowers	dpowers
352:           #endif
353:           #if defined(TEN) || defined(__FLOAT) || defined (UNSIGN)
354:           const static unsigned value	dpowers[] =	{1, 10, 100, 1000, 10000,
355:           #ifdef	__LONG
356:           						 100000, 1000000, 10000000, 100000000,
357:           						 1000000000
358:           #endif
359:           							 };
360:           #endif
361:           #ifdef	SIXTEEN
362:           const static unsigned value	hexpowers[] =	{1, 0x10, 0x100, 0x1000,
363:           #if	__LONG
364:           						 0x10000, 0x100000, 0x1000000, 0x10000000
365:           #endif
366:           							};
367:           #endif
368:           #ifdef	EIGHT
369:           const static unsigned value	octpowers[] =	{1, 010, 0100, 01000, 010000, 0100000,
370:           #ifdef	__LONG
371:           						01000000,
372:           						 010000000, 0100000000, 01000000000, 010000000000,
373:           						 0100000000000
374:           #endif
375:           							};
376:           #endif
377:           
378:           #ifdef	__FLOAT
379:           
380:           #define	NDDIG	(sizeof fdpowers/sizeof fdpowers[0])
381:           
382:           #if	DBL_MAX_10_EXP > 120
383:           #define	expon	int
384:           #else
385:           #define	expon	signed char
386:           #endif
387:           
388:           extern const double	_powers_[], _npowers_[];
389:           #ifdef	z80
390:           #define	_div_to_l_(a, b)	((unsigned long)((a)/(b)))
391:           #else
392:           extern unsigned long	_div_to_l_(double, double);
393:           #ifdef	_OMNI_CODE_
394:           extern unsigned long	_tdiv_to_l_(float, float);
395:           #ifdef	_HTKC_
396:           #pragma callname _div_to_l_ double
397:           #pragma callname _tdiv_to_l_ float
398:           #endif
399:           #define	div_to_l_(a,b)	((sizeof(double)== 3) ? _tdiv_to_l_(a,b) : _div_to_l_(a,b))
400:           #else
401:           #define	div_to_l_	_div_to_l_
402:           #endif
403:           #endif
404:           
405:           /* this routine returns a value to round to the number of decimal
406:           	places specified */
407:           #if __FLOAT
408:           static double
409:           fround(unsigned char prec)
410:           {
411:           	/* prec is guaranteed to be less than NDIG */
412:           
413:           	if(prec>=110)
414:           		return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npowers_[prec%10];
415:           	else if(prec > 10)
416:           		return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
417:           	return 0.5 * _npowers_[prec];
418:           }
419:           #endif
420:           
421:           /* this routine returns a scaling factor equal to 1 to the decimal
422:              power supplied */
423:           
424:           static double
425:           scale(expon scl)
426:           {
427:           
428:           	if(scl < 0) {
429:           		scl = -scl;
430:           		if(scl>=110)
431:           			return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl%10];
432:           		else if(scl > 10)
433:           			return _npowers_[scl/10+9] * _npowers_[scl%10];
434:           		return _npowers_[scl];
435:           	}
436:           	if(scl>=110)
437:           		return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10];
438:           	else if(scl > 10)
439:           		return _powers_[scl/10+9] * _powers_[scl%10];
440:           	return _powers_[scl];
441:           }
442:           
443:           
444:           #endif	/* __FLOAT */
445:           
446:           
447:           
448:           #ifdef	_HOSTED
449:           #define	pputc(c)	(putc(c, fp) != EOF && ++ccnt)
450:           int
451:           vfprintf(FILE * fp, register const  char * f, register va_list ap)
452:           {
453:           	char		cbuf[2];
454:           #else	/* _HOSTED */
455:           int
456:           #if	defined(VPRINTF) || (defined(PRINTF) && (defined(SPRINTF) || defined(VSPRINTF)))
457:           #define	pputc(c)	if(pb->func) (pb->func(c))INCR_CNT; else ((*pb->ptr++ = c)INCR_CNT)
458:           _doprnt(struct __prbuf * pb, register const  char * f, register va_list ap)
459:           {
460:           #endif
461:           
462:           #if	defined(PRINTF) && !(defined(SPRINTF) || defined(VSPRINTF))
463:           #define	pputc(c)	(putch(c) INCR_CNT)
464:           printf(const char * f, ...)
465:           {
466:           	va_list	ap;
467:           #define	NEED_START
468:           #endif
469:           
470:           #if	!defined(PRINTF) && defined(VSPRINTF)
471:           
472:           #ifdef	SPRINTF
473:           sprintf(char * sp, const char * f, ...)
474:           {
475:           	va_list	ap;
476:           
477:           	va_start(ap, f);
478:           	vsprintf(sp, f, ap);
479:           	va_end(ap);
480:           }
481:           int
482:           #endif	// SPRINTF
483:           
484:           #define	pputc(c)	((*sp++ = (c))INCR_CNT)
485:           vsprintf(char * sp, register const  char * f, register va_list ap)
486:           {
487:           #define NEED_START
488:           #endif	// VSPRINTF
489:           
490:           #if	!defined(PRINTF) && defined(SPRINTF) && !defined(VSPRINTF)
491:           #define	pputc(c)	((*sp++ = (c))INCR_CNT)
492:           sprintf(char * sp, const  char * f, ...)
493:           {
494:           	va_list	ap;
495:           #define	NEED_START
496:           #endif
497:           #endif	// HOSTED
498:           
499:           	signed char		c;
500:           #if	defined(WIDTH) || defined(__FLOAT)
501:           	int		width;
502:           #endif
503:           #ifdef	__LONG
504:           	int		prec;
505:           #else
506:           	signed char	prec;
507:           #endif
508:           	FLAG_SIZE	flag;
509:           #ifdef	RETVALUE
510:           	int		ccnt = 0;
511:           #else
512:           #define	ccnt	0
513:           #endif
514:           #ifdef	__FLOAT
515:           	char	d;
516:           	double	fval; 
517:           	int		exp;
518:           #if DOUBLE
519:           	double		ival;
520:           #endif
521:           #endif
522:           #if ! DOUBLE || __FLOAT
523:           	union {
524:           		unsigned long vd;
525:           		double integ;
526:           	} tmpval;
527:           #endif
528:           	unsigned value	val;
529:           	unsigned	len;
530:           	CONST char *	cp;
531:           	
532:           #ifdef	NEED_START
533:           	va_start(ap, f);
155C  0E29     MOVLW 0x29
155E  6E2B     MOVWF ap, ACCESS
534:           #endif
535:           
536:           	while(c = *f++) {
1560  EF21     GOTO 0x1642
1562  F00B     NOP
1642  2A28     INCF f, F, ACCESS
1644  0428     DECF f, W, ACCESS
1646  6E2A     MOVWF button, ACCESS
1648  C02A     MOVFF button, TBLPTR
164A  FFF6     NOP
164C  0E0F     MOVLW 0xF
164E  6EF7     MOVWF TBLPTRH, ACCESS
1650  0E00     MOVLW 0x0
1652  6EF8     MOVWF TBLPTRU, ACCESS
1654  0008     TBLRD*
1656  CFF5     MOVFF TABLAT, c
1658  F02C     NOP
165A  502C     MOVF c, W, ACCESS
165C  A4D8     BTFSS STATUS, 2, ACCESS
165E  EF33     GOTO 0x1666
1660  F00B     NOP
1662  EF35     GOTO 0x166A
1664  F00B     NOP
1666  EFB2     GOTO 0x1564
1668  F00A     NOP
537:           #ifdef	ANYFORMAT
538:           		if(c != '%')
1564  0E25     MOVLW 0x25
1566  182C     XORWF c, W, ACCESS
1568  B4D8     BTFSC STATUS, 2, ACCESS
156A  EFB9     GOTO 0x1572
156C  F00A     NOP
156E  EFBB     GOTO 0x1576
1570  F00A     NOP
1572  EF0A     GOTO 0x1614
1574  F00B     NOP
539:           #endif	//ANYFORMAT
540:           		{
541:           			pputc(c);
1576  502C     MOVF c, W, ACCESS
1578  ECB9     CALL 0x2172, 0
157A  F010     NOP
542:           			continue;
157C  EF21     GOTO 0x1642
157E  F00B     NOP
543:           		}
544:           #ifdef	ANYFORMAT
545:           #ifdef	WIDTH
546:           		width = 0;
547:           #endif
548:           		flag = 0;
549:           #if	defined(LEFT) || defined(SPCSIGN) || defined(MANSIGN) || defined(ALTERN) || defined(FILL)
550:           		for(;;) {
551:           			switch(*f) {
552:           #ifdef	LEFT
553:           			case '-':
554:           				flag |= LEFT;
555:           				f++;
556:           				continue;
557:           #endif
558:           
559:           #ifdef	SPCSIGN
560:           			case ' ':
561:           				flag |= SPCSIGN;
562:           				f++;
563:           				continue;
564:           #endif
565:           
566:           #ifdef	MANSIGN
567:           			case '+':
568:           				flag |= MANSIGN;
569:           				f++;
570:           				continue;
571:           #endif
572:           #ifdef	ALTERN
573:           			case '#':
574:           				flag |= ALTERN;
575:           				f++;
576:           				continue;
577:           #endif
578:           #ifdef	FILL
579:           			case '0':
580:           				flag |= FILL;
581:           				f++;
582:           				continue;
583:           #endif
584:           			}
585:           			break;
586:           		}
587:           #endif
588:           #if	defined(MANSIGN) && defined(SPCSIGN)
589:           		if(flag & MANSIGN)
590:           			flag &= ~SPCSIGN;
591:           #endif
592:           #if	defined(LEFT) && defined(FILL)
593:           		if(flag & LEFT)
594:           			flag &= ~FILL;
595:           #endif
596:           #ifdef	WIDTH
597:           		if(isdigit((unsigned)*f)) {
598:           			width = 0;
599:           			do {
600:           				width *= 10;
601:           			   	width += *f++ - '0';
602:           			} while(isdigit((unsigned)*f));
603:           #ifdef	STAR
604:           		} else if(*f == '*') {
605:           			width = va_arg(ap, int);
606:           			f++;
607:           #endif
608:           		}
609:           #endif
610:           #ifdef	PRECISION
611:           		if(*f == '.') {
612:           			flag |= PRECISION;
613:           			f++;
614:           #ifdef	STAR
615:           			if(*f == '*') {
616:           				prec = va_arg(ap, int);
617:           				f++;
618:           			} else
619:           #endif
620:           			{
621:           				prec = 0;
622:           				while(isdigit((unsigned)*f))
623:           					prec = prec*10 + *f++ - '0';
624:           			}
625:           		} else {
626:           			prec = 0;
627:           #ifdef	DEFPREC
628:           			flag |= DEFPREC;
629:           #endif	// DEFPREC
630:           		}
631:           #endif	// PRECISION
632:           #if	defined(__LONG) && defined(LONG)
633:           loop:
634:           #endif
635:           		switch(c = *f++) {
1614  2A28     INCF f, F, ACCESS
1616  0428     DECF f, W, ACCESS
1618  6E2A     MOVWF button, ACCESS
161A  C02A     MOVFF button, TBLPTR
161C  FFF6     NOP
161E  0E0F     MOVLW 0xF
1620  6EF7     MOVWF TBLPTRH, ACCESS
1622  0E00     MOVLW 0x0
1624  6EF8     MOVWF TBLPTRU, ACCESS
1626  0008     TBLRD*
1628  CFF5     MOVFF TABLAT, c
162A  F02C     NOP
162C  502C     MOVF c, W, ACCESS
162E  0A00     XORLW 0x0
1630  B4D8     BTFSC STATUS, 2, ACCESS
1632  EF35     GOTO 0x166A
1634  F00B     NOP
1636  0A73     XORLW 0x73
1638  B4D8     BTFSC STATUS, 2, ACCESS
163A  EFC0     GOTO 0x1580
163C  F00A     NOP
163E  EF21     GOTO 0x1642
1640  F00B     NOP
636:           
637:           		case 0:
638:           			goto alldone;
639:           
640:           #ifdef	LONG
641:           		case 'l':
642:           #ifdef	__LONG
643:           			flag |= LONG;
644:           			goto loop;
645:           #else
646:           			cp = "(non-long printf)";
647:           			goto strings;
648:           #endif
649:           #endif
650:           
651:           #ifdef	FLOATFORMAT
652:           #ifndef	__FLOAT
653:           		case 'E':
654:           		case 'f':
655:           		case 'e':
656:           		case 'G':
657:           		case 'g':
658:           			cp = "(non-float printf)";
659:           			goto strings;
660:           #else
661:           #ifdef	FFMT
662:           		case 'f':
663:           			flag |= FFMT;
664:           			break;
665:           #endif
666:           
667:           #ifdef	EFMT
668:           #ifdef	UPCASE
669:           		case 'E':
670:           			flag |= UPCASE;
671:           #endif
672:           		case 'e':
673:           			flag |= EFMT;
674:           			break;
675:           #endif
676:           
677:           #ifdef	GFMT
678:           #ifdef	UPCASE
679:           		case 'G':
680:           			flag |= UPCASE;
681:           #endif
682:           		case 'g':
683:           			flag |= GFMT;
684:           			break;
685:           #endif	// GFMT
686:           #endif
687:           #endif	// FLOATFORMAT
688:           #ifdef	EIGHT
689:           		case 'o':
690:           #ifdef	MULTRAD
691:           			flag |= EIGHT;
692:           #endif
693:           			break;
694:           #endif
695:           
696:           #ifdef	TEN
697:           		case 'd':
698:           		case 'i':
699:           			break;
700:           #endif
701:           
702:           #ifdef	POINTER
703:           		case 'p':
704:           #if	i8086 && LARGE_DATA
705:           			flag |= LONG;
706:           #elif	_PIC18
707:           			flag |= POINTER;
708:           #endif
709:           #endif	// POINTER
710:           #ifdef	SIXTEEN
711:           #ifdef	HEXUPCASE
712:           		case 'X':
713:           #ifdef	UPCASE
714:           			flag |= UPCASE;
715:           #endif
716:           #endif
717:           #if	defined(HEXLOWCASE) || !defined(UPCASE)
718:           		case 'x':
719:           #endif
720:           #ifdef	MULTRAD
721:           			flag |= SIXTEEN;
722:           #endif
723:           			break;
724:           #endif	// SIXTEEN
725:           
726:           #if	defined(STRING) || defined(PERCPERC)
727:           #ifdef	STRING
728:           		case 's':
729:           #if	i8086 && SMALL_DATA
730:           			if(flag & LONG)
731:           				cp = va_arg(ap, far char *);
732:           			else
733:           #endif
734:           				cp = va_arg(ap, const char *);
1580  502B     MOVF ap, W, ACCESS
1582  6ED9     MOVWF FSR2, ACCESS
1584  6ADA     CLRF FSR2H, ACCESS
1586  50DF     MOVF INDF2, W, ACCESS
1588  6E2A     MOVWF button, ACCESS
158A  C02A     MOVFF button, cp
158C  F02D     NOP
158E  6A2E     CLRF v, ACCESS
1590  2A2B     INCF ap, F, ACCESS
735:           #endif	// STRING
736:           #if	!defined(__FLOAT) && !defined(CUSTOM_PRINTF)
737:           strings:
738:           #endif
739:           #ifdef	STRING
740:           			if(!cp)
1592  502D     MOVF cp, W, ACCESS
1594  102E     IORWF v, W, ACCESS
1596  A4D8     BTFSS STATUS, 2, ACCESS
1598  EFD0     GOTO 0x15A0
159A  F00A     NOP
159C  EFD2     GOTO 0x15A4
159E  F00A     NOP
15A0  EFEF     GOTO 0x15DE
15A2  F00A     NOP
741:           				cp = "(null)";
15A4  0E17     MOVLW 0x17
15A6  6E2D     MOVWF cp, ACCESS
15A8  502D     MOVF cp, W, ACCESS
15AA  A4D8     BTFSS STATUS, 2, ACCESS
15AC  0E0F     MOVLW 0xF
15AE  6E2E     MOVWF v, ACCESS
15B0  EFEF     GOTO 0x15DE
15B2  F00A     NOP
742:           #endif
743:           #if	defined(WIDTH) || defined(PRECISION)
744:           #if	defined(STRING)
745:           			len = 0;
746:           			while(cp[len])
747:           				len++;
748:           #endif
749:           #ifdef	PERCPERC
750:           dostring:
751:           #endif
752:           #ifdef	PRECISION
753:           			if(prec && prec < len)
754:           				len = prec;
755:           #endif	// PRECISION
756:           #ifdef	WIDTH
757:           			if(width > len)
758:           				width -= len;
759:           			else
760:           				width = 0;
761:           #ifdef	LEFT
762:           			if(!(flag & LEFT))
763:           #endif	// LEFT
764:           				while(width--)
765:           					pputc(' ');
766:           #endif	// WIDTH
767:           			while(len--)
768:           				pputc(*cp++);
769:           #ifdef	LEFT
770:           			if(flag & LEFT)
771:           				while(width--)
772:           					pputc(' ');
773:           #endif	// LEFT
774:           			continue;
775:           #else	// WIDTH || PRECISION
776:           #if	defined(STRING)
777:           			while(*cp)
15DE  C02D     MOVFF cp, TBLPTR
15E0  FFF6     NOP
15E2  C02E     MOVFF v, TBLPTRH
15E4  FFF7     NOP
15E6  0E00     MOVLW 0x0
15E8  6EF8     MOVWF TBLPTRU, ACCESS
15EA  0E0E     MOVLW 0xE
15EC  64F7     CPFSGT TBLPTRH, ACCESS
15EE  D003     BRA 0x15F6
15F0  0008     TBLRD*
15F2  50F5     MOVF TABLAT, W, ACCESS
15F4  D005     BRA 0x1600
15F6  CFF6     MOVFF TBLPTR, FSR0
15F8  FFE9     NOP
15FA  CFF7     MOVFF TBLPTRH, FSR0H
15FC  FFEA     NOP
15FE  50EF     MOVF INDF0, W, ACCESS
1600  0900     IORLW 0x0
1602  A4D8     BTFSS STATUS, 2, ACCESS
1604  EF06     GOTO 0x160C
1606  F00B     NOP
1608  EF08     GOTO 0x1610
160A  F00B     NOP
160C  EFDA     GOTO 0x15B4
160E  F00A     NOP
1610  EF21     GOTO 0x1642
1612  F00B     NOP
778:           				pputc(*cp++);
15B4  C02D     MOVFF cp, TBLPTR
15B6  FFF6     NOP
15B8  C02E     MOVFF v, TBLPTRH
15BA  FFF7     NOP
15BC  0E00     MOVLW 0x0
15BE  6EF8     MOVWF TBLPTRU, ACCESS
15C0  0E0E     MOVLW 0xE
15C2  64F7     CPFSGT TBLPTRH, ACCESS
15C4  D003     BRA 0x15CC
15C6  0008     TBLRD*
15C8  50F5     MOVF TABLAT, W, ACCESS
15CA  D005     BRA 0x15D6
15CC  CFF6     MOVFF TBLPTR, FSR0
15CE  FFE9     NOP
15D0  CFF7     MOVFF TBLPTRH, FSR0H
15D2  FFEA     NOP
15D4  50EF     MOVF INDF0, W, ACCESS
15D6  ECB9     CALL 0x2172, 0
15D8  F010     NOP
15DA  4A2D     INFSNZ cp, F, ACCESS
15DC  2A2E     INCF v, F, ACCESS
779:           			continue;
780:           #endif
781:           #endif	// WIDTH || PRECISION
782:           #endif	// defined(STRING) || defined(PERCPERC)
783:           #ifdef	CHAR
784:           		case 'c':
785:           #if	_HOSTED
786:           			val = va_arg(ap, int);
787:           			c = val >> 8;
788:           			if(flag & LONG && c && (unsigned char)c != 0xFF) {
789:           				cbuf[0] = c;
790:           				cbuf[1] = val;
791:           				len = 2;
792:           			} else {
793:           				cbuf[0] = val;
794:           				len = 1;
795:           			}
796:           			cp = cbuf;
797:           			goto dostring;
798:           #else
799:           			c = va_arg(ap, int);
800:           #endif	// _HOSTED
801:           #endif	// CHAR
802:           		default:
803:           #ifdef	PERCPERC
804:           #if	defined(WIDTH) || defined(PRECISION)
805:           			cp = (char *)&c;
806:           			len = 1;
807:           			goto dostring;
808:           #else
809:           			pputc(c);
810:           			continue;
811:           #endif
812:           #else	// PERCPERC
813:           			continue;
814:           #endif
815:           
816:           #ifdef	UNSIGN
817:           		case 'u':
818:           			flag |= UNSIGN;
819:           			break;
820:           #endif
821:           
822:           		}
823:           #endif	// ANYFORMAT
824:           #ifdef	__FLOAT
825:           		if(flag & (FLOATFORMAT)) {
826:           #ifdef	DEFPREC
827:           			if(flag & DEFPREC)
828:           #endif
829:           				prec = 6;
830:           			fval = va_arg(ap, double);	// source the floating point value
831:           			if(fval < 0.0) {
832:           				fval = -fval;		// get the absolute value
833:           				flag |= NEGSIGN;
834:           			}
835:           			exp = 0;		/* If the number is zero, the exponent is zero. */
836:           			if( fval!=0) {		/* If the number is non-zero, find the exponent. */
837:           				frexp(fval, &exp);		/* get binary exponent */
838:           				exp--;				/* adjust 0.5 -> 1.0 */
839:           				exp *= 3;
840:           				exp /= 10;			/* estimate decimal exponent */
841:           				if(exp < 0)
842:           					exp--;
843:           				// the following line can cause "recursive call" errors because scale calls
844:           				// ftmul, and is used when evaluating an argument to ftmul
845:           				//integ = fval * scale(-exp);
846:           				tmpval.integ = scale(-exp);		// replaced with this
847:           				tmpval.integ *= fval;
848:           				if(tmpval.integ < 1.0)
849:           					exp--;
850:           				else if(tmpval.integ >= 10.0)
851:           					exp++;
852:           			}
853:           #if	defined(EFMT) || defined(GFMT)
854:           			if(exp <= 0)	// value is 0.??? (neg expnt) whole characters = 1 (allow zero)
855:           				c = 1;
856:           			else
857:           				c = exp;
858:           			if(
859:           #ifdef	EFMT
860:           					flag & EFMT
861:           #ifdef	GFMT
862:           					||
863:           #endif
864:           #endif
865:           #ifdef	GFMT
866:           					flag & GFMT && (exp < -4 || exp >= (int)prec)
867:           #endif
868:           				) {	/* use e format */
869:           #ifdef	GFMT
870:           				if(prec && flag & GFMT)
871:           					prec--;		/* g format precision includes integer digit */
872:           #endif
873:           				if((unsigned)prec > NDDIG - 2)
874:           					c = NDDIG - 2;
875:           				else
876:           					c = prec;
877:           				if( fval!=0) {	/* Normalise only if the number is non-zero. */
878:           					fval /= scale(exp-c);
879:           #if	DOUBLE
880:           					ival = _dto64i(fval);
881:           					if(fval - _64itod(ival) >= 0.5) {
882:           						fval += 0.5;
883:           						ival = _dto64i(fval);
884:           					}
885:           					if(ival >= fdpowers[c+1]) {
886:           						fval *= 1e-1;
887:           						exp++;
888:           					} else if(ival < fdpowers[c]) {
889:           						fval *= 10.0;
890:           						exp--;
891:           					}
892:           #else	
893:           					if(fval - (double)(unsigned long)fval >= 0.5)
894:           						fval += 0.5;
895:           					if((unsigned long)fval >= fdpowers[c+1]) {
896:           						fval *= 1e-1;
897:           						exp++;
898:           					} else if((unsigned long)fval < fdpowers[c]) {
899:           						fval *= 10.0;
900:           						exp--;
901:           					}
902:           #endif
903:           				}
904:           #if defined(GFMT) && defined(ALTERN)
905:           				if(flag & GFMT && !(flag & ALTERN)) {		/* g format, precision means something different */
906:           					if(prec > (int)(NDDIG))
907:           						prec = NDDIG;
908:           #if	DOUBLE
909:           					ival = _dto64i(fval);
910:           					while(ival != 0.0 && _mod64i10(ival) == 0) {
911:           						prec--;
912:           						ival = _div64(ival, fdpowers[1]);
913:           					}
914:           #else
915:           					val = (unsigned long)fval;
916:           					while(val && val % 10 == 0) {
917:           						prec--;
918:           						val /= 10;
919:           					}
920:           #endif
921:           					if(prec < c) {
922:           						fval /= scale(c-prec);
923:           						c = prec;
924:           					}
925:           
926:           				}
927:           #endif
928:           #ifdef	WIDTH
929:           				width -=  prec + 5;
930:           #ifdef	ALTERN
931:           				if(prec || flag & ALTERN)
932:           					width--;
933:           #endif
934:           				if(flag & NEGSIGN)
935:           					width--;
936:           #if	DBL_MAX_10_EXP >= 100
937:           #if	DBL_MAX_10_EXP >= 1000
938:           				if(exp >= 1000 || exp <= -1000)	/* 4 digit exponent */
939:           					width--;
940:           #endif
941:           				if(exp >= 100 || exp <= -100)	/* 3 digit exponent */
942:           					width--;
943:           #endif
944:           #endif	// WIDTH
945:           #ifdef	FILL
946:           				if(flag & FILL) {
947:           #if defined(MANSIGN) && defined(SPCSIGN)
948:           					if(flag & MANSIGN)
949:           						pputc(flag & SPCSIGN ? '-' : '+');
950:           					else if(flag & SPCSIGN)
951:           						pputc(' ');
952:           #endif
953:           					while(width > 0) {
954:           						pputc('0');
955:           						width--;
956:           					}
957:           				} else
958:           #endif	// FILL
959:           				{
960:           #ifdef	WIDTH
961:           #ifdef	LEFT
962:           					if(!(flag & LEFT))
963:           #endif
964:           						while(width > 0) {
965:           							pputc(' ');
966:           							width--;
967:           						}
968:           #endif	// WIDTH
969:           #ifdef	MANSIGN
970:           					if(flag & MANSIGN)
971:           						putsign();
972:           #else
973:           					if(flag & NEGSIGN)
974:           						pputc('-');
975:           #endif	// MANSIGN
976:           #ifdef	SPCSIGN
977:           					else if(flag & SPCSIGN)
978:           						pputc(' ');
979:           #endif	// SPCSIGN
980:           				}
981:           #if	DOUBLE
982:           				ival = _dto64i(fval);
983:           				pputc(_div64ir(ival, fdpowers[c]) + '0');
984:           #else
985:           				val = (unsigned long)fval;
986:           				pputc(val/dpowers[c] + '0');
987:           				val %= dpowers[c];
988:           #endif
989:           #ifdef	ALTERN
990:           				if(prec || flag & ALTERN)
991:           #else
992:           				if(prec)
993:           #endif
994:           				{
995:           					pputc('.');
996:           					prec -= c;
997:           					while(c--) {
998:           #if	DOUBLE
999:           						pputc('0' + _mod64i10(_div64(ival, fdpowers[c])));
1000:          #else
1001:          #ifdef	GFMT
1002:          						if(flag & GFMT && val == 0) {
1003:          							prec = c = 0;
1004:          							break;
1005:          						}
1006:          #endif
1007:          						pputc('0' + (val/dpowers[c]));
1008:          						val %= dpowers[c];
1009:          #endif
1010:          					}
1011:          					while(prec) {
1012:          						pputc('0');
1013:          						prec--;
1014:          					}
1015:          				}
1016:          #ifdef	UPCASE
1017:          				if(flag & UPCASE)
1018:          					pputc('E');
1019:          				else
1020:          #endif
1021:          					pputc('e');
1022:          				if(exp < 0) {
1023:          					exp = -exp;
1024:          					pputc('-');
1025:          				} else
1026:          					pputc('+');
1027:          #if	DBL_MAX_10_EXP >= 100
1028:          #if	DBL_MAX_10_EXP >= 1000
1029:          				if(exp >= 1000) {
1030:          					pputc(exp / 1000 + '0');
1031:          					exp %= 1000;
1032:          				}
1033:          #endif
1034:          				if(exp >= 100) {
1035:          					pputc(exp / 100 + '0');
1036:          					exp %= 100;
1037:          				}
1038:          #endif
1039:          				pputc(exp / 10 + '0');
1040:          				pputc(exp % 10 + '0');
1041:          #ifdef	LEFT
1042:          				if((flag & LEFT) && width > 0)
1043:          					do
1044:          						pputc(' ');
1045:          					while(--width);
1046:          #endif	// LEFT
1047:          					continue;
1048:          				}
1049:          #endif	// EFMT || GFMT
1050:          				/* here for f format */
1051:          #if	DOUBLE
1052:          #ifdef	GFMT
1053:          				if(flag & GFMT) {
1054:          					if(exp < 0)	// fractional part only
1055:          						prec -= exp-1;
1056:          					ival = _dto64i(fval);
1057:          					for(c = 1 ; c != NDDIG ; c++)
1058:          						if(ival < fdpowers[c])
1059:          							break;
1060:          					if(prec > NDDIG)
1061:          						prec = NDDIG;
1062:          					prec -= c;
1063:          					ival = _dto64i((fval - _64itod(ival)) * scale(prec)+0.5);
1064:          					// see how many zeros are at the end of the fractional part
1065:          					while(prec && _mod64i10(ival) == 0) {
1066:          						prec--;
1067:          						ival = _div64(ival, fdpowers[1]);
1068:          					}
1069:          				}
1070:          #endif	// GFMT
1071:          				if(prec <= (int)NDDIG)
1072:          					fval += fround(prec);
1073:          				if(exp > (int)(NDDIG)-2) {
1074:          					exp -= NDDIG-2;
1075:          					ival = _divto64i(fval, scale(exp));
1076:          					fval = 0.0;
1077:          				} else {
1078:          					ival = _dto64i(fval);
1079:          					fval -= _64itod(ival);
1080:          					exp = 0;
1081:          				}
1082:          				for(c = 1 ; c != NDDIG ; c++)
1083:          					if(ival < fdpowers[c])
1084:          						break;
1085:          #else	// DOUBLE
1086:          #ifdef	GFMT
1087:          				if(flag & GFMT) {
1088:          					if(exp < 0)	// fractional part only
1089:          						prec -= (exp+1);
1090:          					// count number of digits in the integral part (this is for %g)
1091:          					val = (unsigned long)fval;
1092:          					for(c = 0 ; c != NDDIG ; c++)
1093:          						if(val < fdpowers[c])
1094:          							break;
1095:          					prec -= c;		// reduce precision by this
1096:          					if(prec <= NDIG)
1097:          						fval += fround(prec);
1098:          					// get fractional part and count trailing zeros - reduce
1099:          					// prec as required
1100:          					{
1101:          						double	temp;
1102:          						temp = scale(prec);
1103:          						temp *= fval - (double)val;
1104:          						val = (unsigned long)temp;
1105:          					}
1106:          					while(prec && val % 10 == 0) {
1107:          						val /= 10;
1108:          						prec--;
1109:          					}
1110:          				} else
1111:          #endif	//GFMT
1112:          					if(prec <= NDIG)
1113:          						fval += fround(prec);
1114:          
1115:          				/* ~4.2e9 is the largest float that will fit into a 32-bit long */
1116:          				if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
1117:          					// fval is > 4.2e9
1118:          					// new exp must be such that div_to_l() is < 4.2e9
1119:          					// OLD CODE:	if(fval / scale(exp) < 4.294967296){
1120:          					if(tmpval.integ < 4.294967296){
1121:          						exp -= NDDIG-1;
1122:          					}else{
1123:          						exp -= NDDIG-2;
1124:          					}
1125:          					tmpval.integ = scale(exp);
1126:          					val = div_to_l_(fval, tmpval.integ);
1127:           					//val = _div_to_l_(integ, fval);
1128:          					//val = (long)(integ * fval);	// fit as much signifigant data into the long as it can hold
1129:          					fval = 0.0;	// There will be no fractional component
1130:          				} else {
1131:          					val = (unsigned long)fval;
1132:          					fval -= (double)val;
1133:          					exp = 0;
1134:          				}
1135:          				// count digits in integral part
1136:          				for(c = 1 ; c != NDDIG ; c++)
1137:          					if(val < fdpowers[c])
1138:          						break;
1139:          #endif	// DOUBLE
1140:          #ifdef	WIDTH
1141:          				// at this point, c contains the number of whole-number digits to print
1142:          				width -= prec + c + exp;
1143:          				if(
1144:          #ifdef	ALTERN
1145:          						flag & ALTERN ||
1146:          #endif
1147:          						prec)
1148:          					width--;		// allow for decimal point
1149:          				if(flag & NEGSIGN)
1150:          					width--;
1151:          #endif	// WIDTH
1152:          #ifdef	FILL
1153:          				if(flag & FILL) {
1154:          #ifdef	MANSIGN
1155:          					if(flag & MANSIGN)
1156:          #else
1157:          					if(flag & NEGSIGN)
1158:          #endif	// MANSIGN
1159:          						putsign();
1160:          #if defined(MANSIGN) && defined(SPCSIGN)
1161:          					else
1162:          #endif
1163:          #ifdef	SPCSIGN
1164:          					if(flag & SPCSIGN)
1165:          						pputc(' ');
1166:          #endif	// SPCSIGN
1167:          #ifdef	WIDTH
1168:          					while(width > 0) {
1169:          						pputc('0');
1170:          						width--;
1171:          					}
1172:          #endif	// WIDTH
1173:          				} else
1174:          #endif	// FILL
1175:          				{
1176:          #ifdef	LEFT
1177:          					if(!(flag & LEFT))
1178:          #endif
1179:          #ifdef	WIDTH
1180:          					while(width > 0) {
1181:          						pputc(' ');
1182:          						width--;
1183:          					}
1184:          #endif	// WIDTH
1185:          #ifdef	MANSIGN
1186:          				if(flag & MANSIGN)
1187:          #else
1188:          				if(flag & NEGSIGN)
1189:          #endif	// MANSIGN
1190:          					putsign();
1191:          #ifdef	SPCSIGN
1192:          				else if(flag & SPCSIGN)
1193:          					pputc(' ');
1194:          #endif	// SPCSIGN
1195:          			}
1196:          			while(c--) {
1197:          #if	DOUBLE
1198:          				pputc('0' + _mod64i10(_div64(ival, fdpowers[c])));
1199:          #else
1200:          				{
1201:          					tmpval.vd = val/dpowers[c];
1202:          					tmpval.vd %= 10;
1203:          					pputc('0' + tmpval.vd);
1204:          				}
1205:          #endif	// DOUBLE
1206:          			}
1207:          			while(exp > 0) {
1208:          				pputc('0');
1209:          				exp--;
1210:          			}
1211:          			if(prec > (int)(NDDIG-2))
1212:          				c = NDDIG-2;
1213:          			else
1214:          				c = prec;
1215:          			prec -= c;
1216:          #ifdef	ALTERN
1217:          			if(c || flag & ALTERN)
1218:          #else
1219:          			if(c)
1220:          #endif
1221:          				pputc('.');
1222:          #if	DOUBLE
1223:          			ival = _dto64i(fval * scale(c));
1224:          			while(c)
1225:          				pputc('0' + _mod64i10(_div64(ival, fdpowers[--c])));
1226:          #else	// DOUBLE
1227:          			val = (long)(fval * scale(c));
1228:          			while(c--) {
1229:          				tmpval.vd = val/dpowers[c];
1230:          				tmpval.vd %= 10;
1231:          				pputc('0' + tmpval.vd);
1232:          				val %= dpowers[c];
1233:          			}
1234:          #endif	// DOUBLE
1235:          			while(prec) {
1236:          				pputc('0');
1237:          				prec--;
1238:          			}
1239:          #ifdef	LEFT
1240:          			if((flag & LEFT) && width > 0)
1241:          				do
1242:          					pputc(' ');
1243:          				while(--width);
1244:          #endif
1245:          			continue;
1246:          		}
1247:          #endif	/* __FLOAT */
1248:          
1249:          #if	defined(TEN)
1250:          #ifdef	BASEM
1251:          		if((flag & BASEM) == TEN)
1252:          #endif	//BASEM
1253:          		{
1254:          #ifdef	LONG
1255:          			if(flag & LONG)
1256:          				val = va_arg(ap, long);
1257:          			else
1258:          #endif	// LONG
1259:          				val = (value)va_arg(ap, int);
1260:          #ifdef	NEGSIGN
1261:          			if((value)val < 0) {
1262:          				flag |= NEGSIGN;
1263:          				val = -val;
1264:          			}
1265:          #endif
1266:          		}
1267:          #ifdef	BASEM
1268:          		else
1269:          #endif
1270:          #endif	// TEN
1271:          
1272:          #if	defined(EIGHT) || defined(SIXTEEN) || defined(UNSIGN)
1273:          		{
1274:          #ifdef	__LONG
1275:          #if	defined(_PIC18) && defined(POINTER)
1276:          			if(flag & POINTER)
1277:          				val = (unsigned long)va_arg(ap, far char *);
1278:          			else
1279:          #endif
1280:          #ifdef	LONG
1281:          				if(flag & LONG)
1282:          				val = va_arg(ap, unsigned long);
1283:          			else
1284:          #endif	// LONG
1285:          #endif	// __LONG
1286:          				val = va_arg(ap, unsigned);
1287:          		}
1288:          #endif	// EIGHT or SIXTEEN or UNSIGN
1289:          #ifdef	PRECISION
1290:          		if(prec == 0 && val == 0)
1291:          			prec++;
1292:          #endif
1293:          #ifdef	MULTRAD
1294:          		switch((unsigned char)(flag & BASEM)) {
1295:          #endif
1296:          #if	defined(TEN) || defined(UNSIGN)
1297:          #ifdef	MULTRAD
1298:          #ifdef	TEN
1299:          		case TEN:
1300:          #endif
1301:          #ifdef	UNSIGN
1302:          		case UNSIGN:
1303:          #endif
1304:          #endif	// MULTRAD
1305:          			for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
1306:          				if(val < dpowers[c])
1307:          					break;
1308:          #ifdef	MULTRAD
1309:          			break;
1310:          #endif
1311:          #endif	// TEN || UNSIGN
1312:          #ifdef	SIXTEEN
1313:          #ifdef	MULTRAD
1314:          		case SIXTEEN:
1315:          #endif	// MULTRAD
1316:          			for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
1317:          				if(val < hexpowers[c])
1318:          					break;
1319:          #ifdef	MULTRAD
1320:          			break;
1321:          #endif
1322:          #endif
1323:          
1324:          #ifdef	EIGHT
1325:          #ifdef	MULTRAD
1326:          		case EIGHT:
1327:          #endif	// MULTRAD
1328:          			for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
1329:          				if(val < octpowers[c])
1330:          					break;
1331:          #ifdef	MULTRAD
1332:          			break;
1333:          #endif
1334:          #endif
1335:          #ifdef	MULTRAD
1336:          		}
1337:          #endif
1338:          #ifdef	PRECISION
1339:          		if(c < prec)
1340:          			c = prec;
1341:          		else if(prec < c)
1342:          			prec = c;
1343:          #endif
1344:          #if	defined(WIDTH) && defined(NEGSIGN)
1345:          		if(width && flag & NEGSIGN)
1346:          			width--;
1347:          #ifdef	PRECISION
1348:          		if(flag & PRECISION) {
1349:          			if(width > prec)
1350:          				width -= prec;
1351:          			else
1352:          				width = 0;
1353:          		}
1354:          #endif
1355:          #ifdef	ALTERN
1356:          #ifdef	EIGHT
1357:          		if((flag & (
1358:          #ifdef	FILL
1359:          						FILL|
1360:          #endif
1361:          							BASEM|ALTERN)) == (EIGHT|ALTERN)) {
1362:          			if(width)
1363:          				width--;
1364:          		} else
1365:          #endif	// EIGHT
1366:          #if	defined(SIXTEEN)
1367:          #ifdef	BASEM
1368:          		if((flag & (BASEM|ALTERN)) == (SIXTEEN|ALTERN)) {
1369:          #else
1370:          		if(flag & ALTERN) {
1371:          #endif
1372:          			if(width > 2)
1373:          				width -= 2;
1374:          			else
1375:          				width = 0;
1376:          		}
1377:          #endif	// SIXTEEN
1378:          #endif	// ALTERN
1379:          #endif	// WIDTH
1380:          #ifdef	WIDTH
1381:          		if(width > c)
1382:          			width -= c;
1383:          		else
1384:          			width = 0;
1385:          #endif
1386:          #ifdef	FILL
1387:          		if(flag & FILL) {
1388:          #ifdef	MANSIGN
1389:          			if(flag & MANSIGN)
1390:          				putsign();
1391:          #elif defined(NEGSIGN)
1392:          			if(flag & NEGSIGN)
1393:          				pputc('-');
1394:          #endif
1395:          #if defined(MANSIGN) || defined(NEGSIGN) && defined(SPCSIGN)
1396:          			else
1397:          #endif	// MANSIGN
1398:          #ifdef	SPCSIGN
1399:          			if(flag & SPCSIGN)
1400:          				pputc(' ');
1401:          #endif
1402:          #if defined(ALTERN) && defined(SIXTEEN)
1403:          			else if((flag & (BASEM|ALTERN)) == (SIXTEEN|ALTERN)) {
1404:          				pputc('0');
1405:          #if	defined(HEXUPCASE) && defined(HEXLOWCASE)
1406:          				pputc(flag & UPCASE ? 'X' : 'x');
1407:          #elif defined(HEXUPCASE)
1408:          				pputc('X');
1409:          #else
1410:          				pputc('x');
1411:          #endif	// HEXUPCASE
1412:          			}
1413:          #endif	// ALTERN
1414:          #ifdef	WIDTH
1415:          			if(width)
1416:          				do
1417:          					pputc('0');
1418:          				while(--width);
1419:          #endif	// WIDTH
1420:          		} else
1421:          #endif	//FILL
1422:          		{
1423:          #ifdef	WIDTH
1424:          			if(width
1425:          #ifdef	LEFT
1426:          					&& !(flag & LEFT)
1427:          #endif
1428:          					)
1429:          				do
1430:          					pputc(' ');
1431:          				while(--width);
1432:          #endif	// WIDTH
1433:          #ifdef	MANSIGN
1434:          			if(flag & MANSIGN)
1435:          				putsign();
1436:          #else
1437:          #ifdef	NEGSIGN
1438:          			if(flag & NEGSIGN)
1439:          				pputc('-');
1440:          #endif
1441:          #endif	// MANSIGN
1442:          #ifdef	SPCSIGN
1443:          			else if(flag & SPCSIGN)
1444:          				pputc(' ');
1445:          #endif
1446:          #ifdef	ALTERN
1447:          #ifdef	EIGHT
1448:          			if((flag & (BASEM|ALTERN)) == (EIGHT|ALTERN))
1449:          				pputc('0');
1450:          			else
1451:          #endif	// EIGHT
1452:          #ifdef	SIXTEEN
1453:          #ifdef	BASEM
1454:          			if((flag & (BASEM|ALTERN)) == (SIXTEEN|ALTERN)) {
1455:          #else
1456:          			if(flag & ALTERN) {
1457:          #endif
1458:          				pputc('0');
1459:          #if	defined(HEXUPCASE) && defined(HEXLOWCASE)
1460:          				pputc(flag & UPCASE ? 'X' : 'x');
1461:          #elif defined(HEXUPCASE)
1462:          				pputc('X');
1463:          #else
1464:          				pputc('x');
1465:          #endif
1466:          			}
1467:          #endif	// SIXTEEN
1468:          #endif	// ALTERN
1469:          		}
1470:          #if	defined(SIXTEEN) || defined(TEN) || defined(EIGHT) || defined(UNSIGN)
1471:          #ifndef	PRECISION
1472:          		prec = c;
1473:          #endif
1474:          		while(prec--) {
1475:          #ifdef	MULTRAD
1476:          			switch((unsigned char)(flag & BASEM))
1477:          #endif
1478:          			{
1479:          
1480:          #if	defined(TEN) || defined(UNSIGN)
1481:          #ifdef	MULTRAD
1482:          #ifdef	TEN
1483:          		case TEN:
1484:          #endif
1485:          #ifdef	UNSIGN
1486:          		case UNSIGN:
1487:          #endif
1488:          #endif	// MULTRAD
1489:          				c = (val / dpowers[prec]) % 10 + '0';
1490:          #ifdef	MULTRAD
1491:          				break;
1492:          #endif
1493:          #endif	// TEN || UNSIGN
1494:          
1495:          #ifdef	SIXTEEN
1496:          #ifdef	MULTRAD
1497:          			case SIXTEEN:
1498:          #endif
1499:          			{
1500:          				unsigned char idx = (val / hexpowers[prec]) & 0xF;
1501:          #if	defined(HEXLOWCASE) && defined(HEXUPCASE)
1502:          				c = (flag & UPCASE ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
1503:          #elif	defined(HEXUPCASE)
1504:          				c = "0123456789ABCDEF"[idx];
1505:          #else
1506:          				c = "0123456789abcdef"[idx];
1507:          #endif	//HEXCASE
1508:          			}
1509:          #ifdef	MULTRAD
1510:          				break;
1511:          #endif
1512:          #endif
1513:          
1514:          #ifdef	EIGHT
1515:          #ifdef	MULTRAD
1516:          			case EIGHT:
1517:          #endif	// MULTRAD
1518:          				c = ((val / octpowers[prec]) & 07) + '0';
1519:          #ifdef	MULTRAD
1520:          				break;
1521:          #endif	// MULTRAD
1522:          #endif	// EIGHT
1523:          			}
1524:          			pputc(c);
1525:          		}
1526:          #endif	// 16 or 10 or 8
1527:          #ifdef	LEFT
1528:          		if((flag & LEFT) && width > 0)
1529:          			do
1530:          				pputc(' ');
1531:          			while(--width);
1532:          #endif	// LEFT
1533:          	}
1534:          #ifdef	ANYFORMAT
1535:          alldone:
1536:          #endif	// ANYFORMAT
1537:          #if	!defined(PRINTF) && (defined(SPRINTF) || defined(VSPRINTF))
1538:          	*sp = 0;
1539:          #endif
1540:          	return ccnt;
1541:          }
166A  0012     RETURN 0
1542:          
---  C:/Program Files (x86)/Microchip/xc8/v1.41/sources/common/awmod.c  ---------------------------------
1:             // integer signed unsigned modulus
2:             
3:             signed int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __awmod(signed int divisor, signed int dividend)
7:             #else
8:             __awmod(signed int dividend, signed int divisor)
9:             #endif
10:            {
11:            	unsigned char	counter, sign;
12:            
13:            	sign = 0;
191A  6A1F     CLRF sign, ACCESS
19C8  6A0D     CLRF __awmod, ACCESS
14:            	if(dividend < 0) {
191C  BE1B     BTFSC 0x1B, 7, ACCESS
191E  EF95     GOTO 0x192A
1920  F00C     NOP
1922  EF93     GOTO 0x1926
1924  F00C     NOP
1926  EF9B     GOTO 0x1936
1928  F00C     NOP
19CA  BE09     BTFSC 0x9, 7, ACCESS
19CC  EFEC     GOTO 0x19D8
19CE  F00C     NOP
19D0  EFEA     GOTO 0x19D4
19D2  F00C     NOP
19D4  EFF2     GOTO 0x19E4
19D6  F00C     NOP
15:            		dividend = -dividend;
192A  6C1A     NEGF pressAction, ACCESS
192C  1E1B     COMF 0x1B, F, ACCESS
192E  B0D8     BTFSC STATUS, 0, ACCESS
1930  2A1B     INCF 0x1B, F, ACCESS
19D8  6C08     NEGF dividend, ACCESS
19DA  1E09     COMF 0x9, F, ACCESS
19DC  B0D8     BTFSC STATUS, 0, ACCESS
19DE  2A09     INCF 0x9, F, ACCESS
16:            		sign = 1;
1932  0E01     MOVLW 0x1
1934  6E1F     MOVWF sign, ACCESS
19E0  0E01     MOVLW 0x1
19E2  6E0D     MOVWF __awmod, ACCESS
17:            	}
18:            	if(divisor < 0)
1936  BE1D     BTFSC holdAction, 7, ACCESS
1938  EFA2     GOTO 0x1944
193A  F00C     NOP
193C  EFA0     GOTO 0x1940
193E  F00C     NOP
1940  EFA6     GOTO 0x194C
1942  F00C     NOP
19E4  BE0B     BTFSC 0xB, 7, ACCESS
19E6  EFF9     GOTO 0x19F2
19E8  F00C     NOP
19EA  EFF7     GOTO 0x19EE
19EC  F00C     NOP
19EE  EFFD     GOTO 0x19FA
19F0  F00C     NOP
19:            		divisor = -divisor;
1944  6C1C     NEGF divisor, ACCESS
1946  1E1D     COMF holdAction, F, ACCESS
1948  B0D8     BTFSC STATUS, 0, ACCESS
194A  2A1D     INCF holdAction, F, ACCESS
19F2  6C0A     NEGF divisor, ACCESS
19F4  1E0B     COMF 0xB, F, ACCESS
19F6  B0D8     BTFSC STATUS, 0, ACCESS
19F8  2A0B     INCF 0xB, F, ACCESS
20:            	if(divisor != 0) {
194C  501C     MOVF divisor, W, ACCESS
194E  101D     IORWF holdAction, W, ACCESS
1950  B4D8     BTFSC STATUS, 2, ACCESS
1952  EFAD     GOTO 0x195A
1954  F00C     NOP
1956  EFAF     GOTO 0x195E
1958  F00C     NOP
195A  EFD3     GOTO 0x19A6
195C  F00C     NOP
19FA  500A     MOVF divisor, W, ACCESS
19FC  100B     IORWF 0xB, W, ACCESS
19FE  B4D8     BTFSC STATUS, 2, ACCESS
1A00  EF04     GOTO 0x1A08
1A02  F00D     NOP
1A04  EF06     GOTO 0x1A0C
1A06  F00D     NOP
1A08  EF2A     GOTO 0x1A54
1A0A  F00D     NOP
21:            		counter = 1;
195E  0E01     MOVLW 0x1
1960  6E1E     MOVWF counter, ACCESS
1A0C  0E01     MOVLW 0x1
1A0E  6E0C     MOVWF __awmod, ACCESS
22:            		while(((unsigned int)divisor & 0x8000U) == 0) {
1962  EFB7     GOTO 0x196E
1964  F00C     NOP
196E  AE1D     BTFSS holdAction, 7, ACCESS
1970  EFBC     GOTO 0x1978
1972  F00C     NOP
1974  EFBE     GOTO 0x197C
1976  F00C     NOP
1978  EFB3     GOTO 0x1966
197A  F00C     NOP
1A10  EF0E     GOTO 0x1A1C
1A12  F00D     NOP
1A1C  AE0B     BTFSS 0xB, 7, ACCESS
1A1E  EF13     GOTO 0x1A26
1A20  F00D     NOP
1A22  EF15     GOTO 0x1A2A
1A24  F00D     NOP
1A26  EF0A     GOTO 0x1A14
1A28  F00D     NOP
23:            			divisor <<= 1;
1966  90D8     BCF STATUS, 0, ACCESS
1968  361C     RLCF divisor, F, ACCESS
196A  361D     RLCF holdAction, F, ACCESS
1A14  90D8     BCF STATUS, 0, ACCESS
1A16  360A     RLCF divisor, F, ACCESS
1A18  360B     RLCF 0xB, F, ACCESS
24:            			counter++;
196C  2A1E     INCF counter, F, ACCESS
1A1A  2A0C     INCF __awmod, F, ACCESS
25:            		}
26:            		do {
27:            			if((unsigned int)divisor <= (unsigned int)dividend)
197C  501C     MOVF divisor, W, ACCESS
197E  5C1A     SUBWF pressAction, W, ACCESS
1980  501D     MOVF holdAction, W, ACCESS
1982  581B     SUBWFB 0x1B, W, ACCESS
1984  A0D8     BTFSS STATUS, 0, ACCESS
1986  EFC7     GOTO 0x198E
1988  F00C     NOP
198A  EFC9     GOTO 0x1992
198C  F00C     NOP
198E  EFCD     GOTO 0x199A
1990  F00C     NOP
1A2A  500A     MOVF divisor, W, ACCESS
1A2C  5C08     SUBWF dividend, W, ACCESS
1A2E  500B     MOVF 0xB, W, ACCESS
1A30  5809     SUBWFB 0x9, W, ACCESS
1A32  A0D8     BTFSS STATUS, 0, ACCESS
1A34  EF1E     GOTO 0x1A3C
1A36  F00D     NOP
1A38  EF20     GOTO 0x1A40
1A3A  F00D     NOP
1A3C  EF24     GOTO 0x1A48
1A3E  F00D     NOP
28:            				dividend -= divisor;
1992  501C     MOVF divisor, W, ACCESS
1994  5E1A     SUBWF pressAction, F, ACCESS
1996  501D     MOVF holdAction, W, ACCESS
1998  5A1B     SUBWFB 0x1B, F, ACCESS
1A40  500A     MOVF divisor, W, ACCESS
1A42  5E08     SUBWF dividend, F, ACCESS
1A44  500B     MOVF 0xB, W, ACCESS
1A46  5A09     SUBWFB 0x9, F, ACCESS
29:            			*(unsigned int *)&divisor >>= 1;
199A  90D8     BCF STATUS, 0, ACCESS
199C  321D     RRCF holdAction, F, ACCESS
199E  321C     RRCF divisor, F, ACCESS
1A48  90D8     BCF STATUS, 0, ACCESS
1A4A  320B     RRCF 0xB, F, ACCESS
1A4C  320A     RRCF divisor, F, ACCESS
30:            		} while(--counter != 0);
19A0  2E1E     DECFSZ counter, F, ACCESS
19A2  EFBE     GOTO 0x197C
19A4  F00C     NOP
1A4E  2E0C     DECFSZ __awmod, F, ACCESS
1A50  EF15     GOTO 0x1A2A
1A52  F00D     NOP
31:            	}
32:            	if(sign)
19A6  501F     MOVF sign, W, ACCESS
19A8  B4D8     BTFSC STATUS, 2, ACCESS
19AA  EFD9     GOTO 0x19B2
19AC  F00C     NOP
19AE  EFDB     GOTO 0x19B6
19B0  F00C     NOP
19B2  EFDF     GOTO 0x19BE
19B4  F00C     NOP
1A54  500D     MOVF __awmod, W, ACCESS
1A56  B4D8     BTFSC STATUS, 2, ACCESS
1A58  EF30     GOTO 0x1A60
1A5A  F00D     NOP
1A5C  EF32     GOTO 0x1A64
1A5E  F00D     NOP
1A60  EF36     GOTO 0x1A6C
1A62  F00D     NOP
33:            		dividend = -dividend;
19B6  6C1A     NEGF pressAction, ACCESS
19B8  1E1B     COMF 0x1B, F, ACCESS
19BA  B0D8     BTFSC STATUS, 0, ACCESS
19BC  2A1B     INCF 0x1B, F, ACCESS
1A64  6C08     NEGF dividend, ACCESS
1A66  1E09     COMF 0x9, F, ACCESS
1A68  B0D8     BTFSC STATUS, 0, ACCESS
1A6A  2A09     INCF 0x9, F, ACCESS
34:            	return dividend;
19BE  C01A     MOVFF pressAction, pressAction
19C0  F01A     NOP
19C2  C01B     MOVFF 0x1B, 0x1B
19C4  F01B     NOP
1A6C  C008     MOVFF dividend, dividend
1A6E  F008     NOP
1A70  C009     MOVFF 0x9, 0x9
1A72  F009     NOP
35:            }
0008  8252     BSF btemp, 1, ACCESS
19C6  0012     RETURN 0
1A74  0012     RETURN 0
